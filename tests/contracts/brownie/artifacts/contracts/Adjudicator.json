{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StakingEscrow",
          "name": "_escrow",
          "type": "address"
        },
        {
          "internalType": "enum SignatureVerifier.HashAlgorithm",
          "name": "_hashAlgorithm",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_basePenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penaltyHistoryCoefficient",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentagePenaltyCoefficient",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardCoefficient",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "evaluationHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investigator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "correctness",
          "type": "bool"
        }
      ],
      "name": "CFragEvaluated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "evaluationHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "IncorrectCFragVerdict",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "testTarget",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "StateVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "UpgradeFinished",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "basePenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract StakingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_capsuleBytes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_cFragBytes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_cFragSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_taskSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_requesterPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_workerPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_workerIdentityEvidence",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_preComputedData",
          "type": "bytes"
        }
      ],
      "name": "evaluateCFrag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "evaluatedCFrags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "finishUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashAlgorithm",
      "outputs": [
        {
          "internalType": "enum SignatureVerifier.HashAlgorithm",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgrade",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "penaltyHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyHistoryCoefficient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentagePenaltyCoefficient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousTarget",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCoefficient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testTarget",
          "type": "address"
        }
      ],
      "name": "verifyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "../../nucypher/blockchain/eth/sol/source/contracts/Adjudicator.sol",
    "10": "../../nucypher/blockchain/eth/sol/source/contracts/lib/ReEncryptionValidator.sol",
    "11": "../../nucypher/blockchain/eth/sol/source/contracts/lib/SignatureVerifier.sol",
    "13": "../../nucypher/blockchain/eth/sol/source/contracts/lib/UmbralDeserializer.sol",
    "15": "../../nucypher/blockchain/eth/sol/source/contracts/proxy/Upgradeable.sol",
    "19": "../../nucypher/blockchain/eth/sol/source/zeppelin/math/Math.sol",
    "20": "../../nucypher/blockchain/eth/sol/source/zeppelin/math/SafeMath.sol",
    "21": "../../nucypher/blockchain/eth/sol/source/zeppelin/ownership/Ownable.sol"
  },
  "ast": {
    "absolutePath": "../../nucypher/blockchain/eth/sol/source/contracts/Adjudicator.sol",
    "exportedSymbols": {
      "Adjudicator": [
        556
      ]
    },
    "id": 557,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 25,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "absolutePath": "../../nucypher/blockchain/eth/sol/source/contracts/lib/ReEncryptionValidator.sol",
        "file": "nucypher/lib/ReEncryptionValidator.sol",
        "id": 26,
        "nodeType": "ImportDirective",
        "scope": 557,
        "sourceUnit": 12045,
        "src": "25:48:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "../../nucypher/blockchain/eth/sol/source/contracts/lib/SignatureVerifier.sol",
        "file": "nucypher/lib/SignatureVerifier.sol",
        "id": 27,
        "nodeType": "ImportDirective",
        "scope": 557,
        "sourceUnit": 12382,
        "src": "74:44:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "../../nucypher/blockchain/eth/sol/source/contracts/StakingEscrow.sol",
        "file": "nucypher/StakingEscrow.sol",
        "id": 28,
        "nodeType": "ImportDirective",
        "scope": 557,
        "sourceUnit": 8773,
        "src": "119:36:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "../../nucypher/blockchain/eth/sol/source/contracts/proxy/Upgradeable.sol",
        "file": "nucypher/proxy/Upgradeable.sol",
        "id": 29,
        "nodeType": "ImportDirective",
        "scope": 557,
        "sourceUnit": 14147,
        "src": "156:40:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "../../nucypher/blockchain/eth/sol/source/zeppelin/math/SafeMath.sol",
        "file": "zeppelin/math/SafeMath.sol",
        "id": 30,
        "nodeType": "ImportDirective",
        "scope": 557,
        "sourceUnit": 15479,
        "src": "197:36:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "../../nucypher/blockchain/eth/sol/source/zeppelin/math/Math.sol",
        "file": "zeppelin/math/Math.sol",
        "id": 31,
        "nodeType": "ImportDirective",
        "scope": 557,
        "sourceUnit": 15345,
        "src": "234:32:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 33,
              "name": "Upgradeable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 14146,
              "src": "413:11:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Upgradeable_$14146",
                "typeString": "contract Upgradeable"
              }
            },
            "id": 34,
            "nodeType": "InheritanceSpecifier",
            "src": "413:11:1"
          }
        ],
        "contractDependencies": [
          14146,
          15599
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 32,
          "nodeType": "StructuredDocumentation",
          "src": "269:119:1",
          "text": "@title Adjudicator\n@notice Supervises stakers' behavior and punishes when something's wrong.\n@dev |v2.1.2|"
        },
        "fullyImplemented": true,
        "id": 556,
        "linearizedBaseContracts": [
          556,
          14146,
          15599
        ],
        "name": "Adjudicator",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 37,
            "libraryName": {
              "contractScope": null,
              "id": 35,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 15478,
              "src": "438:8:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$15478",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "432:27:1",
            "typeName": {
              "id": 36,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "451:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 40,
            "libraryName": {
              "contractScope": null,
              "id": 38,
              "name": "UmbralDeserializer",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 13605,
              "src": "470:18:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UmbralDeserializer_$13605",
                "typeString": "library UmbralDeserializer"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "464:35:1",
            "typeName": {
              "id": 39,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "493:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 48,
            "name": "CFragEvaluated",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "evaluationHash",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 48,
                  "src": "535:30:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "535:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investigator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 48,
                  "src": "575:28:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 43,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "575:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "correctness",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 48,
                  "src": "613:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "613:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "525:110:1"
            },
            "src": "505:131:1"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 56,
            "name": "IncorrectCFragVerdict",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 55,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "evaluationHash",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 56,
                  "src": "678:30:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 49,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "678:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 52,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "worker",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 56,
                  "src": "718:22:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 51,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "718:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 54,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 56,
                  "src": "750:22:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 53,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "750:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "668:110:1"
            },
            "src": "641:138:1"
          },
          {
            "constant": true,
            "id": 62,
            "mutability": "constant",
            "name": "RESERVED_CAPSULE_AND_CFRAG_BYTES",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "816:62:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 57,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "816:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 60,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "876:1:1",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }
                ],
                "id": 59,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "868:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 58,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "868:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": null,
                    "typeString": null
                  }
                }
              },
              "id": 61,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "868:10:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 68,
            "mutability": "constant",
            "name": "RESERVED_ADDRESS",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "884:46:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 63,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "884:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 66,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "928:1:1",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }
                ],
                "id": 65,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "920:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_$",
                  "typeString": "type(address)"
                },
                "typeName": {
                  "id": 64,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "920:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": null,
                    "typeString": null
                  }
                }
              },
              "id": 67,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "920:10:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "e2fdcc17",
            "id": 70,
            "mutability": "immutable",
            "name": "escrow",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "937:37:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_StakingEscrow_$8772",
              "typeString": "contract StakingEscrow"
            },
            "typeName": {
              "contractScope": null,
              "id": 69,
              "name": "StakingEscrow",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8772,
              "src": "937:13:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                "typeString": "contract StakingEscrow"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "59a15fa5",
            "id": 72,
            "mutability": "immutable",
            "name": "hashAlgorithm",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "980:62:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
              "typeString": "enum SignatureVerifier.HashAlgorithm"
            },
            "typeName": {
              "contractScope": null,
              "id": 71,
              "name": "SignatureVerifier.HashAlgorithm",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12051,
              "src": "980:31:1",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                "typeString": "enum SignatureVerifier.HashAlgorithm"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5712e98c",
            "id": 74,
            "mutability": "immutable",
            "name": "basePenalty",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "1048:36:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 73,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1048:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "1f96670b",
            "id": 76,
            "mutability": "immutable",
            "name": "penaltyHistoryCoefficient",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "1090:50:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 75,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1090:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "bd02b140",
            "id": 78,
            "mutability": "immutable",
            "name": "percentagePenaltyCoefficient",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "1146:53:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 77,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1146:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "fc9daa07",
            "id": 80,
            "mutability": "immutable",
            "name": "rewardCoefficient",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "1205:42:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 79,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1205:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5d5b6836",
            "id": 84,
            "mutability": "mutable",
            "name": "penaltyHistory",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "1254:50:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 83,
              "keyType": {
                "id": 81,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1263:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1254:28:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 82,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1274:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "70535443",
            "id": 88,
            "mutability": "mutable",
            "name": "evaluatedCFrags",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 556,
            "src": "1310:48:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
              "typeString": "mapping(bytes32 => bool)"
            },
            "typeName": {
              "id": 87,
              "keyType": {
                "id": 85,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1319:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "1310:25:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                "typeString": "mapping(bytes32 => bool)"
              },
              "valueType": {
                "id": 86,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1330:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 144,
              "nodeType": "Block",
              "src": "2073:579:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 117,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 113,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 109,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 105,
                                  "name": "_escrow",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 91,
                                  "src": "2117:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                                    "typeString": "contract StakingEscrow"
                                  }
                                },
                                "id": 106,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "secondsPerPeriod",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 603,
                                "src": "2117:24:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_uint32_$",
                                  "typeString": "function () view external returns (uint32)"
                                }
                              },
                              "id": 107,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2117:26:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2146:1:1",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "2117:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 112,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 110,
                              "name": "_percentagePenaltyCoefficient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 99,
                              "src": "2287:29:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2320:1:1",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "2287:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "2117:204:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 114,
                            "name": "_rewardCoefficient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101,
                            "src": "2337:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 115,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2359:1:1",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2337:23:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2117:243:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 104,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2109:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2109:252:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 119,
                  "nodeType": "ExpressionStatement",
                  "src": "2109:252:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 120,
                      "name": "escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 70,
                      "src": "2371:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                        "typeString": "contract StakingEscrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 121,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 91,
                      "src": "2380:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                        "typeString": "contract StakingEscrow"
                      }
                    },
                    "src": "2371:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                      "typeString": "contract StakingEscrow"
                    }
                  },
                  "id": 123,
                  "nodeType": "ExpressionStatement",
                  "src": "2371:16:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 126,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 124,
                      "name": "hashAlgorithm",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "2397:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                        "typeString": "enum SignatureVerifier.HashAlgorithm"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 125,
                      "name": "_hashAlgorithm",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 93,
                      "src": "2413:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                        "typeString": "enum SignatureVerifier.HashAlgorithm"
                      }
                    },
                    "src": "2397:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                      "typeString": "enum SignatureVerifier.HashAlgorithm"
                    }
                  },
                  "id": 127,
                  "nodeType": "ExpressionStatement",
                  "src": "2397:30:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 130,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 128,
                      "name": "basePenalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 74,
                      "src": "2437:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 129,
                      "name": "_basePenalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "2451:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2437:26:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 131,
                  "nodeType": "ExpressionStatement",
                  "src": "2437:26:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 132,
                      "name": "percentagePenaltyCoefficient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78,
                      "src": "2473:28:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 133,
                      "name": "_percentagePenaltyCoefficient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 99,
                      "src": "2504:29:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2473:60:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 135,
                  "nodeType": "ExpressionStatement",
                  "src": "2473:60:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 136,
                      "name": "penaltyHistoryCoefficient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 76,
                      "src": "2543:25:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 137,
                      "name": "_penaltyHistoryCoefficient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 97,
                      "src": "2571:26:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2543:54:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 139,
                  "nodeType": "ExpressionStatement",
                  "src": "2543:54:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 140,
                      "name": "rewardCoefficient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80,
                      "src": "2607:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 141,
                      "name": "_rewardCoefficient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 101,
                      "src": "2627:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2607:38:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 143,
                  "nodeType": "ExpressionStatement",
                  "src": "2607:38:1"
                }
              ]
            },
            "documentation": {
              "id": 89,
              "nodeType": "StructuredDocumentation",
              "src": "1365:422:1",
              "text": "@param _escrow Escrow contract\n@param _hashAlgorithm Hashing algorithm\n@param _basePenalty Base for the penalty calculation\n@param _penaltyHistoryCoefficient Coefficient for calculating the penalty depending on the history\n@param _percentagePenaltyCoefficient Coefficient for calculating the percentage penalty\n@param _rewardCoefficient Coefficient for calculating the reward"
            },
            "id": 145,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91,
                  "mutability": "mutable",
                  "name": "_escrow",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "1813:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                    "typeString": "contract StakingEscrow"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 90,
                    "name": "StakingEscrow",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 8772,
                    "src": "1813:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                      "typeString": "contract StakingEscrow"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 93,
                  "mutability": "mutable",
                  "name": "_hashAlgorithm",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "1844:46:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                    "typeString": "enum SignatureVerifier.HashAlgorithm"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 92,
                    "name": "SignatureVerifier.HashAlgorithm",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 12051,
                    "src": "1844:31:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                      "typeString": "enum SignatureVerifier.HashAlgorithm"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 95,
                  "mutability": "mutable",
                  "name": "_basePenalty",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "1900:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 94,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1900:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 97,
                  "mutability": "mutable",
                  "name": "_penaltyHistoryCoefficient",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "1930:34:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 96,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1930:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 99,
                  "mutability": "mutable",
                  "name": "_percentagePenaltyCoefficient",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "1974:37:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 98,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1974:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 101,
                  "mutability": "mutable",
                  "name": "_rewardCoefficient",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2021:26:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 100,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2021:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1803:250:1"
            },
            "returnParameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2073:0:1"
            },
            "scope": 556,
            "src": "1792:860:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 396,
              "nodeType": "Block",
              "src": "3652:3549:1",
              "statements": [
                {
                  "assignments": [
                    166
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 166,
                      "mutability": "mutable",
                      "name": "evaluationHash",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "3714:22:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 165,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3714:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 176,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 171,
                            "name": "_capsuleBytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 148,
                            "src": "3792:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 172,
                            "name": "_cFragBytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 150,
                            "src": "3807:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 169,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3775:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "3775:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3775:44:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 174,
                        "name": "hashAlgorithm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 72,
                        "src": "3821:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                          "typeString": "enum SignatureVerifier.HashAlgorithm"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                          "typeString": "enum SignatureVerifier.HashAlgorithm"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 167,
                        "name": "SignatureVerifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12381,
                        "src": "3739:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                          "typeString": "type(library SignatureVerifier)"
                        }
                      },
                      "id": 168,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "hash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 12172,
                      "src": "3739:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_enum$_HashAlgorithm_$12051_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory,enum SignatureVerifier.HashAlgorithm) pure returns (bytes32)"
                      }
                    },
                    "id": 175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3739:96:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3714:121:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 181,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "3853:32:1",
                        "subExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 178,
                            "name": "evaluatedCFrags",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 88,
                            "src": "3854:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                              "typeString": "mapping(bytes32 => bool)"
                            }
                          },
                          "id": 180,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 179,
                            "name": "evaluationHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 166,
                            "src": "3870:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3854:31:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "546869732043467261672068617320616c7265616479206265656e206576616c75617465642e",
                        "id": 182,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3887:40:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4664591bb9f351c1a76f188c185f98fab149c060ddf71c0f1cc444345e58e23e",
                          "typeString": "literal_string \"This CFrag has already been evaluated.\""
                        },
                        "value": "This CFrag has already been evaluated."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4664591bb9f351c1a76f188c185f98fab149c060ddf71c0f1cc444345e58e23e",
                          "typeString": "literal_string \"This CFrag has already been evaluated.\""
                        }
                      ],
                      "id": 177,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3845:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 183,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3845:83:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 184,
                  "nodeType": "ExpressionStatement",
                  "src": "3845:83:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 189,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 185,
                        "name": "evaluatedCFrags",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 88,
                        "src": "3938:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 187,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 186,
                        "name": "evaluationHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 166,
                        "src": "3954:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3938:31:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 188,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3972:4:1",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3938:38:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 190,
                  "nodeType": "ExpressionStatement",
                  "src": "3938:38:1"
                },
                {
                  "assignments": [
                    192
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 192,
                      "mutability": "mutable",
                      "name": "cFragIsCorrect",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "4037:19:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 191,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4037:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 199,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 195,
                        "name": "_capsuleBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 148,
                        "src": "4095:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 196,
                        "name": "_cFragBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 150,
                        "src": "4110:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 197,
                        "name": "_preComputedData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 162,
                        "src": "4123:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 193,
                        "name": "ReEncryptionValidator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12044,
                        "src": "4059:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ReEncryptionValidator_$12044_$",
                          "typeString": "type(library ReEncryptionValidator)"
                        }
                      },
                      "id": 194,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "validateCFrag",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11305,
                      "src": "4059:35:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (bytes memory,bytes memory,bytes memory) pure returns (bool)"
                      }
                    },
                    "id": 198,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4059:81:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4037:103:1"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 201,
                        "name": "evaluationHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 166,
                        "src": "4170:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 202,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4186:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 203,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "4186:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 204,
                        "name": "cFragIsCorrect",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 192,
                        "src": "4198:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 200,
                      "name": "CFragEvaluated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48,
                      "src": "4155:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bool_$returns$__$",
                        "typeString": "function (bytes32,address,bool)"
                      }
                    },
                    "id": 205,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4155:58:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 206,
                  "nodeType": "EmitStatement",
                  "src": "4150:63:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 210,
                            "name": "_workerPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 158,
                            "src": "4340:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 208,
                            "name": "ReEncryptionValidator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12044,
                            "src": "4291:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ReEncryptionValidator_$12044_$",
                              "typeString": "type(library ReEncryptionValidator)"
                            }
                          },
                          "id": 209,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "checkSerializedCoordinates",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 11554,
                          "src": "4291:48:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (bytes memory) pure returns (bool)"
                          }
                        },
                        "id": 211,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4291:66:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5374616b65722773207075626c6963206b657920697320696e76616c6964",
                        "id": 212,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4375:32:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_163eca2ae46c2ff38905a90f052337e49b1201958b1be637d17e65e72306d3f4",
                          "typeString": "literal_string \"Staker's public key is invalid\""
                        },
                        "value": "Staker's public key is invalid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_163eca2ae46c2ff38905a90f052337e49b1201958b1be637d17e65e72306d3f4",
                          "typeString": "literal_string \"Staker's public key is invalid\""
                        }
                      ],
                      "id": 207,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4283:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 213,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4283:125:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 214,
                  "nodeType": "ExpressionStatement",
                  "src": "4283:125:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 218,
                            "name": "_requesterPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 156,
                            "src": "4475:19:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 216,
                            "name": "ReEncryptionValidator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12044,
                            "src": "4426:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ReEncryptionValidator_$12044_$",
                              "typeString": "type(library ReEncryptionValidator)"
                            }
                          },
                          "id": 217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "checkSerializedCoordinates",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 11554,
                          "src": "4426:48:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (bytes memory) pure returns (bool)"
                          }
                        },
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4426:69:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5265717565737465722773207075626c6963206b657920697320696e76616c6964",
                        "id": 220,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4513:35:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_eabd5e05cc90de13ce98e2328f8c87ce8ba753321299c91cfc37105408a0abc9",
                          "typeString": "literal_string \"Requester's public key is invalid\""
                        },
                        "value": "Requester's public key is invalid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_eabd5e05cc90de13ce98e2328f8c87ce8ba753321299c91cfc37105408a0abc9",
                          "typeString": "literal_string \"Requester's public key is invalid\""
                        }
                      ],
                      "id": 215,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4418:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 221,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4418:131:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 222,
                  "nodeType": "ExpressionStatement",
                  "src": "4418:131:1"
                },
                {
                  "assignments": [
                    226
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 226,
                      "mutability": "mutable",
                      "name": "precomp",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "4560:49:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PreComputedData_$12829_memory_ptr",
                        "typeString": "struct UmbralDeserializer.PreComputedData"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 225,
                        "name": "UmbralDeserializer.PreComputedData",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 12829,
                        "src": "4560:34:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PreComputedData_$12829_storage_ptr",
                          "typeString": "struct UmbralDeserializer.PreComputedData"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 230,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 227,
                        "name": "_preComputedData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 162,
                        "src": "4612:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 228,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toPreComputedData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13507,
                      "src": "4612:34:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_struct$_PreComputedData_$12829_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) pure returns (struct UmbralDeserializer.PreComputedData memory)"
                      }
                    },
                    "id": 229,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4612:36:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PreComputedData_$12829_memory_ptr",
                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4560:88:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 234,
                            "name": "_cFragBytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 150,
                            "src": "4755:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 237,
                                "name": "_cFragSignature",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 152,
                                "src": "4801:15:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 238,
                                    "name": "precomp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 226,
                                    "src": "4818:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$12829_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 239,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lostBytes",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 12828,
                                  "src": "4818:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes5",
                                    "typeString": "bytes5"
                                  }
                                },
                                "id": 241,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 240,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4836:1:1",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4818:20:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 235,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "4784:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 236,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodePacked",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "4784:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 242,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4784:55:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 243,
                            "name": "_workerPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 158,
                            "src": "4857:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 244,
                            "name": "hashAlgorithm",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 72,
                            "src": "4891:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                              "typeString": "enum SignatureVerifier.HashAlgorithm"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                              "typeString": "enum SignatureVerifier.HashAlgorithm"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 232,
                            "name": "SignatureVerifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12381,
                            "src": "4713:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                              "typeString": "type(library SignatureVerifier)"
                            }
                          },
                          "id": 233,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verify",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12206,
                          "src": "4713:24:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_enum$_HashAlgorithm_$12051_$returns$_t_bool_$",
                            "typeString": "function (bytes memory,bytes memory,bytes memory,enum SignatureVerifier.HashAlgorithm) pure returns (bool)"
                          }
                        },
                        "id": 245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4713:192:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4346726167207369676e617475726520697320696e76616c6964",
                        "id": 246,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4923:28:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_31f35221622c598ae9b990ee0de2eb161357a939c9dc2488c71e9b6964f5f819",
                          "typeString": "literal_string \"CFrag signature is invalid\""
                        },
                        "value": "CFrag signature is invalid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_31f35221622c598ae9b990ee0de2eb161357a939c9dc2488c71e9b6964f5f819",
                          "typeString": "literal_string \"CFrag signature is invalid\""
                        }
                      ],
                      "id": 231,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4705:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 247,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4705:256:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 248,
                  "nodeType": "ExpressionStatement",
                  "src": "4705:256:1"
                },
                {
                  "assignments": [
                    252
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 252,
                      "mutability": "mutable",
                      "name": "cFrag",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "5074:43:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CapsuleFrag_$12782_memory_ptr",
                        "typeString": "struct UmbralDeserializer.CapsuleFrag"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 251,
                        "name": "UmbralDeserializer.CapsuleFrag",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 12782,
                        "src": "5074:30:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CapsuleFrag_$12782_storage_ptr",
                          "typeString": "struct UmbralDeserializer.CapsuleFrag"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 256,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 253,
                        "name": "_cFragBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 150,
                        "src": "5120:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 254,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toCapsuleFrag",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13128,
                      "src": "5120:25:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_struct$_CapsuleFrag_$12782_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) pure returns (struct UmbralDeserializer.CapsuleFrag memory)"
                      }
                    },
                    "id": 255,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5120:27:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CapsuleFrag_$12782_memory_ptr",
                      "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5074:73:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 260,
                            "name": "_taskSignature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 154,
                            "src": "5207:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 263,
                                    "name": "cFrag",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 252,
                                    "src": "5256:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_CapsuleFrag_$12782_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                    }
                                  },
                                  "id": 264,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "proof",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 12781,
                                  "src": "5256:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CorrectnessProof_$12771_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                  }
                                },
                                "id": 265,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "metadata",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 12770,
                                "src": "5256:20:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 266,
                                    "name": "precomp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 226,
                                    "src": "5278:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$12829_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 267,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lostBytes",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 12828,
                                  "src": "5278:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes5",
                                    "typeString": "bytes5"
                                  }
                                },
                                "id": 269,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "32",
                                  "id": 268,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5296:1:1",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5278:20:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 261,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "5239:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 262,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodePacked",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "5239:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 270,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5239:60:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 271,
                            "name": "_workerPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 158,
                            "src": "5317:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 272,
                            "name": "hashAlgorithm",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 72,
                            "src": "5351:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                              "typeString": "enum SignatureVerifier.HashAlgorithm"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                              "typeString": "enum SignatureVerifier.HashAlgorithm"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 258,
                            "name": "SignatureVerifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12381,
                            "src": "5165:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                              "typeString": "type(library SignatureVerifier)"
                            }
                          },
                          "id": 259,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verify",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12206,
                          "src": "5165:24:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_enum$_HashAlgorithm_$12051_$returns$_t_bool_$",
                            "typeString": "function (bytes memory,bytes memory,bytes memory,enum SignatureVerifier.HashAlgorithm) pure returns (bool)"
                          }
                        },
                        "id": 273,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5165:200:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5461736b207369676e617475726520697320696e76616c6964",
                        "id": 274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5383:27:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_56e8724e96a34e99517ffb7bab0b070757cbcb78b8e82fbb091cf56b7ffe2c77",
                          "typeString": "literal_string \"Task signature is invalid\""
                        },
                        "value": "Task signature is invalid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_56e8724e96a34e99517ffb7bab0b070757cbcb78b8e82fbb091cf56b7ffe2c77",
                          "typeString": "literal_string \"Task signature is invalid\""
                        }
                      ],
                      "id": 257,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5157:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 275,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5157:263:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 276,
                  "nodeType": "ExpressionStatement",
                  "src": "5157:263:1"
                },
                {
                  "assignments": [
                    278
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 278,
                      "mutability": "mutable",
                      "name": "stampXCoord",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "5603:19:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 277,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5603:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 279,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5603:19:1"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "5641:71:1",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "5655:47:1",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "_workerPublicKey",
                                  "nodeType": "YulIdentifier",
                                  "src": "5680:16:1"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5698:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5676:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5676:25:1"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "5670:5:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "5670:32:1"
                        },
                        "variableNames": [
                          {
                            "name": "stampXCoord",
                            "nodeType": "YulIdentifier",
                            "src": "5655:11:1"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "berlin",
                  "externalReferences": [
                    {
                      "declaration": 158,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5680:16:1",
                      "valueSize": 1
                    },
                    {
                      "declaration": 278,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5655:11:1",
                      "valueSize": 1
                    }
                  ],
                  "id": 280,
                  "nodeType": "InlineAssembly",
                  "src": "5632:80:1"
                },
                {
                  "assignments": [
                    282
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 282,
                      "mutability": "mutable",
                      "name": "stamp",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "5721:18:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 281,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5721:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 291,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 285,
                            "name": "precomp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 226,
                            "src": "5759:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PreComputedData_$12829_memory_ptr",
                              "typeString": "struct UmbralDeserializer.PreComputedData memory"
                            }
                          },
                          "id": 286,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "lostBytes",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12828,
                          "src": "5759:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes5",
                            "typeString": "bytes5"
                          }
                        },
                        "id": 288,
                        "indexExpression": {
                          "argumentTypes": null,
                          "hexValue": "34",
                          "id": 287,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5777:1:1",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_4_by_1",
                            "typeString": "int_const 4"
                          },
                          "value": "4"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5759:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 289,
                        "name": "stampXCoord",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 278,
                        "src": "5781:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 283,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "5742:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 284,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodePacked",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5742:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function () pure returns (bytes memory)"
                      }
                    },
                    "id": 290,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5742:51:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5721:72:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 297,
                                "name": "_capsuleBytes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 148,
                                "src": "5871:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 298,
                                "name": "stamp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 282,
                                "src": "5919:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 299,
                                "name": "_workerIdentityEvidence",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 160,
                                "src": "5959:23:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 300,
                                  "name": "precomp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 226,
                                  "src": "6017:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PreComputedData_$12829_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                  }
                                },
                                "id": 301,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "alicesKeyAsAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 12826,
                                "src": "6017:26:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 304,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "6086:1:1",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 303,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6078:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 302,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6078:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": null,
                                      "typeString": null
                                    }
                                  }
                                },
                                "id": 305,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6078:10:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 295,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "5854:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 296,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodePacked",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "5854:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 306,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5854:235:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 309,
                                "name": "_taskSignature",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 154,
                                "src": "6124:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 310,
                                    "name": "precomp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 226,
                                    "src": "6140:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$12829_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 311,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lostBytes",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 12828,
                                  "src": "6140:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes5",
                                    "typeString": "bytes5"
                                  }
                                },
                                "id": 313,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "33",
                                  "id": 312,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6158:1:1",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_3_by_1",
                                    "typeString": "int_const 3"
                                  },
                                  "value": "3"
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6140:20:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 307,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "6107:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 308,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodePacked",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "6107:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 314,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6107:54:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 315,
                            "name": "_requesterPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 156,
                            "src": "6179:19:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 316,
                            "name": "hashAlgorithm",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 72,
                            "src": "6216:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                              "typeString": "enum SignatureVerifier.HashAlgorithm"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                              "typeString": "enum SignatureVerifier.HashAlgorithm"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 293,
                            "name": "SignatureVerifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12381,
                            "src": "5812:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                              "typeString": "type(library SignatureVerifier)"
                            }
                          },
                          "id": 294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verify",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12206,
                          "src": "5812:24:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_enum$_HashAlgorithm_$12051_$returns$_t_bool_$",
                            "typeString": "function (bytes memory,bytes memory,bytes memory,enum SignatureVerifier.HashAlgorithm) pure returns (bool)"
                          }
                        },
                        "id": 317,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5812:418:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53706563696669636174696f6e207369676e617475726520697320696e76616c6964",
                        "id": 318,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6248:36:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_42fc834b56f6ae019a37fcd39db2fc4988a086b54f2f9fd0c51578ce60a14e50",
                          "typeString": "literal_string \"Specification signature is invalid\""
                        },
                        "value": "Specification signature is invalid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_42fc834b56f6ae019a37fcd39db2fc4988a086b54f2f9fd0c51578ce60a14e50",
                          "typeString": "literal_string \"Specification signature is invalid\""
                        }
                      ],
                      "id": 292,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5804:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 319,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5804:490:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 320,
                  "nodeType": "ExpressionStatement",
                  "src": "5804:490:1"
                },
                {
                  "assignments": [
                    322
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 322,
                      "mutability": "mutable",
                      "name": "worker",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "6364:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 321,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6364:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 335,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 327,
                            "name": "stamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 282,
                            "src": "6449:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30783435",
                                "id": 330,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6461:4:1",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_69_by_1",
                                  "typeString": "int_const 69"
                                },
                                "value": "0x45"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_69_by_1",
                                  "typeString": "int_const 69"
                                }
                              ],
                              "id": 329,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6456:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes1_$",
                                "typeString": "type(bytes1)"
                              },
                              "typeName": {
                                "id": 328,
                                "name": "byte",
                                "nodeType": "ElementaryTypeName",
                                "src": "6456:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 331,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6456:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 325,
                            "name": "SignatureVerifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12381,
                            "src": "6420:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                              "typeString": "type(library SignatureVerifier)"
                            }
                          },
                          "id": 326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "hashEIP191",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12346,
                          "src": "6420:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes1_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory,bytes1) view returns (bytes32)"
                          }
                        },
                        "id": 332,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6420:47:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 333,
                        "name": "_workerIdentityEvidence",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 160,
                        "src": "6540:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 323,
                        "name": "SignatureVerifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12381,
                        "src": "6381:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                          "typeString": "type(library SignatureVerifier)"
                        }
                      },
                      "id": 324,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "recover",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 12108,
                      "src": "6381:25:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
                        "typeString": "function (bytes32,bytes memory) pure returns (address)"
                      }
                    },
                    "id": 334,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6381:183:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6364:200:1"
                },
                {
                  "assignments": [
                    337
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 337,
                      "mutability": "mutable",
                      "name": "staker",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "6574:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 336,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6574:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 342,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 340,
                        "name": "worker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "6615:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 338,
                        "name": "escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 70,
                        "src": "6591:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                          "typeString": "contract StakingEscrow"
                        }
                      },
                      "id": 339,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "stakerFromWorker",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4393,
                      "src": "6591:23:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) view external returns (address)"
                      }
                    },
                    "id": 341,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6591:31:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6574:48:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 349,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 344,
                          "name": "staker",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 337,
                          "src": "6640:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 347,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6658:1:1",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 346,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6650:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 345,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6650:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6650:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "6640:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "576f726b6572206d7573742062652072656c6174656420746f2061207374616b6572",
                        "id": 350,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6662:36:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9988d97aa1290ea8cd592aa91813d914e9907bd90c54e72920e329f3ffd9c7b0",
                          "typeString": "literal_string \"Worker must be related to a staker\""
                        },
                        "value": "Worker must be related to a staker"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9988d97aa1290ea8cd592aa91813d914e9907bd90c54e72920e329f3ffd9c7b0",
                          "typeString": "literal_string \"Worker must be related to a staker\""
                        }
                      ],
                      "id": 343,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6632:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6632:67:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 352,
                  "nodeType": "ExpressionStatement",
                  "src": "6632:67:1"
                },
                {
                  "assignments": [
                    354
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 354,
                      "mutability": "mutable",
                      "name": "stakerValue",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 396,
                      "src": "6757:19:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 353,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6757:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 359,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 357,
                        "name": "staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 337,
                        "src": "6799:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 355,
                        "name": "escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 70,
                        "src": "6779:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                          "typeString": "contract StakingEscrow"
                        }
                      },
                      "id": 356,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getAllTokens",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4616,
                      "src": "6779:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 358,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6779:27:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6757:49:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 361,
                          "name": "stakerValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 354,
                          "src": "6824:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 362,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6838:1:1",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6824:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5374616b657220686173206e6f20746f6b656e73",
                        "id": 364,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6841:22:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3ea6bf59fd83998de9704b9be6e0bdf451dab4f430a1220d4573968f0845eb6f",
                          "typeString": "literal_string \"Staker has no tokens\""
                        },
                        "value": "Staker has no tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3ea6bf59fd83998de9704b9be6e0bdf451dab4f430a1220d4573968f0845eb6f",
                          "typeString": "literal_string \"Staker has no tokens\""
                        }
                      ],
                      "id": 360,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6816:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 365,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6816:48:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 366,
                  "nodeType": "ExpressionStatement",
                  "src": "6816:48:1"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 368,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "6930:15:1",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 367,
                      "name": "cFragIsCorrect",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 192,
                      "src": "6931:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 395,
                  "nodeType": "IfStatement",
                  "src": "6926:269:1",
                  "trueBody": {
                    "id": 394,
                    "nodeType": "Block",
                    "src": "6947:248:1",
                    "statements": [
                      {
                        "assignments": [
                          370,
                          372
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 370,
                            "mutability": "mutable",
                            "name": "penalty",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 394,
                            "src": "6962:15:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 369,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "6962:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 372,
                            "mutability": "mutable",
                            "name": "reward",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 394,
                            "src": "6979:14:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 371,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "6979:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 377,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 374,
                              "name": "staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "7023:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 375,
                              "name": "stakerValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 354,
                              "src": "7031:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 373,
                            "name": "calculatePenaltyAndReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 451,
                            "src": "6997:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
                              "typeString": "function (address,uint256) returns (uint256,uint256)"
                            }
                          },
                          "id": 376,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6997:46:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(uint256,uint256)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6961:82:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 381,
                              "name": "staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "7076:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 382,
                              "name": "penalty",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 370,
                              "src": "7084:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 383,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "7093:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 384,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "7093:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 385,
                              "name": "reward",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 372,
                              "src": "7105:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 378,
                              "name": "escrow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 70,
                              "src": "7057:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_StakingEscrow_$8772",
                                "typeString": "contract StakingEscrow"
                              }
                            },
                            "id": 380,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "slashStaker",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7478,
                            "src": "7057:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,address,uint256) external"
                            }
                          },
                          "id": 386,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7057:55:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 387,
                        "nodeType": "ExpressionStatement",
                        "src": "7057:55:1"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 389,
                              "name": "evaluationHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 166,
                              "src": "7153:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 390,
                              "name": "worker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 322,
                              "src": "7169:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 391,
                              "name": "staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "7177:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 388,
                            "name": "IncorrectCFragVerdict",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 56,
                            "src": "7131:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (bytes32,address,address)"
                            }
                          },
                          "id": 392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7131:53:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 393,
                        "nodeType": "EmitStatement",
                        "src": "7126:58:1"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 146,
              "nodeType": "StructuredDocumentation",
              "src": "2658:630:1",
              "text": "@notice Submit proof that a worker created wrong CFrag\n@param _capsuleBytes Serialized capsule\n@param _cFragBytes Serialized CFrag\n@param _cFragSignature Signature of CFrag by worker\n@param _taskSignature Signature of task specification by Bob\n@param _requesterPublicKey Bob's signing public key, also known as \"stamp\"\n@param _workerPublicKey Worker's signing public key, also known as \"stamp\"\n@param _workerIdentityEvidence Signature of worker's public key by worker's eth-key\n@param _preComputedData Additional pre-computed data for CFrag correctness verification"
            },
            "functionSelector": "0bea809b",
            "id": 397,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "evaluateCFrag",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 148,
                  "mutability": "mutable",
                  "name": "_capsuleBytes",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3325:26:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 147,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3325:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 150,
                  "mutability": "mutable",
                  "name": "_cFragBytes",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3361:24:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 149,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3361:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 152,
                  "mutability": "mutable",
                  "name": "_cFragSignature",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3395:28:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 151,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3395:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 154,
                  "mutability": "mutable",
                  "name": "_taskSignature",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3433:27:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 153,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3433:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 156,
                  "mutability": "mutable",
                  "name": "_requesterPublicKey",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3470:32:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 155,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3470:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 158,
                  "mutability": "mutable",
                  "name": "_workerPublicKey",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3512:29:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 157,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3512:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 160,
                  "mutability": "mutable",
                  "name": "_workerIdentityEvidence",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3551:36:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 159,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3551:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 162,
                  "mutability": "mutable",
                  "name": "_preComputedData",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 397,
                  "src": "3597:29:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 161,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3597:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3315:317:1"
            },
            "returnParameters": {
              "id": 164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3652:0:1"
            },
            "scope": 556,
            "src": "3293:3908:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 450,
              "nodeType": "Block",
              "src": "7543:400:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 409,
                      "name": "penalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 405,
                      "src": "7553:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 414,
                                "name": "penaltyHistory",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 84,
                                "src": "7609:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 416,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 415,
                                "name": "_staker",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 400,
                                "src": "7624:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7609:23:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 412,
                              "name": "penaltyHistoryCoefficient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 76,
                              "src": "7579:25:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 413,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15381,
                            "src": "7579:29:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 417,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7579:54:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 410,
                          "name": "basePenalty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 74,
                          "src": "7563:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 411,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 15456,
                        "src": "7563:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 418,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7563:71:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7553:81:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 420,
                  "nodeType": "ExpressionStatement",
                  "src": "7553:81:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 430,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 421,
                      "name": "penalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 405,
                      "src": "7644:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 424,
                          "name": "penalty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 405,
                          "src": "7663:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 427,
                              "name": "percentagePenaltyCoefficient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 78,
                              "src": "7689:28:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 425,
                              "name": "_stakerValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 402,
                              "src": "7672:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 426,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "div",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15406,
                            "src": "7672:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 428,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7672:46:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 422,
                          "name": "Math",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15344,
                          "src": "7654:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_Math_$15344_$",
                            "typeString": "type(library Math)"
                          }
                        },
                        "id": 423,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "min",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 15310,
                        "src": "7654:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 429,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7654:65:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7644:75:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 431,
                  "nodeType": "ExpressionStatement",
                  "src": "7644:75:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 432,
                      "name": "reward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 407,
                      "src": "7729:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 435,
                          "name": "rewardCoefficient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80,
                          "src": "7750:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 433,
                          "name": "penalty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 405,
                          "src": "7738:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 434,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 15406,
                        "src": "7738:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 436,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7738:30:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7729:39:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 438,
                  "nodeType": "ExpressionStatement",
                  "src": "7729:39:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 448,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 439,
                        "name": "penaltyHistory",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "7880:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 441,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 440,
                        "name": "_staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 400,
                        "src": "7895:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7880:23:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7934:1:1",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 442,
                            "name": "penaltyHistory",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 84,
                            "src": "7906:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 444,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 443,
                            "name": "_staker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 400,
                            "src": "7921:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7906:23:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 445,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 15456,
                        "src": "7906:27:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 447,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7906:30:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7880:56:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 449,
                  "nodeType": "ExpressionStatement",
                  "src": "7880:56:1"
                }
              ]
            },
            "documentation": {
              "id": 398,
              "nodeType": "StructuredDocumentation",
              "src": "7207:194:1",
              "text": "@notice Calculate penalty to the staker and reward to the investigator\n@param _staker Staker's address\n@param _stakerValue Amount of tokens that belong to the staker"
            },
            "id": 451,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculatePenaltyAndReward",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 403,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 400,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 451,
                  "src": "7441:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 399,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7441:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 402,
                  "mutability": "mutable",
                  "name": "_stakerValue",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 451,
                  "src": "7458:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 401,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7458:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7440:39:1"
            },
            "returnParameters": {
              "id": 408,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 405,
                  "mutability": "mutable",
                  "name": "penalty",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 451,
                  "src": "7506:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 404,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7506:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 407,
                  "mutability": "mutable",
                  "name": "reward",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 451,
                  "src": "7523:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 406,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7523:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7505:33:1"
            },
            "scope": 556,
            "src": "7406:537:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              14040
            ],
            "body": {
              "id": 515,
              "nodeType": "Block",
              "src": "8111:528:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 461,
                        "name": "_testTarget",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 454,
                        "src": "8139:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 458,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "8121:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_Adjudicator_$556",
                          "typeString": "contract super Adjudicator"
                        }
                      },
                      "id": 460,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "verifyState",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14040,
                      "src": "8121:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8121:30:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 463,
                  "nodeType": "ExpressionStatement",
                  "src": "8121:30:1"
                },
                {
                  "assignments": [
                    465
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 465,
                      "mutability": "mutable",
                      "name": "evaluationCFragHash",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 515,
                      "src": "8161:27:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 464,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "8161:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 476,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 470,
                            "name": "RESERVED_CAPSULE_AND_CFRAG_BYTES",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62,
                            "src": "8244:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 468,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "8227:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 469,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "8227:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 471,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8227:50:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 472,
                            "name": "SignatureVerifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12381,
                            "src": "8279:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                              "typeString": "type(library SignatureVerifier)"
                            }
                          },
                          "id": 473,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "HashAlgorithm",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12051,
                          "src": "8279:31:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_HashAlgorithm_$12051_$",
                            "typeString": "type(enum SignatureVerifier.HashAlgorithm)"
                          }
                        },
                        "id": 474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "SHA256",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "8279:38:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                          "typeString": "enum SignatureVerifier.HashAlgorithm"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                          "typeString": "enum SignatureVerifier.HashAlgorithm"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 466,
                        "name": "SignatureVerifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12381,
                        "src": "8191:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                          "typeString": "type(library SignatureVerifier)"
                        }
                      },
                      "id": 467,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "hash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 12172,
                      "src": "8191:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_enum$_HashAlgorithm_$12051_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory,enum SignatureVerifier.HashAlgorithm) pure returns (bytes32)"
                      }
                    },
                    "id": 475,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8191:127:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8161:157:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 492,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 479,
                              "name": "_testTarget",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 454,
                              "src": "8348:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 480,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "8361:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Adjudicator_$556",
                                    "typeString": "contract Adjudicator"
                                  }
                                },
                                "id": 481,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "evaluatedCFrags",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 88,
                                "src": "8361:20:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_bool_$",
                                  "typeString": "function (bytes32) view external returns (bool)"
                                }
                              },
                              "id": 482,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "selector",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "8361:29:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 483,
                              "name": "evaluationCFragHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 465,
                              "src": "8392:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 478,
                            "name": "delegateGet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              14095,
                              14119,
                              14145
                            ],
                            "referencedDeclaration": 14119,
                            "src": "8336:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$_t_bytes32_$returns$_t_uint256_$",
                              "typeString": "function (address,bytes4,bytes32) returns (uint256)"
                            }
                          },
                          "id": 484,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8336:76:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "condition": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 485,
                                  "name": "evaluatedCFrags",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 88,
                                  "src": "8429:15:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                                    "typeString": "mapping(bytes32 => bool)"
                                  }
                                },
                                "id": 487,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 486,
                                  "name": "evaluationCFragHash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 465,
                                  "src": "8445:19:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8429:36:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 489,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8472:1:1",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "id": 490,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "Conditional",
                              "src": "8429:44:1",
                              "trueExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 488,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8468:1:1",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "id": 491,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "8428:46:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "src": "8336:138:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 477,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8328:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 493,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8328:147:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 494,
                  "nodeType": "ExpressionStatement",
                  "src": "8328:147:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 512,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 497,
                              "name": "_testTarget",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 454,
                              "src": "8505:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 498,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "8518:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Adjudicator_$556",
                                    "typeString": "contract Adjudicator"
                                  }
                                },
                                "id": 499,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "penaltyHistory",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 84,
                                "src": "8518:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view external returns (uint256)"
                                }
                              },
                              "id": 500,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "selector",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "8518:28:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 505,
                                      "name": "RESERVED_ADDRESS",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 68,
                                      "src": "8564:16:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 504,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "8556:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_bytes20_$",
                                      "typeString": "type(bytes20)"
                                    },
                                    "typeName": {
                                      "id": 503,
                                      "name": "bytes20",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "8556:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": null,
                                        "typeString": null
                                      }
                                    }
                                  },
                                  "id": 506,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8556:25:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes20",
                                    "typeString": "bytes20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes20",
                                    "typeString": "bytes20"
                                  }
                                ],
                                "id": 502,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8548:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": {
                                  "id": 501,
                                  "name": "bytes32",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8548:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": null,
                                    "typeString": null
                                  }
                                }
                              },
                              "id": 507,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8548:34:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 496,
                            "name": "delegateGet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              14095,
                              14119,
                              14145
                            ],
                            "referencedDeclaration": 14119,
                            "src": "8493:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$_t_bytes32_$returns$_t_uint256_$",
                              "typeString": "function (address,bytes4,bytes32) returns (uint256)"
                            }
                          },
                          "id": 508,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8493:90:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 509,
                            "name": "penaltyHistory",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 84,
                            "src": "8599:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 511,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 510,
                            "name": "RESERVED_ADDRESS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 68,
                            "src": "8614:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8599:32:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8493:138:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 495,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8485:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 513,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8485:147:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 514,
                  "nodeType": "ExpressionStatement",
                  "src": "8485:147:1"
                }
              ]
            },
            "documentation": {
              "id": 452,
              "nodeType": "StructuredDocumentation",
              "src": "7949:91:1",
              "text": "@dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`"
            },
            "functionSelector": "b9626d21",
            "id": 516,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyState",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 456,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8094:8:1"
            },
            "parameters": {
              "id": 455,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 454,
                  "mutability": "mutable",
                  "name": "_testTarget",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 516,
                  "src": "8066:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 453,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8066:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8065:21:1"
            },
            "returnParameters": {
              "id": 457,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8111:0:1"
            },
            "scope": 556,
            "src": "8045:594:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              14055
            ],
            "body": {
              "id": 554,
              "nodeType": "Block",
              "src": "8807:363:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 526,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 519,
                        "src": "8837:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 523,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "8817:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_Adjudicator_$556",
                          "typeString": "contract super Adjudicator"
                        }
                      },
                      "id": 525,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "finishUpgrade",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14055,
                      "src": "8817:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 527,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8817:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 528,
                  "nodeType": "ExpressionStatement",
                  "src": "8817:28:1"
                },
                {
                  "assignments": [
                    530
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 530,
                      "mutability": "mutable",
                      "name": "evaluationCFragHash",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 554,
                      "src": "8905:27:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 529,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "8905:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 541,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 535,
                            "name": "RESERVED_CAPSULE_AND_CFRAG_BYTES",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62,
                            "src": "8988:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 533,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "8971:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 534,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "8971:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 536,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8971:50:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 537,
                            "name": "SignatureVerifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12381,
                            "src": "9023:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                              "typeString": "type(library SignatureVerifier)"
                            }
                          },
                          "id": 538,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "HashAlgorithm",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12051,
                          "src": "9023:31:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_HashAlgorithm_$12051_$",
                            "typeString": "type(enum SignatureVerifier.HashAlgorithm)"
                          }
                        },
                        "id": 539,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "SHA256",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "9023:38:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                          "typeString": "enum SignatureVerifier.HashAlgorithm"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_enum$_HashAlgorithm_$12051",
                          "typeString": "enum SignatureVerifier.HashAlgorithm"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 531,
                        "name": "SignatureVerifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12381,
                        "src": "8935:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$12381_$",
                          "typeString": "type(library SignatureVerifier)"
                        }
                      },
                      "id": 532,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "hash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 12172,
                      "src": "8935:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_enum$_HashAlgorithm_$12051_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory,enum SignatureVerifier.HashAlgorithm) pure returns (bytes32)"
                      }
                    },
                    "id": 540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8935:127:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8905:157:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 542,
                        "name": "evaluatedCFrags",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 88,
                        "src": "9072:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 544,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 543,
                        "name": "evaluationCFragHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "9088:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9072:36:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 545,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9111:4:1",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "9072:43:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 547,
                  "nodeType": "ExpressionStatement",
                  "src": "9072:43:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 552,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 548,
                        "name": "penaltyHistory",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "9125:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 550,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 549,
                        "name": "RESERVED_ADDRESS",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 68,
                        "src": "9140:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9125:32:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "313233",
                      "id": 551,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9160:3:1",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_123_by_1",
                        "typeString": "int_const 123"
                      },
                      "value": "123"
                    },
                    "src": "9125:38:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 553,
                  "nodeType": "ExpressionStatement",
                  "src": "9125:38:1"
                }
              ]
            },
            "documentation": {
              "id": 517,
              "nodeType": "StructuredDocumentation",
              "src": "8645:93:1",
              "text": "@dev the `onlyWhileUpgrading` modifier works through a call to the parent `finishUpgrade`"
            },
            "functionSelector": "e8dccd06",
            "id": 555,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finishUpgrade",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 521,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8790:8:1"
            },
            "parameters": {
              "id": 520,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 519,
                  "mutability": "mutable",
                  "name": "_target",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 555,
                  "src": "8766:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 518,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8766:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8765:17:1"
            },
            "returnParameters": {
              "id": 522,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8807:0:1"
            },
            "scope": 556,
            "src": "8743:427:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 557,
        "src": "389:8783:1"
      }
    ],
    "src": "0:9173:1"
  },
  "bytecode": "6101406040523480156200001257600080fd5b5060405162003bd738038062003bd7833981810160405260c08110156200003857600080fd5b50805160208201516040808401516060850151608086015160a090960151600080546001600160a01b031916331780825594519697959693959294929391926001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000866001600160a01b031663407f80016040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e257600080fd5b505afa158015620000f7573d6000803e3d6000fd5b505050506040513d60208110156200010e57600080fd5b505163ffffffff161180156200012357508115155b80156200012f57508015155b6200013957600080fd5b6001600160601b0319606087901b166080528460028111156200015857fe5b60a08160028111156200016757fe5b60f81b90525060c0939093526101005260e05261012052505060805160601c60a05160f81c60c05160e05161010051610120516139d062000207600039806113ca52806126f85250806112ca52806126c15250806110ea528061265d52508061111d528061268a5250806107ae52806109d45280610b035280610d8f5280611141525080610e0d5280610ef8528061103152806112fd52506139d06000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638f32d59b116100a2578063e2fdcc1711610071578063e2fdcc171461067c578063e38a303b14610684578063e8dccd06146106a2578063f2fde38b146106c8578063fc9daa07146106ee57610116565b80638f32d59b1461063e578063b9626d2114610646578063bd02b1401461066c578063d4b839921461067457610116565b806359a15fa5116100e957806359a15fa5146105ab5780635d5b6836146105d757806370535443146105fd578063715018a61461062e5780638da5cb5b1461063657610116565b80630bea809b1461011b5780631f96670b146105655780634b2cd1181461057f5780635712e98c146105a3575b600080fd5b610563600480360361010081101561013257600080fd5b810190602081018135600160201b81111561014c57600080fd5b82018360208201111561015e57600080fd5b803590602001918460018302840111600160201b8311171561017f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156101d157600080fd5b8201836020820111156101e357600080fd5b803590602001918460018302840111600160201b8311171561020457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561025657600080fd5b82018360208201111561026857600080fd5b803590602001918460018302840111600160201b8311171561028957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156102db57600080fd5b8201836020820111156102ed57600080fd5b803590602001918460018302840111600160201b8311171561030e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561036057600080fd5b82018360208201111561037257600080fd5b803590602001918460018302840111600160201b8311171561039357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156103e557600080fd5b8201836020820111156103f757600080fd5b803590602001918460018302840111600160201b8311171561041857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561046a57600080fd5b82018360208201111561047c57600080fd5b803590602001918460018302840111600160201b8311171561049d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156104ef57600080fd5b82018360208201111561050157600080fd5b803590602001918460018302840111600160201b8311171561052257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106f6945050505050565b005b61056d6110e8565b60408051918252519081900360200190f35b61058761110c565b604080516001600160a01b039092168252519081900360200190f35b61056d61111b565b6105b361113f565b604051808260028111156105c357fe5b60ff16815260200191505060405180910390f35b61056d600480360360208110156105ed57600080fd5b50356001600160a01b0316611163565b61061a6004803603602081101561061357600080fd5b5035611175565b604080519115158252519081900360200190f35b61056361118a565b6105876111e5565b61061a6111f4565b6105636004803603602081101561065c57600080fd5b50356001600160a01b0316611205565b61056d6112c8565b6105876112ec565b6105876112fb565b61068c61131f565b6040805160ff9092168252519081900360200190f35b610563600480360360208110156106b857600080fd5b50356001600160a01b031661132f565b610563600480360360208110156106de57600080fd5b50356001600160a01b03166113ab565b61056d6113c8565b60006107d289896040516020018083805190602001908083835b6020831061072f5780518252601f199092019160209182019101610710565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106107775780518252601f199092019160209182019101610758565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006113ec565b60008181526005602052604090205490915060ff16156108235760405162461bcd60e51b81526004018080602001828103825260268152602001806136036026913960400191505060405180910390fd5b6000818152600560205260408120805460ff191660011790556108478a8a85611544565b6040805182151581529051919250339184917f14c7c3aeaed5d9de50669529f936d80ff48af1f52beb8447437689cb298131a8919081900360200190a361088d85611f71565b6108de576040805162461bcd60e51b815260206004820152601e60248201527f5374616b65722773207075626c6963206b657920697320696e76616c69640000604482015290519081900360640190fd5b6108e786611f71565b6109225760405162461bcd60e51b81526004018080602001828103825260218152602001806138ca6021913960400191505060405180910390fd5b61092a613393565b61093384611fd1565b90506109f88a8a836102c0015160016005811061094c57fe5b1a60f81b6040516020018083805190602001908083835b602083106109825780518252601f199092019160209182019101610963565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b031916815260010192505050604051602081830303815290604052887f00000000000000000000000000000000000000000000000000000000000000006121af565b610a49576040805162461bcd60e51b815260206004820152601a60248201527f4346726167207369676e617475726520697320696e76616c6964000000000000604482015290519081900360640190fd5b610a51613457565b610a5a8b6121f7565b9050610b2789826080015160c00151846102c00151600260058110610a7b57fe5b1a60f81b6040516020018083805190602001908083835b60208310610ab15780518252601f199092019160209182019101610a92565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b031916815260010192505050604051602081830303815290604052897f00000000000000000000000000000000000000000000000000000000000000006121af565b610b78576040805162461bcd60e51b815260206004820152601960248201527f5461736b207369676e617475726520697320696e76616c696400000000000000604482015290519081900360640190fd5b60208701516102c083015160609060041a60f81b8260405160200180836001600160f81b0319166001600160f81b0319168152600101828152602001925050506040516020818303038152906040529050610db38e828a876102a001516000801b6040516020018086805190602001908083835b60208310610c0b5780518252601f199092019160209182019101610bec565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b60208310610c535780518252601f199092019160209182019101610c34565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b60208310610c9b5780518252601f199092019160209182019101610c7c565b6001836020036101000a038019825116818451168082178552505050505050905001836001600160a01b03166001600160a01b031660601b8152601401828152602001955050505050506040516020818303038152906040528c866102c00151600360058110610d0757fe5b1a60f81b6040516020018083805190602001908083835b60208310610d3d5780518252601f199092019160209182019101610d1e565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b0319168152600101925050506040516020818303038152906040528c7f00000000000000000000000000000000000000000000000000000000000000006121af565b610dee5760405162461bcd60e51b81526004018080602001828103825260228152602001806135e16022913960400191505060405180910390fd5b6000610e07610e0183604560f81b61227f565b8a61257f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2eeb36e836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610e8157600080fd5b505afa158015610e95573d6000803e3d6000fd5b505050506040513d6020811015610eab57600080fd5b505190506001600160a01b038116610ef45760405162461bcd60e51b81526004018080602001828103825260228152602001806137896022913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663178b6de6836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d6020811015610f9657600080fd5b5051905080610fe3576040805162461bcd60e51b81526020600482015260146024820152735374616b657220686173206e6f20746f6b656e7360601b604482015290519081900360640190fd5b876110d557600080610ff58484612638565b60408051632673086360e21b81526001600160a01b038881166004830152602482018590523360448301526064820184905291519395509193507f000000000000000000000000000000000000000000000000000000000000000016916399cc218c9160848082019260009290919082900301818387803b15801561107957600080fd5b505af115801561108d573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03168c7f860028d7f53afb628cae3582337c99be24159f7ee9d68a96babbc7f054a36caf60405160405180910390a450505b5050505050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020526000908152604090205481565b60056020526000908152604090205460ff1681565b6111926111f4565b61119b57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61120e81612771565b6040805160006020808301829052835180840390910181529183019092526112379060016113ec565b60008181526005602052604090205490915060ff1661125757600061125a565b60015b60ff1661126f83637053544360e01b846127cb565b1461127957600080fd5b600080805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec54906112ba908490632eadb41b60e11b906127cb565b146112c457600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600254600160a01b900460ff1681565b611338816127e6565b6040805160006020808301829052835180840390910181529183019092526113619060016113ec565b60009081526005602090815260408220805460ff19166001179055908052600490525050607b7f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec55565b6113b36111f4565b6113bc57600080fd5b6113c581612840565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808260028111156113fb57fe5b141561140e57508151602083012061153e565b600182600281111561141c57fe5b14156114b1576002836040518082805190602001908083835b602083106114545780518252601f199092019160209182019101611435565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611493573d6000803e3d6000fd5b5050506040513d60208110156114a857600080fd5b5051905061153e565b6003836040518082805190602001908083835b602083106114e35780518252601f1990920191602091820191016114c4565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611522573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff191690505b92915050565b600061154e61349d565b611557856128ae565b9050611561613457565b61156a856121f7565b9050611574613393565b61157d85611fd1565b9050600061162f826102800151846080015160a00151846102c001516000600581106115a557fe5b1a60f81b6040516020018083805190602001908083835b602083106115db5780518252601f1990920191602091820191016115bc565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b03191681526001019250505060405160208183030381529060405261257f565b9050816102a001516001600160a01b0316816001600160a01b031614611692576040805162461bcd60e51b8152602060048201526013602482015272426164204b46726167207369676e617475726560681b604482015290519081900360640190fd5b600061169e8585612905565b8551805160209091015185519293506116b692612ba4565b6116f15760405162461bcd60e51b81526004018080602001828103825260468152602001806136fd6046913960600191505060405180910390fd5b61170383602001518460400151612bc1565b611754576040805162461bcd60e51b815260206004820181905260248201527f506f696e74207a45206973206e6f7420612076616c696420454320706f696e74604482015290519081900360640190fd5b61177d856000015160200151846000015186608001516080015186602001518760400151612c26565b6117b85760405162461bcd60e51b81526004018080602001828103825260228152602001806135776022913960400191505060405180910390fd5b8351805160209091015160608501516117d2929190612ba4565b61180d5760405162461bcd60e51b815260040180806020018281038252604881526020018061381a6048913960600191505060405180910390fd5b61181f83608001518460a00151612bc1565b61185a5760405162461bcd60e51b81526004018080602001828103825260228152602001806138626022913960400191505060405180910390fd5b61187b84600001516020015184606001518386608001518760a00151612c26565b6118b65760405162461bcd60e51b81526004018080602001828103825260238152602001806139786023913960400191505060405180910390fd5b608084015151805160209091015160c08501516118d4929190612ba4565b61190f5760405162461bcd60e51b81526004018080602001828103825260488152602001806139306048913960600191505060405180910390fd5b6000611980604051806040016040528086602001518152602001866040015181525061197b60405180604001604052808960800151600001516020015181526020018860c001518152506040518060400160405280896080015181526020018960a00151815250612cec565b612e14565b9050806119965760009650505050505050611f6a565b602080870151805191015160e08601516119b1929190612ba4565b6119ec5760405162461bcd60e51b81526004018080602001828103825260468152602001806137436046913960600191505060405180910390fd5b611a00846101000151856101200151612bc1565b611a51576040805162461bcd60e51b815260206004820181905260248201527f506f696e74207a56206973206e6f7420612076616c696420454320706f696e74604482015290519081900360640190fd5b611a7c8660200151602001518560e00151876080015160800151876101000151886101200151612c26565b611ab75760405162461bcd60e51b81526004018080602001828103825260228152602001806136716022913960400191505060405180910390fd5b6020808601518051910151610140860151611ad3929190612ba4565b611b0e5760405162461bcd60e51b81526004018080602001828103825260488152602001806137ab6048913960600191505060405180910390fd5b611b22846101600151856101800151612bc1565b611b5d5760405162461bcd60e51b81526004018080602001828103825260228152602001806138eb6022913960400191505060405180910390fd5b611b8185602001516020015185610140015184876101600151886101800151612c26565b611bbc5760405162461bcd60e51b815260040180806020018281038252602381526020018061390d6023913960400191505060405180910390fd5b608085015160209081015180519101516101a0860151611bdd929190612ba4565b611c185760405162461bcd60e51b81526004018080602001828103825260488152602001806136936048913960600191505060405180910390fd5b611c876040518060400160405280866101000151815260200186610120015181525061197b6040518060400160405280896080015160200151602001518152602001886101a0015181525060405180604001604052808961016001518152602001896101800151815250612cec565b905080611c9d5760009650505050505050611f6a565b611cb1846101c00151856101e00151612bc1565b611cec5760405162461bcd60e51b81526004018080602001828103825260218152602001806138a96021913960400191505060405180910390fd5b611d4b7f03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f7f7880ed56962d7c0ae44d6f14bb53b5fe64b31ea44a41d0316f3a598778f0f936876080015160800151876101c00151886101e00151612c26565b611d865760405162461bcd60e51b81526004018080602001828103825260228152602001806136db6022913960400191505060405180910390fd5b6080850151604001518051602090910151610200860151611da8929190612ba4565b611de35760405162461bcd60e51b81526004018080602001828103825260488152602001806136296048913960600191505060405180910390fd5b611df7846102200151856102400151612bc1565b611e325760405162461bcd60e51b81526004018080602001828103825260228152602001806135556022913960400191505060405180910390fd5b611e5a8560800151604001516020015185610200015184876102200151886102400151612c26565b611e955760405162461bcd60e51b815260040180806020018281038252602381526020018061390d6023913960400191505060405180910390fd5b6080850151606001518051602090910151610260860151611eb7929190612ba4565b611ef25760405162461bcd60e51b81526004018080602001828103825260488152602001806135996048913960600191505060405180910390fd5b611f616040518060400160405280866101c001518152602001866101e0015181525061197b604051806040016040528089608001516060015160200151815260200188610260015181525060405180604001604052808961022001518152602001896102400151815250612cec565b96505050505050505b9392505050565b60008151604014611fb35760405162461bcd60e51b81526004018080602001828103825260258152602001806138846025913960400191505060405180910390fd5b60208201516040830151611fc78282612bc1565b925050505b919050565b611fd9613393565b81516102b914611fe857600080fd5b6000611ff383612e7c565b905080611fff81612e82565b835260200161200d81612e82565b6020808501919091520161202081612e82565b604084015260200161203181612e82565b606084015260200161204281612e82565b608084015260200161205381612e82565b60a084015260200161206481612e82565b60c084015260200161207581612e82565b60e084015260200161208681612e82565b61010084015260200161209881612e82565b6101208401526020016120aa81612e82565b6101408401526020016120bc81612e82565b6101608401526020016120ce81612e82565b6101808401526020016120e081612e82565b6101a08401526020016120f281612e82565b6101c084015260200161210481612e82565b6101e084015260200161211681612e82565b61020084015260200161212881612e82565b61022084015260200161213a81612e82565b61024084015260200161214c81612e82565b61026084015260200161215e81612e82565b61028084015260200161217081612e82565b60601c6102a084015260140161218581612e82565b6001600160d81b0319166102c08401526005016102b9820181146121a857600080fd5b5050919050565b600082516040146121bf57600080fd5b6121d26121cc86846113ec565b8561257f565b6001600160a01b03166121e484612e86565b6001600160a01b03161495945050505050565b6121ff613457565b815161016781101561221057600080fd5b600061221b84612e7c565b905061222b818460000151612e91565b905061223b818460200151612e91565b905061224681612e82565b6040840152606083015160209190910190612262908290612e91565b9050612272816082198401612eac565b6080840152509092915050565b60006001600160f81b0319821661233257604051601960f81b602080830182815260006021850181905230606081901b602287015288519095919386938a9390926036909101918401908083835b602083106122ec5780518252601f1990920191602091820191016122cd565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040528051906020012091505061153e565b6001600160f81b03198216604560f81b1415612532578251806123865760405162461bcd60e51b81526004018080602001828103825260278152602001806137f36027913960400191505060405180910390fd5b60005b811561239d57600101600a82049150612389565b60608167ffffffffffffffff811180156123b657600080fd5b506040519080825280601f01601f1916602001820160405280156123e1576020820181803683370190505b5086519350905060001982015b831561243357600a840660300160f81b8282806001900393508151811061241157fe5b60200101906001600160f81b031916908160001a905350600a840493506123ee565b604051601960f81b60208083018281527f457468657265756d205369676e6564204d6573736167653a0a000000000000006021850181905286519394909387938d9392603a0191908501908083835b602083106124a15780518252601f199092019160209182019101612482565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106124e95780518252601f1990920191602091820191016124ca565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040528051906020012094505050505061153e565b6040805162461bcd60e51b815260206004820152601a60248201527f556e737570706f72746564204549503139312076657273696f6e000000000000604482015290519081900360640190fd5b6000815160411461258f57600080fd5b60208201516040830151606084015160001a601b8110156125ae57601b015b8060ff16601b14806125c357508060ff16601c145b6125cc57600080fd5b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015612623573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6001600160a01b03821660009081526004602052604081205481906126b590612688907f00000000000000000000000000000000000000000000000000000000000000009063ffffffff612fb216565b7f00000000000000000000000000000000000000000000000000000000000000009063ffffffff612fd916565b91506126f0826126eb857f000000000000000000000000000000000000000000000000000000000000000063ffffffff612feb16565b61300d565b9150612722827f000000000000000000000000000000000000000000000000000000000000000063ffffffff612feb16565b6001600160a01b03851660009081526004602052604090205490915061274f90600163ffffffff612fd916565b6001600160a01b03909416600090815260046020526040902093909355929050565b60028054600160a01b900460ff161461278957600080fd5b6040805133815290516001600160a01b038316917f1e8d98c1b4a0d9bd2e2371026b632eb2773fcce41742e41f02f574ab69868d4c919081900360200190a250565b6000806127dc858560018685613023565b5195945050505050565b60028054600160a01b900460ff16146127fe57600080fd5b6040805133815290516001600160a01b038316917fd55ec27c5c6316913ed8803c18cfd1bfefea953db909dcba6140744a9d8b0d1f919081900360200190a250565b6001600160a01b03811661285357600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6128b661349d565b81516062146128c457600080fd5b60006128cf83612e7c565b90506128df818360000151612e91565b90506128ef818360200151612e91565b90506128fa81612e82565b604083015250919050565b81518051602091820151835180519084015160808601805151805190870151604080516001600160f81b031960f8998a1b8116828c0152602182019890985295881b871660418701526042860194909452951b909316606283015260638083019490945280518083039094018452608382019052838601518051908501518686015180519087015194518701518051908801518751600099899896979596949560a3019182918a01908083835b602083106129d15780518252601f1990920191602091820191016129b2565b51815160209384036101000a600019018019909216911617905260f89a8b1b6001600160f81b031990811692909401918252600182019990995296891b8216602188015250602286019490945250941b166042820152604380820193909352604080518083039094018452606382018152608088015190810151805190840151606083015180519086015160c0909401518751979950899850600160f91b977f03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f97949693959294929391926083909201918291908b01908083835b60208310612acb5780518252601f199092019160209182019101612aac565b51815160209384036101000a60001901801990921691161790526001600160f81b03198c811692909401918252600182018b905260f88a811b85166021840152602283018a905288901b9093166042820152604381018690528451606390910192850191508083835b60208310612b535780518252601f199092019160209182019101612b34565b6001836020036101000a0380198251168184511680821785525050505050509050019850505050505050505060405160208183030381529060405290506000612b9b82613073565b95945050505050565b600060018216600119850160ff1614808015612b9b5750612b9b84845b60006401000003d0198084101580612bd95750808310155b15612be857600091505061153e565b60008180612bf257fe5b848509905060008280612c0157fe5b60078480612c0b57fe5b888680612c1457fe5b8a8b0909089190911495945050505050565b600070014551231950b75fc4402da1732fc9bebe1981600181601b898316018a858c8b09604080516000815260208082018084529690965260ff90941684820152606084019290925260808301525160a08083019392601f198301929081900390910190855afa158015612c9e573d6000803e3d6000fd5b505060408051601f1981015160208281018a90528284018990528351808403850181526060909301909352815191909201206001600160a01b03918216911614935050505095945050505050565b612cf46134ca565b82516020808501518451918501516401000003d0199392908184148015612d1a57508083145b15612d4f57612d4360405180606001604052808681526020018581526020016001815250613257565b9550505050505061153e565b60008580612d5957fe5b8487038308905060008680612d6a57fe5b8688038508905060008780612d7b57fe5b828309905060008880612d8a57fe5b838309905060008980612d9957fe5b838a0990508980612da657fe5b8a80612dae57fe5b838c80612db757fe5b84600209088b038b80612dc657fe5b878809088b528980612dd457fe5b8a80612ddc57fe5b838a098b038b80612de957fe5b8c80612df157fe5b8e518e03850888090860208c015250505060408801525094979650505050505050565b604081015160009080612e2b57600091505061153e565b6401000003d01960008183840985519091508280612e4557fe5b8751839009148015612e72575060208501518280612e5f57fe5b8380612e6757fe5b858409602089015109145b9695505050505050565b60200190565b5190565b805160209091012090565b8151600183015160009190911a825260209091015260210190565b612eb46134e8565b60e4821015612ec257600080fd5b612ed0838260000151612e91565b9250612ee0838260200151612e91565b9250612ef0838260400151612e91565b9250612f00838260600151612e91565b9250612f0b83612e82565b608082015260408051818152606081018252602094909401939060208201818036833750505060a08201819052612f45908490604061334c565b925060e482111561153e5760e319820167ffffffffffffffff81118015612f6b57600080fd5b506040519080825280601f01601f191660200182016040528015612f96576020820181803683370190505b5060c082018190528051612fab91859161334c565b5092915050565b600082612fc15750600061153e565b82820282848281612fce57fe5b0414611f6a57600080fd5b600082820183811015611f6a57600080fd5b6000808211612ff957600080fd5b600082848161300457fe5b04949350505050565b600081831061301c5781611f6a565b5090919050565b6040518481528315613036578260048201525b6001841115613046578160248201525b6000808560200260040183895af48015613064573d6000833e613069565b600082fd5b5095945050505050565b600080600060606e3430b9b42fba37afb1bab93b32b13760891b6000801b866040516020018084815260200183815260200182805190602001908083835b602083106130d05780518252601f1990920191602091820191016130b1565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040529050600081604051602001808360ff1660ff1660f81b815260010182805190602001908083835b6020831061314c5780518252601f19909201916020918201910161312d565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120600182604051602001808360ff1660ff1660f81b815260010182805190602001908083835b602083106131cc5780518252601f1990920191602091820191016131ad565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352909352805192019190912094975093955070014551231950b75fc4402da1732fc9bec0935070014551231950b75fc4402da1732fc9bebf199250600091508290508387099050818061324557fe5b85820860010198975050505050505050565b61325f6134ca565b60408201518061326f5750611fcc565b82516401000003d01990600082602087015160020990506000838061329057fe5b82830990506000848061329f57fe5b8483099050600085806132ae57fe5b86806132b657fe5b8687096003099050600086806132c857fe5b87806132d057fe5b846401000003d2190988806132e157fe5b84850908808a52905086806132f257fe5b87806132fa57fe5b888061330257fe5b86870963800001e9600160ff1b0309888061331957fe5b898061332157fe5b848b03870885090860208a0152868061333657fe5b88860960408a0152509698975050505050505050565b60006020601f830104846020850160005b838110156133795760208102838101519083015260010161335d565b505050506000835160200184015281840190509392505050565b604051806102e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160d81b03191681525090565b6040518060a0016040528061346a61353d565b815260200161347761353d565b81526000602082015260400161348b61353d565b81526020016134986134e8565b905290565b60405180606001604052806134b061353d565b81526020016134bd61353d565b8152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b6040518060e001604052806134fb61353d565b815260200161350861353d565b815260200161351561353d565b815260200161352261353d565b81526020016000815260200160608152602001606081525090565b60408051808201909152600080825260208201529056fe506f696e7420682a5531206973206e6f7420612076616c696420454320706f696e74507265636f6d7075746564207a2a452076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f6620553220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553220706f696e7453706563696669636174696f6e207369676e617475726520697320696e76616c6964546869732043467261672068617320616c7265616479206265656e206576616c75617465642e507265636f6d7075746564205920636f6f7264696e617465206f6620553120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553120706f696e74507265636f6d7075746564207a2a562076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f6620563220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563220706f696e74507265636f6d7075746564207a2a552076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f66204520646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564204520706f696e74507265636f6d7075746564205920636f6f7264696e617465206f66205620646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564205620706f696e74576f726b6572206d7573742062652072656c6174656420746f2061207374616b6572507265636f6d7075746564205920636f6f7264696e617465206f6620563120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563120706f696e74456d707479206d657373616765206e6f7420616c6c6f77656420666f722076657273696f6e2045507265636f6d7075746564205920636f6f7264696e617465206f6620453120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420453120706f696e74506f696e7420682a4531206973206e6f7420612076616c696420454320706f696e7453657269616c697a656420636f6f7264696e617465732073686f756c642062652036342042506f696e74207a2a55206973206e6f7420612076616c696420454320706f696e745265717565737465722773207075626c6963206b657920697320696e76616c6964506f696e7420682a5631206973206e6f7420612076616c696420454320706f696e74507265636f6d707574656420682a56312076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f6620453220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420453220706f696e74507265636f6d707574656420682a45312076616c756520697320696e636f7272656374a26469706673582212208b949647b5260cc217101dfb9c82a41991d5f12a0e1275bc10d07214902fa39064736f6c63430006070033",
  "bytecodeSha1": "30d37ab5a19fec1b3403f42dc82eee782666bcd2",
  "compiler": {
    "evm_version": "berlin",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.7"
  },
  "contractName": "Adjudicator",
  "coverageMap": {
    "branches": {
      "1": {
        "Adjudicator.evaluateCFrag": {
          "175": [
            3853,
            3885,
            true
          ],
          "176": [
            4291,
            4357,
            true
          ],
          "177": [
            4426,
            4495,
            true
          ],
          "178": [
            4713,
            4905,
            true
          ],
          "179": [
            5165,
            5365,
            true
          ],
          "180": [
            5812,
            6230,
            true
          ],
          "181": [
            6640,
            6660,
            true
          ],
          "182": [
            6824,
            6839,
            true
          ],
          "183": [
            6931,
            6945,
            false
          ]
        },
        "Adjudicator.verifyState": {
          "184": [
            8429,
            8465,
            true
          ],
          "185": [
            8336,
            8474,
            true
          ],
          "186": [
            8493,
            8631,
            true
          ]
        }
      },
      "10": {
        "ReEncryptionValidator.checkSerializedCoordinates": {
          "213": [
            13304,
            13324,
            true
          ]
        },
        "ReEncryptionValidator.isOnCurve": {
          "214": [
            13987,
            13994,
            true
          ],
          "215": [
            13998,
            14005,
            false
          ]
        },
        "ReEncryptionValidator.validateCFrag": {
          "190": [
            2288,
            2336,
            true
          ],
          "191": [
            2649,
            2779,
            true
          ],
          "192": [
            2927,
            2992,
            true
          ],
          "193": [
            3072,
            3327,
            true
          ],
          "194": [
            3449,
            3613,
            true
          ],
          "195": [
            3773,
            3840,
            true
          ],
          "196": [
            3922,
            4147,
            true
          ],
          "197": [
            4270,
            4442,
            true
          ],
          "198": [
            4895,
            4909,
            false
          ],
          "199": [
            5081,
            5211,
            true
          ],
          "200": [
            5359,
            5424,
            true
          ],
          "201": [
            5504,
            5759,
            true
          ],
          "202": [
            5881,
            6043,
            true
          ],
          "203": [
            6202,
            6269,
            true
          ],
          "204": [
            6347,
            6573,
            true
          ],
          "205": [
            6697,
            6869,
            true
          ],
          "206": [
            7317,
            7331,
            false
          ],
          "207": [
            7577,
            7642,
            true
          ],
          "208": [
            7723,
            7978,
            true
          ],
          "209": [
            8126,
            8318,
            true
          ],
          "210": [
            8492,
            8559,
            true
          ],
          "211": [
            8641,
            8891,
            true
          ],
          "212": [
            9057,
            9233,
            true
          ]
        }
      },
      "11": {
        "SignatureVerifier.hash": {
          "220": [
            1783,
            1820,
            false
          ],
          "221": [
            1885,
            1919,
            false
          ]
        },
        "SignatureVerifier.hashEIP191": {
          "223": [
            3179,
            3201,
            false
          ],
          "224": [
            3407,
            3429,
            false
          ],
          "225": [
            3536,
            3546,
            true
          ]
        },
        "SignatureVerifier.recover": {
          "226": [
            738,
            761,
            true
          ],
          "227": [
            1094,
            1100,
            false
          ],
          "228": [
            1151,
            1158,
            true
          ],
          "229": [
            1162,
            1169,
            true
          ]
        },
        "SignatureVerifier.verify": {
          "222": [
            2601,
            2624,
            true
          ]
        }
      },
      "13": {
        "UmbralDeserializer.toCapsule": {
          "233": [
            2179,
            2215,
            true
          ]
        },
        "UmbralDeserializer.toCapsuleFrag": {
          "232": [
            4112,
            4154,
            true
          ]
        },
        "UmbralDeserializer.toCorrectnessProof": {
          "234": [
            2762,
            2805,
            true
          ],
          "235": [
            3340,
            3382,
            false
          ]
        },
        "UmbralDeserializer.toPreComputedData": {
          "230": [
            4754,
            4802,
            true
          ],
          "231": [
            7367,
            7417,
            true
          ]
        }
      },
      "15": {},
      "19": {
        "Math.min": {
          "187": [
            425,
            430,
            true
          ]
        }
      },
      "20": {
        "SafeMath.add": {
          "218": [
            1552,
            1558,
            true
          ]
        },
        "SafeMath.div": {
          "219": [
            934,
            939,
            true
          ]
        },
        "SafeMath.mul": {
          "216": [
            530,
            536,
            false
          ],
          "217": [
            616,
            626,
            true
          ]
        }
      },
      "21": {
        "Ownable._transferOwnership": {
          "189": [
            1980,
            2002,
            true
          ]
        },
        "Ownable.transferOwnership": {
          "188": [
            864,
            873,
            true
          ]
        }
      }
    },
    "statements": {
      "1": {
        "Adjudicator.calculatePenaltyAndReward": {
          "123": [
            7553,
            7634
          ],
          "124": [
            7644,
            7719
          ],
          "125": [
            7729,
            7768
          ],
          "126": [
            7880,
            7936
          ]
        },
        "Adjudicator.evaluateCFrag": {
          "0": [
            3845,
            3928
          ],
          "1": [
            3938,
            3976
          ],
          "2": [
            4150,
            4213
          ],
          "3": [
            4283,
            4408
          ],
          "4": [
            4418,
            4549
          ],
          "5": [
            4705,
            4961
          ],
          "6": [
            5157,
            5420
          ],
          "7": [
            5804,
            6294
          ],
          "8": [
            6632,
            6699
          ],
          "9": [
            6816,
            6864
          ],
          "10": [
            7057,
            7112
          ],
          "11": [
            7126,
            7184
          ]
        },
        "Adjudicator.finishUpgrade": {
          "19": [
            8817,
            8845
          ],
          "20": [
            9072,
            9115
          ],
          "21": [
            9125,
            9163
          ]
        },
        "Adjudicator.verifyState": {
          "16": [
            8121,
            8151
          ],
          "17": [
            8328,
            8475
          ],
          "18": [
            8485,
            8632
          ]
        }
      },
      "10": {
        "ReEncryptionValidator.addAffineJacobian": {
          "142": [
            16295,
            16327
          ],
          "143": [
            16589,
            16655
          ],
          "144": [
            16665,
            16736
          ],
          "145": [
            16746,
            16754
          ]
        },
        "ReEncryptionValidator.checkCompressedPoint": {
          "138": [
            12917,
            12967
          ]
        },
        "ReEncryptionValidator.checkSerializedCoordinates": {
          "51": [
            13296,
            13366
          ],
          "52": [
            13539,
            13571
          ]
        },
        "ReEncryptionValidator.computeProofChallengeScalar": {
          "136": [
            10342,
            10692
          ],
          "137": [
            10703,
            11199
          ]
        },
        "ReEncryptionValidator.doubleJacobian": {
          "170": [
            17073,
            17081
          ],
          "171": [
            17397,
            17405
          ],
          "172": [
            17415,
            17516
          ],
          "173": [
            17526,
            17550
          ]
        },
        "ReEncryptionValidator.ecmulVerify": {
          "141": [
            14788,
            14814
          ]
        },
        "ReEncryptionValidator.eqAffineJacobian": {
          "146": [
            15290,
            15302
          ],
          "147": [
            15437,
            15535
          ]
        },
        "ReEncryptionValidator.extendedKeccakToBN": {
          "168": [
            11679,
            11820
          ],
          "169": [
            12205,
            12261
          ]
        },
        "ReEncryptionValidator.isOnCurve": {
          "139": [
            14020,
            14032
          ],
          "140": [
            14169,
            14191
          ]
        },
        "ReEncryptionValidator.validateCFrag": {
          "26": [
            2280,
            2360
          ],
          "27": [
            2641,
            2875
          ],
          "28": [
            2919,
            3054
          ],
          "29": [
            3064,
            3398
          ],
          "30": [
            3441,
            3720
          ],
          "31": [
            3765,
            3904
          ],
          "32": [
            3914,
            4219
          ],
          "33": [
            4262,
            4553
          ],
          "34": [
            4924,
            4936
          ],
          "35": [
            5073,
            5307
          ],
          "36": [
            5351,
            5486
          ],
          "37": [
            5496,
            5830
          ],
          "38": [
            5873,
            6149
          ],
          "39": [
            6194,
            6329
          ],
          "40": [
            6339,
            6646
          ],
          "41": [
            6689,
            6980
          ],
          "42": [
            6991,
            7301
          ],
          "43": [
            7346,
            7358
          ],
          "44": [
            7569,
            7705
          ],
          "45": [
            7715,
            8049
          ],
          "46": [
            8118,
            8439
          ],
          "47": [
            8484,
            8623
          ],
          "48": [
            8633,
            8964
          ],
          "49": [
            9049,
            9346
          ],
          "50": [
            9357,
            9673
          ]
        }
      },
      "11": {
        "SignatureVerifier.hash": {
          "23": [
            1836,
            1864
          ],
          "24": [
            1935,
            1960
          ],
          "25": [
            1991,
            2019
          ]
        },
        "SignatureVerifier.hashEIP191": {
          "110": [
            3307,
            3386
          ],
          "111": [
            3528,
            3590
          ],
          "112": [
            3729,
            3737
          ],
          "113": [
            3755,
            3767
          ],
          "114": [
            3854,
            3878
          ],
          "115": [
            3970,
            4023
          ],
          "116": [
            4041,
            4053
          ],
          "117": [
            4082,
            4177
          ],
          "118": [
            4208,
            4244
          ]
        },
        "SignatureVerifier.recover": {
          "119": [
            730,
            762
          ],
          "120": [
            1116,
            1123
          ],
          "121": [
            1143,
            1170
          ],
          "122": [
            1180,
            1212
          ]
        },
        "SignatureVerifier.toAddress": {
          "148": [
            1417,
            1472
          ]
        },
        "SignatureVerifier.verify": {
          "101": [
            2593,
            2625
          ],
          "102": [
            2635,
            2714
          ]
        }
      },
      "13": {
        "UmbralDeserializer.copyBytes": {
          "174": [
            10095,
            10139
          ]
        },
        "UmbralDeserializer.copyPoint": {
          "149": [
            8178,
            8196
          ],
          "150": [
            8206,
            8228
          ],
          "151": [
            8238,
            8275
          ]
        },
        "UmbralDeserializer.toCapsule": {
          "132": [
            2171,
            2216
          ],
          "133": [
            2279,
            2323
          ],
          "134": [
            2333,
            2377
          ],
          "135": [
            2387,
            2431
          ]
        },
        "UmbralDeserializer.toCapsuleFrag": {
          "103": [
            4104,
            4155
          ],
          "104": [
            4217,
            4260
          ],
          "105": [
            4270,
            4313
          ],
          "106": [
            4323,
            4358
          ],
          "107": [
            4400,
            4450
          ],
          "108": [
            4368,
            4390
          ],
          "109": [
            4461,
            4540
          ]
        },
        "UmbralDeserializer.toCorrectnessProof": {
          "152": [
            2754,
            2806
          ],
          "153": [
            2817,
            2862
          ],
          "154": [
            2872,
            2917
          ],
          "155": [
            2927,
            2985
          ],
          "156": [
            2995,
            3046
          ],
          "157": [
            3056,
            3099
          ],
          "158": [
            3143,
            3191
          ],
          "159": [
            3109,
            3132
          ],
          "160": [
            3258,
            3326
          ],
          "161": [
            3398,
            3468
          ],
          "162": [
            3482,
            3540
          ]
        },
        "UmbralDeserializer.toPreComputedData": {
          "53": [
            4746,
            4803
          ],
          "54": [
            4921,
            4969
          ],
          "55": [
            4979,
            5001
          ],
          "56": [
            5012,
            5061
          ],
          "57": [
            5071,
            5093
          ],
          "58": [
            5104,
            5153
          ],
          "59": [
            5163,
            5185
          ],
          "60": [
            5196,
            5245
          ],
          "61": [
            5255,
            5277
          ],
          "62": [
            5288,
            5338
          ],
          "63": [
            5348,
            5370
          ],
          "64": [
            5381,
            5431
          ],
          "65": [
            5441,
            5463
          ],
          "66": [
            5474,
            5523
          ],
          "67": [
            5533,
            5555
          ],
          "68": [
            5566,
            5614
          ],
          "69": [
            5624,
            5646
          ],
          "70": [
            5657,
            5706
          ],
          "71": [
            5716,
            5738
          ],
          "72": [
            5749,
            5798
          ],
          "73": [
            5808,
            5830
          ],
          "74": [
            5841,
            5890
          ],
          "75": [
            5900,
            5922
          ],
          "76": [
            5933,
            5983
          ],
          "77": [
            5993,
            6015
          ],
          "78": [
            6026,
            6076
          ],
          "79": [
            6086,
            6108
          ],
          "80": [
            6119,
            6168
          ],
          "81": [
            6178,
            6200
          ],
          "82": [
            6211,
            6260
          ],
          "83": [
            6270,
            6292
          ],
          "84": [
            6303,
            6352
          ],
          "85": [
            6362,
            6384
          ],
          "86": [
            6395,
            6444
          ],
          "87": [
            6454,
            6476
          ],
          "88": [
            6487,
            6537
          ],
          "89": [
            6547,
            6569
          ],
          "90": [
            6580,
            6630
          ],
          "91": [
            6640,
            6662
          ],
          "92": [
            6673,
            6722
          ],
          "93": [
            6732,
            6754
          ],
          "94": [
            6765,
            6818
          ],
          "95": [
            6828,
            6841
          ],
          "96": [
            6852,
            6915
          ],
          "97": [
            6925,
            6938
          ],
          "98": [
            7282,
            7326
          ],
          "99": [
            7336,
            7348
          ],
          "100": [
            7359,
            7418
          ]
        }
      },
      "15": {
        "Upgradeable.finishUpgrade": {
          "128": [
            2126,
            2167
          ]
        },
        "Upgradeable.verifyState": {
          "127": [
            1856,
            1899
          ]
        }
      },
      "19": {
        "Math.min": {
          "167": [
            418,
            438
          ]
        }
      },
      "20": {
        "SafeMath.add": {
          "165": [
            1544,
            1559
          ]
        },
        "SafeMath.div": {
          "166": [
            926,
            940
          ]
        },
        "SafeMath.mul": {
          "163": [
            552,
            560
          ],
          "164": [
            608,
            627
          ]
        }
      },
      "21": {
        "Ownable._transferOwnership": {
          "129": [
            1972,
            2003
          ],
          "130": [
            2013,
            2056
          ],
          "131": [
            2066,
            2083
          ]
        },
        "Ownable.isOwner": {
          "15": [
            1036,
            1063
          ]
        },
        "Ownable.owner": {
          "14": [
            717,
            730
          ]
        },
        "Ownable.renounceOwnership": {
          "12": [
            1404,
            1449
          ],
          "13": [
            1459,
            1478
          ]
        },
        "Ownable.transferOwnership": {
          "22": [
            1728,
            1756
          ]
        }
      }
    }
  },
  "dependencies": [
    "Math",
    "Ownable",
    "ReEncryptionValidator",
    "SafeMath",
    "SignatureVerifier",
    "UmbralDeserializer",
    "Upgradeable"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106101165760003560e01c80638f32d59b116100a2578063e2fdcc1711610071578063e2fdcc171461067c578063e38a303b14610684578063e8dccd06146106a2578063f2fde38b146106c8578063fc9daa07146106ee57610116565b80638f32d59b1461063e578063b9626d2114610646578063bd02b1401461066c578063d4b839921461067457610116565b806359a15fa5116100e957806359a15fa5146105ab5780635d5b6836146105d757806370535443146105fd578063715018a61461062e5780638da5cb5b1461063657610116565b80630bea809b1461011b5780631f96670b146105655780634b2cd1181461057f5780635712e98c146105a3575b600080fd5b610563600480360361010081101561013257600080fd5b810190602081018135600160201b81111561014c57600080fd5b82018360208201111561015e57600080fd5b803590602001918460018302840111600160201b8311171561017f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156101d157600080fd5b8201836020820111156101e357600080fd5b803590602001918460018302840111600160201b8311171561020457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561025657600080fd5b82018360208201111561026857600080fd5b803590602001918460018302840111600160201b8311171561028957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156102db57600080fd5b8201836020820111156102ed57600080fd5b803590602001918460018302840111600160201b8311171561030e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561036057600080fd5b82018360208201111561037257600080fd5b803590602001918460018302840111600160201b8311171561039357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156103e557600080fd5b8201836020820111156103f757600080fd5b803590602001918460018302840111600160201b8311171561041857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561046a57600080fd5b82018360208201111561047c57600080fd5b803590602001918460018302840111600160201b8311171561049d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156104ef57600080fd5b82018360208201111561050157600080fd5b803590602001918460018302840111600160201b8311171561052257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106f6945050505050565b005b61056d6110e8565b60408051918252519081900360200190f35b61058761110c565b604080516001600160a01b039092168252519081900360200190f35b61056d61111b565b6105b361113f565b604051808260028111156105c357fe5b60ff16815260200191505060405180910390f35b61056d600480360360208110156105ed57600080fd5b50356001600160a01b0316611163565b61061a6004803603602081101561061357600080fd5b5035611175565b604080519115158252519081900360200190f35b61056361118a565b6105876111e5565b61061a6111f4565b6105636004803603602081101561065c57600080fd5b50356001600160a01b0316611205565b61056d6112c8565b6105876112ec565b6105876112fb565b61068c61131f565b6040805160ff9092168252519081900360200190f35b610563600480360360208110156106b857600080fd5b50356001600160a01b031661132f565b610563600480360360208110156106de57600080fd5b50356001600160a01b03166113ab565b61056d6113c8565b60006107d289896040516020018083805190602001908083835b6020831061072f5780518252601f199092019160209182019101610710565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106107775780518252601f199092019160209182019101610758565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006113ec565b60008181526005602052604090205490915060ff16156108235760405162461bcd60e51b81526004018080602001828103825260268152602001806136036026913960400191505060405180910390fd5b6000818152600560205260408120805460ff191660011790556108478a8a85611544565b6040805182151581529051919250339184917f14c7c3aeaed5d9de50669529f936d80ff48af1f52beb8447437689cb298131a8919081900360200190a361088d85611f71565b6108de576040805162461bcd60e51b815260206004820152601e60248201527f5374616b65722773207075626c6963206b657920697320696e76616c69640000604482015290519081900360640190fd5b6108e786611f71565b6109225760405162461bcd60e51b81526004018080602001828103825260218152602001806138ca6021913960400191505060405180910390fd5b61092a613393565b61093384611fd1565b90506109f88a8a836102c0015160016005811061094c57fe5b1a60f81b6040516020018083805190602001908083835b602083106109825780518252601f199092019160209182019101610963565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b031916815260010192505050604051602081830303815290604052887f00000000000000000000000000000000000000000000000000000000000000006121af565b610a49576040805162461bcd60e51b815260206004820152601a60248201527f4346726167207369676e617475726520697320696e76616c6964000000000000604482015290519081900360640190fd5b610a51613457565b610a5a8b6121f7565b9050610b2789826080015160c00151846102c00151600260058110610a7b57fe5b1a60f81b6040516020018083805190602001908083835b60208310610ab15780518252601f199092019160209182019101610a92565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b031916815260010192505050604051602081830303815290604052897f00000000000000000000000000000000000000000000000000000000000000006121af565b610b78576040805162461bcd60e51b815260206004820152601960248201527f5461736b207369676e617475726520697320696e76616c696400000000000000604482015290519081900360640190fd5b60208701516102c083015160609060041a60f81b8260405160200180836001600160f81b0319166001600160f81b0319168152600101828152602001925050506040516020818303038152906040529050610db38e828a876102a001516000801b6040516020018086805190602001908083835b60208310610c0b5780518252601f199092019160209182019101610bec565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b60208310610c535780518252601f199092019160209182019101610c34565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b60208310610c9b5780518252601f199092019160209182019101610c7c565b6001836020036101000a038019825116818451168082178552505050505050905001836001600160a01b03166001600160a01b031660601b8152601401828152602001955050505050506040516020818303038152906040528c866102c00151600360058110610d0757fe5b1a60f81b6040516020018083805190602001908083835b60208310610d3d5780518252601f199092019160209182019101610d1e565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b0319168152600101925050506040516020818303038152906040528c7f00000000000000000000000000000000000000000000000000000000000000006121af565b610dee5760405162461bcd60e51b81526004018080602001828103825260228152602001806135e16022913960400191505060405180910390fd5b6000610e07610e0183604560f81b61227f565b8a61257f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2eeb36e836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610e8157600080fd5b505afa158015610e95573d6000803e3d6000fd5b505050506040513d6020811015610eab57600080fd5b505190506001600160a01b038116610ef45760405162461bcd60e51b81526004018080602001828103825260228152602001806137896022913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663178b6de6836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d6020811015610f9657600080fd5b5051905080610fe3576040805162461bcd60e51b81526020600482015260146024820152735374616b657220686173206e6f20746f6b656e7360601b604482015290519081900360640190fd5b876110d557600080610ff58484612638565b60408051632673086360e21b81526001600160a01b038881166004830152602482018590523360448301526064820184905291519395509193507f000000000000000000000000000000000000000000000000000000000000000016916399cc218c9160848082019260009290919082900301818387803b15801561107957600080fd5b505af115801561108d573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03168c7f860028d7f53afb628cae3582337c99be24159f7ee9d68a96babbc7f054a36caf60405160405180910390a450505b5050505050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020526000908152604090205481565b60056020526000908152604090205460ff1681565b6111926111f4565b61119b57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61120e81612771565b6040805160006020808301829052835180840390910181529183019092526112379060016113ec565b60008181526005602052604090205490915060ff1661125757600061125a565b60015b60ff1661126f83637053544360e01b846127cb565b1461127957600080fd5b600080805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec54906112ba908490632eadb41b60e11b906127cb565b146112c457600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600254600160a01b900460ff1681565b611338816127e6565b6040805160006020808301829052835180840390910181529183019092526113619060016113ec565b60009081526005602090815260408220805460ff19166001179055908052600490525050607b7f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec55565b6113b36111f4565b6113bc57600080fd5b6113c581612840565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808260028111156113fb57fe5b141561140e57508151602083012061153e565b600182600281111561141c57fe5b14156114b1576002836040518082805190602001908083835b602083106114545780518252601f199092019160209182019101611435565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611493573d6000803e3d6000fd5b5050506040513d60208110156114a857600080fd5b5051905061153e565b6003836040518082805190602001908083835b602083106114e35780518252601f1990920191602091820191016114c4565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611522573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff191690505b92915050565b600061154e61349d565b611557856128ae565b9050611561613457565b61156a856121f7565b9050611574613393565b61157d85611fd1565b9050600061162f826102800151846080015160a00151846102c001516000600581106115a557fe5b1a60f81b6040516020018083805190602001908083835b602083106115db5780518252601f1990920191602091820191016115bc565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160f81b0319166001600160f81b03191681526001019250505060405160208183030381529060405261257f565b9050816102a001516001600160a01b0316816001600160a01b031614611692576040805162461bcd60e51b8152602060048201526013602482015272426164204b46726167207369676e617475726560681b604482015290519081900360640190fd5b600061169e8585612905565b8551805160209091015185519293506116b692612ba4565b6116f15760405162461bcd60e51b81526004018080602001828103825260468152602001806136fd6046913960600191505060405180910390fd5b61170383602001518460400151612bc1565b611754576040805162461bcd60e51b815260206004820181905260248201527f506f696e74207a45206973206e6f7420612076616c696420454320706f696e74604482015290519081900360640190fd5b61177d856000015160200151846000015186608001516080015186602001518760400151612c26565b6117b85760405162461bcd60e51b81526004018080602001828103825260228152602001806135776022913960400191505060405180910390fd5b8351805160209091015160608501516117d2929190612ba4565b61180d5760405162461bcd60e51b815260040180806020018281038252604881526020018061381a6048913960600191505060405180910390fd5b61181f83608001518460a00151612bc1565b61185a5760405162461bcd60e51b81526004018080602001828103825260228152602001806138626022913960400191505060405180910390fd5b61187b84600001516020015184606001518386608001518760a00151612c26565b6118b65760405162461bcd60e51b81526004018080602001828103825260238152602001806139786023913960400191505060405180910390fd5b608084015151805160209091015160c08501516118d4929190612ba4565b61190f5760405162461bcd60e51b81526004018080602001828103825260488152602001806139306048913960600191505060405180910390fd5b6000611980604051806040016040528086602001518152602001866040015181525061197b60405180604001604052808960800151600001516020015181526020018860c001518152506040518060400160405280896080015181526020018960a00151815250612cec565b612e14565b9050806119965760009650505050505050611f6a565b602080870151805191015160e08601516119b1929190612ba4565b6119ec5760405162461bcd60e51b81526004018080602001828103825260468152602001806137436046913960600191505060405180910390fd5b611a00846101000151856101200151612bc1565b611a51576040805162461bcd60e51b815260206004820181905260248201527f506f696e74207a56206973206e6f7420612076616c696420454320706f696e74604482015290519081900360640190fd5b611a7c8660200151602001518560e00151876080015160800151876101000151886101200151612c26565b611ab75760405162461bcd60e51b81526004018080602001828103825260228152602001806136716022913960400191505060405180910390fd5b6020808601518051910151610140860151611ad3929190612ba4565b611b0e5760405162461bcd60e51b81526004018080602001828103825260488152602001806137ab6048913960600191505060405180910390fd5b611b22846101600151856101800151612bc1565b611b5d5760405162461bcd60e51b81526004018080602001828103825260228152602001806138eb6022913960400191505060405180910390fd5b611b8185602001516020015185610140015184876101600151886101800151612c26565b611bbc5760405162461bcd60e51b815260040180806020018281038252602381526020018061390d6023913960400191505060405180910390fd5b608085015160209081015180519101516101a0860151611bdd929190612ba4565b611c185760405162461bcd60e51b81526004018080602001828103825260488152602001806136936048913960600191505060405180910390fd5b611c876040518060400160405280866101000151815260200186610120015181525061197b6040518060400160405280896080015160200151602001518152602001886101a0015181525060405180604001604052808961016001518152602001896101800151815250612cec565b905080611c9d5760009650505050505050611f6a565b611cb1846101c00151856101e00151612bc1565b611cec5760405162461bcd60e51b81526004018080602001828103825260218152602001806138a96021913960400191505060405180910390fd5b611d4b7f03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f7f7880ed56962d7c0ae44d6f14bb53b5fe64b31ea44a41d0316f3a598778f0f936876080015160800151876101c00151886101e00151612c26565b611d865760405162461bcd60e51b81526004018080602001828103825260228152602001806136db6022913960400191505060405180910390fd5b6080850151604001518051602090910151610200860151611da8929190612ba4565b611de35760405162461bcd60e51b81526004018080602001828103825260488152602001806136296048913960600191505060405180910390fd5b611df7846102200151856102400151612bc1565b611e325760405162461bcd60e51b81526004018080602001828103825260228152602001806135556022913960400191505060405180910390fd5b611e5a8560800151604001516020015185610200015184876102200151886102400151612c26565b611e955760405162461bcd60e51b815260040180806020018281038252602381526020018061390d6023913960400191505060405180910390fd5b6080850151606001518051602090910151610260860151611eb7929190612ba4565b611ef25760405162461bcd60e51b81526004018080602001828103825260488152602001806135996048913960600191505060405180910390fd5b611f616040518060400160405280866101c001518152602001866101e0015181525061197b604051806040016040528089608001516060015160200151815260200188610260015181525060405180604001604052808961022001518152602001896102400151815250612cec565b96505050505050505b9392505050565b60008151604014611fb35760405162461bcd60e51b81526004018080602001828103825260258152602001806138846025913960400191505060405180910390fd5b60208201516040830151611fc78282612bc1565b925050505b919050565b611fd9613393565b81516102b914611fe857600080fd5b6000611ff383612e7c565b905080611fff81612e82565b835260200161200d81612e82565b6020808501919091520161202081612e82565b604084015260200161203181612e82565b606084015260200161204281612e82565b608084015260200161205381612e82565b60a084015260200161206481612e82565b60c084015260200161207581612e82565b60e084015260200161208681612e82565b61010084015260200161209881612e82565b6101208401526020016120aa81612e82565b6101408401526020016120bc81612e82565b6101608401526020016120ce81612e82565b6101808401526020016120e081612e82565b6101a08401526020016120f281612e82565b6101c084015260200161210481612e82565b6101e084015260200161211681612e82565b61020084015260200161212881612e82565b61022084015260200161213a81612e82565b61024084015260200161214c81612e82565b61026084015260200161215e81612e82565b61028084015260200161217081612e82565b60601c6102a084015260140161218581612e82565b6001600160d81b0319166102c08401526005016102b9820181146121a857600080fd5b5050919050565b600082516040146121bf57600080fd5b6121d26121cc86846113ec565b8561257f565b6001600160a01b03166121e484612e86565b6001600160a01b03161495945050505050565b6121ff613457565b815161016781101561221057600080fd5b600061221b84612e7c565b905061222b818460000151612e91565b905061223b818460200151612e91565b905061224681612e82565b6040840152606083015160209190910190612262908290612e91565b9050612272816082198401612eac565b6080840152509092915050565b60006001600160f81b0319821661233257604051601960f81b602080830182815260006021850181905230606081901b602287015288519095919386938a9390926036909101918401908083835b602083106122ec5780518252601f1990920191602091820191016122cd565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040528051906020012091505061153e565b6001600160f81b03198216604560f81b1415612532578251806123865760405162461bcd60e51b81526004018080602001828103825260278152602001806137f36027913960400191505060405180910390fd5b60005b811561239d57600101600a82049150612389565b60608167ffffffffffffffff811180156123b657600080fd5b506040519080825280601f01601f1916602001820160405280156123e1576020820181803683370190505b5086519350905060001982015b831561243357600a840660300160f81b8282806001900393508151811061241157fe5b60200101906001600160f81b031916908160001a905350600a840493506123ee565b604051601960f81b60208083018281527f457468657265756d205369676e6564204d6573736167653a0a000000000000006021850181905286519394909387938d9392603a0191908501908083835b602083106124a15780518252601f199092019160209182019101612482565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106124e95780518252601f1990920191602091820191016124ca565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040528051906020012094505050505061153e565b6040805162461bcd60e51b815260206004820152601a60248201527f556e737570706f72746564204549503139312076657273696f6e000000000000604482015290519081900360640190fd5b6000815160411461258f57600080fd5b60208201516040830151606084015160001a601b8110156125ae57601b015b8060ff16601b14806125c357508060ff16601c145b6125cc57600080fd5b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015612623573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6001600160a01b03821660009081526004602052604081205481906126b590612688907f00000000000000000000000000000000000000000000000000000000000000009063ffffffff612fb216565b7f00000000000000000000000000000000000000000000000000000000000000009063ffffffff612fd916565b91506126f0826126eb857f000000000000000000000000000000000000000000000000000000000000000063ffffffff612feb16565b61300d565b9150612722827f000000000000000000000000000000000000000000000000000000000000000063ffffffff612feb16565b6001600160a01b03851660009081526004602052604090205490915061274f90600163ffffffff612fd916565b6001600160a01b03909416600090815260046020526040902093909355929050565b60028054600160a01b900460ff161461278957600080fd5b6040805133815290516001600160a01b038316917f1e8d98c1b4a0d9bd2e2371026b632eb2773fcce41742e41f02f574ab69868d4c919081900360200190a250565b6000806127dc858560018685613023565b5195945050505050565b60028054600160a01b900460ff16146127fe57600080fd5b6040805133815290516001600160a01b038316917fd55ec27c5c6316913ed8803c18cfd1bfefea953db909dcba6140744a9d8b0d1f919081900360200190a250565b6001600160a01b03811661285357600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6128b661349d565b81516062146128c457600080fd5b60006128cf83612e7c565b90506128df818360000151612e91565b90506128ef818360200151612e91565b90506128fa81612e82565b604083015250919050565b81518051602091820151835180519084015160808601805151805190870151604080516001600160f81b031960f8998a1b8116828c0152602182019890985295881b871660418701526042860194909452951b909316606283015260638083019490945280518083039094018452608382019052838601518051908501518686015180519087015194518701518051908801518751600099899896979596949560a3019182918a01908083835b602083106129d15780518252601f1990920191602091820191016129b2565b51815160209384036101000a600019018019909216911617905260f89a8b1b6001600160f81b031990811692909401918252600182019990995296891b8216602188015250602286019490945250941b166042820152604380820193909352604080518083039094018452606382018152608088015190810151805190840151606083015180519086015160c0909401518751979950899850600160f91b977f03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f97949693959294929391926083909201918291908b01908083835b60208310612acb5780518252601f199092019160209182019101612aac565b51815160209384036101000a60001901801990921691161790526001600160f81b03198c811692909401918252600182018b905260f88a811b85166021840152602283018a905288901b9093166042820152604381018690528451606390910192850191508083835b60208310612b535780518252601f199092019160209182019101612b34565b6001836020036101000a0380198251168184511680821785525050505050509050019850505050505050505060405160208183030381529060405290506000612b9b82613073565b95945050505050565b600060018216600119850160ff1614808015612b9b5750612b9b84845b60006401000003d0198084101580612bd95750808310155b15612be857600091505061153e565b60008180612bf257fe5b848509905060008280612c0157fe5b60078480612c0b57fe5b888680612c1457fe5b8a8b0909089190911495945050505050565b600070014551231950b75fc4402da1732fc9bebe1981600181601b898316018a858c8b09604080516000815260208082018084529690965260ff90941684820152606084019290925260808301525160a08083019392601f198301929081900390910190855afa158015612c9e573d6000803e3d6000fd5b505060408051601f1981015160208281018a90528284018990528351808403850181526060909301909352815191909201206001600160a01b03918216911614935050505095945050505050565b612cf46134ca565b82516020808501518451918501516401000003d0199392908184148015612d1a57508083145b15612d4f57612d4360405180606001604052808681526020018581526020016001815250613257565b9550505050505061153e565b60008580612d5957fe5b8487038308905060008680612d6a57fe5b8688038508905060008780612d7b57fe5b828309905060008880612d8a57fe5b838309905060008980612d9957fe5b838a0990508980612da657fe5b8a80612dae57fe5b838c80612db757fe5b84600209088b038b80612dc657fe5b878809088b528980612dd457fe5b8a80612ddc57fe5b838a098b038b80612de957fe5b8c80612df157fe5b8e518e03850888090860208c015250505060408801525094979650505050505050565b604081015160009080612e2b57600091505061153e565b6401000003d01960008183840985519091508280612e4557fe5b8751839009148015612e72575060208501518280612e5f57fe5b8380612e6757fe5b858409602089015109145b9695505050505050565b60200190565b5190565b805160209091012090565b8151600183015160009190911a825260209091015260210190565b612eb46134e8565b60e4821015612ec257600080fd5b612ed0838260000151612e91565b9250612ee0838260200151612e91565b9250612ef0838260400151612e91565b9250612f00838260600151612e91565b9250612f0b83612e82565b608082015260408051818152606081018252602094909401939060208201818036833750505060a08201819052612f45908490604061334c565b925060e482111561153e5760e319820167ffffffffffffffff81118015612f6b57600080fd5b506040519080825280601f01601f191660200182016040528015612f96576020820181803683370190505b5060c082018190528051612fab91859161334c565b5092915050565b600082612fc15750600061153e565b82820282848281612fce57fe5b0414611f6a57600080fd5b600082820183811015611f6a57600080fd5b6000808211612ff957600080fd5b600082848161300457fe5b04949350505050565b600081831061301c5781611f6a565b5090919050565b6040518481528315613036578260048201525b6001841115613046578160248201525b6000808560200260040183895af48015613064573d6000833e613069565b600082fd5b5095945050505050565b600080600060606e3430b9b42fba37afb1bab93b32b13760891b6000801b866040516020018084815260200183815260200182805190602001908083835b602083106130d05780518252601f1990920191602091820191016130b1565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040529050600081604051602001808360ff1660ff1660f81b815260010182805190602001908083835b6020831061314c5780518252601f19909201916020918201910161312d565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120600182604051602001808360ff1660ff1660f81b815260010182805190602001908083835b602083106131cc5780518252601f1990920191602091820191016131ad565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352909352805192019190912094975093955070014551231950b75fc4402da1732fc9bec0935070014551231950b75fc4402da1732fc9bebf199250600091508290508387099050818061324557fe5b85820860010198975050505050505050565b61325f6134ca565b60408201518061326f5750611fcc565b82516401000003d01990600082602087015160020990506000838061329057fe5b82830990506000848061329f57fe5b8483099050600085806132ae57fe5b86806132b657fe5b8687096003099050600086806132c857fe5b87806132d057fe5b846401000003d2190988806132e157fe5b84850908808a52905086806132f257fe5b87806132fa57fe5b888061330257fe5b86870963800001e9600160ff1b0309888061331957fe5b898061332157fe5b848b03870885090860208a0152868061333657fe5b88860960408a0152509698975050505050505050565b60006020601f830104846020850160005b838110156133795760208102838101519083015260010161335d565b505050506000835160200184015281840190509392505050565b604051806102e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160d81b03191681525090565b6040518060a0016040528061346a61353d565b815260200161347761353d565b81526000602082015260400161348b61353d565b81526020016134986134e8565b905290565b60405180606001604052806134b061353d565b81526020016134bd61353d565b8152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b6040518060e001604052806134fb61353d565b815260200161350861353d565b815260200161351561353d565b815260200161352261353d565b81526020016000815260200160608152602001606081525090565b60408051808201909152600080825260208201529056fe506f696e7420682a5531206973206e6f7420612076616c696420454320706f696e74507265636f6d7075746564207a2a452076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f6620553220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553220706f696e7453706563696669636174696f6e207369676e617475726520697320696e76616c6964546869732043467261672068617320616c7265616479206265656e206576616c75617465642e507265636f6d7075746564205920636f6f7264696e617465206f6620553120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553120706f696e74507265636f6d7075746564207a2a562076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f6620563220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563220706f696e74507265636f6d7075746564207a2a552076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f66204520646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564204520706f696e74507265636f6d7075746564205920636f6f7264696e617465206f66205620646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564205620706f696e74576f726b6572206d7573742062652072656c6174656420746f2061207374616b6572507265636f6d7075746564205920636f6f7264696e617465206f6620563120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563120706f696e74456d707479206d657373616765206e6f7420616c6c6f77656420666f722076657273696f6e2045507265636f6d7075746564205920636f6f7264696e617465206f6620453120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420453120706f696e74506f696e7420682a4531206973206e6f7420612076616c696420454320706f696e7453657269616c697a656420636f6f7264696e617465732073686f756c642062652036342042506f696e74207a2a55206973206e6f7420612076616c696420454320706f696e745265717565737465722773207075626c6963206b657920697320696e76616c6964506f696e7420682a5631206973206e6f7420612076616c696420454320706f696e74507265636f6d707574656420682a56312076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f6620453220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420453220706f696e74507265636f6d707574656420682a45312076616c756520697320696e636f7272656374a26469706673582212208b949647b5260cc217101dfb9c82a41991d5f12a0e1275bc10d07214902fa39064736f6c63430006070033",
  "deployedSourceMap": "389:8783:1:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;389:8783:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;3293:3908:1;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;3293:3908:1;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;;;;;;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;;;;;;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;;;;;;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;;;;;;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;;;;;;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;;;;;;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;;;;;;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;11:28;;8:2;;;52:1;49;42:12;8:2;3293:3908:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3293:3908:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3293:3908:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3293:3908:1;;-1:-1:-1;3293:3908:1;;-1:-1:-1;;;;;3293:3908:1:i;:::-;;1090:50;;;:::i;:::-;;;;;;;;;;;;;;;;973:29:15;;;:::i;:::-;;;;-1:-1:-1;;;;;973:29:15;;;;;;;;;;;;;;1048:36:1;;;:::i;980:62::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1254:50;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1254:50:1;-1:-1:-1;;;;;1254:50:1;;:::i;1310:48::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1310:48:1;;:::i;:::-;;;;;;;;;;;;;;;;;;1348:137:21;;;:::i;660:77::-;;;:::i;980:90::-;;;:::i;8045:594:1:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8045:594:1;-1:-1:-1;;;;;8045:594:1;;:::i;1146:53::-;;;:::i;859:21:15:-;;;:::i;937:37:1:-;;;:::i;1132:22:15:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8743:427:1;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8743:427:1;-1:-1:-1;;;;;8743:427:1;;:::i;1656:107:21:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1656:107:21;-1:-1:-1;;;;;1656:107:21;;:::i;1205:42:1:-;;;:::i;3293:3908::-;3714:22;3739:96;3792:13;3807:11;3775:44;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3775:44:1;;;;;;;;;;-1:-1:-1;3775:44:1;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3775:44:1;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3775:44:1;;;3821:13;3739:22;:96::i;:::-;3854:31;;;;:15;:31;;;;;;3714:121;;-1:-1:-1;3854:31:1;;3853:32;3845:83;;;;-1:-1:-1;;;3845:83:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3938:31;;;;:15;:31;;;;;:38;;-1:-1:-1;;3938:38:1;3972:4;3938:38;;;4059:81;4095:13;4110:11;4123:16;4059:35;:81::i;:::-;4155:58;;;;;;;;;;4037:103;;-1:-1:-1;4186:10:1;;4170:14;;4155:58;;;;;;;;;;4291:66;4340:16;4291:48;:66::i;:::-;4283:125;;;;;-1:-1:-1;;;4283:125:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;4426:69;4475:19;4426:48;:69::i;:::-;4418:131;;;;-1:-1:-1;;;4418:131:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4560:49;;:::i;:::-;4612:36;:16;:34;:36::i;:::-;4560:88;;4713:192;4755:11;4801:15;4818:7;:17;;;4836:1;4818:20;;;;;;;;;;4784:55;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4784:55:1;;;;;;;-1:-1:-1;;;;;4784:55:1;;-1:-1:-1;;;;;4784:55:1;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4784:55:1;;;4857:16;4891:13;4713:24;:192::i;:::-;4705:256;;;;;-1:-1:-1;;;4705:256:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;5074:43;;:::i;:::-;5120:27;:11;:25;:27::i;:::-;5074:73;;5165:200;5207:14;5256:5;:11;;;:20;;;5278:7;:17;;;5296:1;5278:20;;;;;;;;;;5239:60;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5239:60:1;;;;;;;-1:-1:-1;;;;;5239:60:1;;-1:-1:-1;;;;;5239:60:1;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5239:60:1;;;5317:16;5351:13;5165:24;:200::i;:::-;5157:263;;;;;-1:-1:-1;;;5157:263:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;5698:2;5676:25;;5670:32;5759:17;;;;5721:18;;5777:1;5759:20;;;5781:11;5742:51;;;;;;-1:-1:-1;;;;;5742:51:1;;-1:-1:-1;;;;;5742:51:1;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5742:51:1;;;5721:72;;5812:418;5871:13;5919:5;5959:23;6017:7;:26;;;6086:1;6078:10;;5854:235;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;5854:235:1;;;;;;;;;;-1:-1:-1;5854:235:1;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;5854:235:1;;;;;;;;;;-1:-1:-1;5854:235:1;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5854:235:1;;;;;;;-1:-1:-1;;;;;5854:235:1;-1:-1:-1;;;;;5854:235:1;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5854:235:1;;;6124:14;6140:7;:17;;;6158:1;6140:20;;;;;;;;;;6107:54;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6107:54:1;;;;;;;-1:-1:-1;;;;;6107:54:1;;-1:-1:-1;;;;;6107:54:1;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6107:54:1;;;6179:19;6216:13;5812:24;:418::i;:::-;5804:490;;;;-1:-1:-1;;;5804:490:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6364:14;6381:183;6420:47;6449:5;-1:-1:-1;;;6420:28:1;:47::i;:::-;6540:23;6381:25;:183::i;:::-;6364:200;;6574:14;6591:6;-1:-1:-1;;;;;6591:23:1;;6615:6;6591:31;;;;;;;;;;;;;-1:-1:-1;;;;;6591:31:1;-1:-1:-1;;;;;6591:31:1;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6591:31:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6591:31:1;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;6591:31:1;;-1:-1:-1;;;;;;6640:20:1;;6632:67;;;;-1:-1:-1;;;6632:67:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6757:19;6779:6;-1:-1:-1;;;;;6779:19:1;;6799:6;6779:27;;;;;;;;;;;;;-1:-1:-1;;;;;6779:27:1;-1:-1:-1;;;;;6779:27:1;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6779:27:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6779:27:1;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;6779:27:1;;-1:-1:-1;6824:15:1;6816:48;;;;;-1:-1:-1;;;6816:48:1;;;;;;;;;;;;-1:-1:-1;;;6816:48:1;;;;;;;;;;;;;;;6931:14;6926:269;;6962:15;6979:14;6997:46;7023:6;7031:11;6997:25;:46::i;:::-;7057:55;;;-1:-1:-1;;;7057:55:1;;-1:-1:-1;;;;;7057:55:1;;;;;;;;;;;;;7093:10;7057:55;;;;;;;;;;;;6961:82;;-1:-1:-1;6961:82:1;;-1:-1:-1;7057:6:1;:18;;;;:55;;;;;-1:-1:-1;;7057:55:1;;;;;;;;-1:-1:-1;7057:18:1;:55;;;2:2:-1;;;;27:1;24;17:12;2:2;7057:55:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7057:55:1;;;;7177:6;-1:-1:-1;;;;;7131:53:1;7169:6;-1:-1:-1;;;;;7131:53:1;7153:14;7131:53;;;;;;;;;;6926:269;;;3293:3908;;;;;;;;;;;;;;;;;:::o;1090:50::-;;;:::o;973:29:15:-;;;-1:-1:-1;;;;;973:29:15;;:::o;1048:36:1:-;;;:::o;980:62::-;;;:::o;1254:50::-;;;;;;;;;;;;;:::o;1310:48::-;;;;;;;;;;;;;;;:::o;1348:137:21:-;864:9;:7;:9::i;:::-;856:18;;12:1:-1;9;2:12;856:18:21;1446:1:::1;1430:6:::0;;1409:40:::1;::::0;-1:-1:-1;;;;;1430:6:21;;::::1;::::0;1409:40:::1;::::0;1446:1;;1409:40:::1;1476:1;1459:19:::0;;-1:-1:-1;;;;;;1459:19:21::1;::::0;;1348:137::o;660:77::-;698:7;724:6;-1:-1:-1;;;;;724:6:21;660:77;:::o;980:90::-;1020:4;1057:6;-1:-1:-1;;;;;1057:6:21;1043:10;:20;;980:90::o;8045:594:1:-;8121:30;8139:11;8121:17;:30::i;:::-;8227:50;;;8161:27;8227:50;;;;;;;;;26:21:-1;;;22:32;;;6:49;;8227:50:1;;;;;;8191:127;;8279:38;8191:22;:127::i;:::-;8429:36;;;;:15;:36;;;;;;8161:157;;-1:-1:-1;8429:36:1;;:44;;8472:1;8429:44;;;8468:1;8429:44;8336:138;;:76;8348:11;-1:-1:-1;;;8392:19:1;8336:11;:76::i;:::-;:138;8328:147;;12:1:-1;9;2:12;8328:147:1;8599:32;;;;:14;:32;;;;;8493:90;;8505:11;;-1:-1:-1;;;8518:28:1;8493:11;:90::i;:::-;:138;8485:147;;12:1:-1;9;2:12;8485:147:1;8045:594;;:::o;1146:53::-;;;:::o;859:21:15:-;;;-1:-1:-1;;;;;859:21:15;;:::o;937:37:1:-;;;:::o;1132:22:15:-;;;-1:-1:-1;;;1132:22:15;;;;;:::o;8743:427:1:-;8817:28;8837:7;8817:19;:28::i;:::-;8971:50;;;8905:27;8971:50;;;;;;;;;26:21:-1;;;22:32;;;6:49;;8971:50:1;;;;;;8935:127;;9023:38;8935:22;:127::i;:::-;9072:36;;;;:15;:36;;;;;;;:43;;-1:-1:-1;;9072:43:1;9111:4;9072:43;;;9125:32;;;:14;:32;;-1:-1:-1;;9160:3:1;9125:32;:38;8743:427::o;1656:107:21:-;864:9;:7;:9::i;:::-;856:18;;12:1:-1;9;2:12;856:18:21;1728:28:::1;1747:8;1728:18;:28::i;:::-;1656:107:::0;:::o;1205:42:1:-;;;:::o;1639:397:11:-;1749:14;;1783:10;:37;;;;;;;;;1779:251;;;-1:-1:-1;1845:19:11;;;;;;1779:251;;;1899:20;1885:10;:34;;;;;;;;;1881:149;;;1944:16;1951:8;1944:16;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1944:16:11;;;;;;;-1:-1:-1;263:2;;-1:-1;;1944:16:11;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1944:16:11;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1944:16:11;;-1:-1:-1;1881:149:11;;;2000:19;2010:8;2000:19;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;2000:19:11;;;;;;;-1:-1:-1;263:2;;-1:-1;;2000:19:11;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2000:19:11;;;;;;;;1991:28;;;;;1881:149;1639:397;;;;:::o;1528:8184:10:-;1698:4;1718:42;;:::i;:::-;1763:25;:13;:23;:25::i;:::-;1718:70;;1798:44;;:::i;:::-;1845:27;:11;:25;:27::i;:::-;1798:74;;1882:54;;:::i;:::-;1939:37;:17;:35;:37::i;:::-;1882:94;;2072:21;2096:174;2135:12;:39;;;2205:6;:12;;;:27;;;2234:12;:22;;;2257:1;2234:25;;;;;;;;;;2188:72;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2188:72:10;;;;;;;-1:-1:-1;;;;;2188:72:10;;-1:-1:-1;;;;;2188:72:10;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2188:72:10;;;2096:25;:174::i;:::-;2072:198;;2305:12;:31;;;-1:-1:-1;;;;;2288:48:10;:13;-1:-1:-1;;;;;2288:48:10;;2280:80;;;;;-1:-1:-1;;;2280:80:10;;;;;;;;;;;;-1:-1:-1;;;2280:80:10;;;;;;;;;;;;;;;2457:9;2469:45;2497:8;2507:6;2469:27;:45::i;:::-;2683:15;;:20;;2717:22;;;;;2753:25;;2457:57;;-1:-1:-1;2649:130:10;;:20;:130::i;:::-;2641:234;;;;-1:-1:-1;;;2641:234:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2927:65;2937:12;:26;;;2965:12;:26;;;2927:9;:65::i;:::-;2919:135;;;;;-1:-1:-1;;;2919:135:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3072:255;3097:8;:15;;;:22;;;3148:12;:25;;;3199:6;:12;;;:18;;;3248:12;:26;;;3300:12;:26;;;3072:11;:255::i;:::-;3064:334;;;;-1:-1:-1;;;3064:334:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3483:14;;:19;;3536:21;;;;;3586:26;;;;3449:164;;3483:19;3536:21;3449:20;:164::i;:::-;3441:279;;;;-1:-1:-1;;;3441:279:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3773:67;3783:12;:27;;;3812:12;:27;;;3773:9;:67::i;:::-;3765:139;;;;-1:-1:-1;;;3765:139:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3922:225;3947:6;:14;;;:21;;;3999:12;:26;;;4051:1;4066:12;:27;;;4119:12;:27;;;3922:11;:225::i;:::-;3914:305;;;;-1:-1:-1;;;3914:305:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4304:12;;;;:20;:25;;4361:27;;;;;4415:26;;;;4270:172;;4304:25;4361:27;4270:20;:172::i;:::-;4262:291;;;;-1:-1:-1;;;4262:291:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4564:19;4586:293;;;;;;;;;4617:12;:26;;;4586:293;;;;4646:12;:26;;;4586:293;;;4687:182;;;;;;;;;4723:6;:12;;;:20;;;:27;;;4687:182;;;;4752:12;:26;;;4687:182;;;;;;;;;;;4798:12;:27;;;4687:182;;;;4827:12;:27;;;4687:182;;;:17;:182::i;:::-;4586:16;:293::i;:::-;4564:315;;4895:14;4890:57;;4931:5;4924:12;;;;;;;;;;4890:57;5115:15;;;;;:20;;5149:22;;;5185:25;;;;5081:130;;5115:20;5149:22;5081:20;:130::i;:::-;5073:234;;;;-1:-1:-1;;;5073:234:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5359:65;5369:12;:26;;;5397:12;:26;;;5359:9;:65::i;:::-;5351:135;;;;;-1:-1:-1;;;5351:135:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5504:255;5529:8;:15;;;:22;;;5580:12;:25;;;5631:6;:12;;;:18;;;5680:12;:26;;;5732:12;:26;;;5504:11;:255::i;:::-;5496:334;;;;-1:-1:-1;;;5496:334:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5915:14;;;;;:19;;5967:21;;;6016:26;;;;5881:162;;5915:19;5967:21;5881:20;:162::i;:::-;5873:276;;;;-1:-1:-1;;;5873:276:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6202:67;6212:12;:27;;;6241:12;:27;;;6202:9;:67::i;:::-;6194:135;;;;-1:-1:-1;;;6194:135:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6347:226;6372:6;:14;;;:21;;;6424:12;:26;;;6476:1;6491:12;:27;;;6545:12;:27;;;6347:11;:226::i;:::-;6339:307;;;;-1:-1:-1;;;6339:307:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6731:12;;;;:20;;;;;:25;;6788:27;;;6842:26;;;;6697:172;;6731:25;6788:27;6697:20;:172::i;:::-;6689:291;;;;-1:-1:-1;;;6689:291:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7008:293;;;;;;;;;7039:12;:26;;;7008:293;;;;7068:12;:26;;;7008:293;;;7109:182;;;;;;;;;7145:6;:12;;;:20;;;:27;;;7109:182;;;;7174:12;:26;;;7109:182;;;;;;;;;;;7220:12;:27;;;7109:182;;;;7249:12;:27;;;7109:182;;;:17;:182::i;7008:293::-;6991:310;;7317:14;7312:57;;7353:5;7346:12;;;;;;;;;;7312:57;7577:65;7587:12;:26;;;7615:12;:26;;;7577:9;:65::i;:::-;7569:136;;;;-1:-1:-1;;;7569:136:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7723:255;616:66;740;7850:6;:12;;;:18;;;7899:12;:26;;;7951:12;:26;;;7723:11;:255::i;:::-;7715:334;;;;-1:-1:-1;;;7715:334:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8160:12;;;;:33;;;:38;;8227:40;;;;;8291:26;;;;8126:192;;8160:38;8227:40;8126:20;:192::i;:::-;8118:321;;;;-1:-1:-1;;;8118:321:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8492:67;8502:12;:27;;;8531:12;:27;;;8492:9;:67::i;:::-;8484:139;;;;-1:-1:-1;;;8484:139:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8641:250;8666:6;:12;;;:33;;;:40;;;8730:12;:26;;;8794:1;8809:12;:27;;;8863:12;:27;;;8641:11;:250::i;:::-;8633:331;;;;-1:-1:-1;;;8633:331:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9091:12;;;;:26;;;:31;;9150:33;;;;;9206:26;;;;9057:176;;9091:31;9150:33;9057:20;:176::i;:::-;9049:297;;;;-1:-1:-1;;;9049:297:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9374:299;;;;;;;;;9405:12;:26;;;9374:299;;;;9434:12;:26;;;9374:299;;;9475:188;;;;;;;;;9511:6;:12;;;:26;;;:33;;;9475:188;;;;9546:12;:26;;;9475:188;;;;;;;;;;;9592:12;:27;;;9475:188;;;;9621:12;:27;;;9475:188;;;:17;:188::i;9374:299::-;9357:316;-1:-1:-1;;;;;;;1528:8184:10;;;;;;:::o;13200:375::-;13280:4;13304:7;:14;13322:2;13304:20;13296:70;;;;-1:-1:-1;;;13296:70:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13476:2;13463:16;;13457:23;13522:2;13509:16;;13503:23;13546:25;13457:23;13503;13546:9;:25::i;:::-;13539:32;;;;13200:375;;;;:::o;4614:2811:13:-;4703:27;;:::i;:::-;4754:23;;1948:32;4754:48;4746:57;;12:1:-1;9;2:12;4746:57:13;4813:23;4839:28;4850:16;4839:10;:28::i;:::-;4813:54;-1:-1:-1;4813:54:13;4949:19;4813:54;4949:10;:19::i;:::-;4921:48;;1499:2;4979:22;5041:19;4979:22;5041:10;:19::i;:::-;5012:18;;;;:49;;;;5071:22;5133:19;5071:22;5133:10;:19::i;:::-;5104:18;;;:49;1499:2;5163:22;5225:19;5163:22;5225:10;:19::i;:::-;5196:18;;;:49;1499:2;5255:22;5318:19;5255:22;5318:10;:19::i;:::-;5288;;;:50;1499:2;5348:22;5411:19;5348:22;5411:10;:19::i;:::-;5381;;;:50;1499:2;5441:22;5503:19;5441:22;5503:10;:19::i;:::-;5474:18;;;:49;1499:2;5533:22;5594:19;5533:22;5594:10;:19::i;:::-;5566:17;;;:48;1499:2;5624:22;5686:19;5624:22;5686:10;:19::i;:::-;5657:18;;;:49;1499:2;5716:22;5778:19;5716:22;5778:10;:19::i;:::-;5749:18;;;:49;1499:2;5808:22;5870:19;5808:22;5870:10;:19::i;:::-;5841:18;;;:49;1499:2;5900:22;5963:19;5900:22;5963:10;:19::i;:::-;5933;;;:50;1499:2;5993:22;6056:19;5993:22;6056:10;:19::i;:::-;6026;;;:50;1499:2;6086:22;6148:19;6086:22;6148:10;:19::i;:::-;6119:18;;;:49;1499:2;6178:22;6240:19;6178:22;6240:10;:19::i;:::-;6211:18;;;:49;1499:2;6270:22;6332:19;6270:22;6332:10;:19::i;:::-;6303:18;;;:49;1499:2;6362:22;6424:19;6362:22;6424:10;:19::i;:::-;6395:18;;;:49;1499:2;6454:22;6517:19;6454:22;6517:10;:19::i;:::-;6487;;;:50;1499:2;6547:22;6610:19;6547:22;6610:10;:19::i;:::-;6580;;;:50;1499:2;6640:22;6702:19;6640:22;6702:10;:19::i;:::-;6673:18;;;:49;1499:2;6732:22;6799:19;6732:22;6799:10;:19::i;:::-;6765:31;;;:53;6839:2;6828:13;6894:19;6828:13;6894:10;:19::i;:::-;6878:37;;6852:23;;;:63;6936:2;6925:13;7306:19;6925:13;7306:10;:19::i;:::-;-1:-1:-1;;;;;;7282:44:13;:14;;;:44;7347:1;7336:12;1948:32;7378:39;;7367:50;;7359:59;;12:1:-1;9;2:12;7359:59:13;4614:2811;;;;;:::o;2373:348:11:-;2573:4;2601:10;:17;2622:2;2601:23;2593:32;;12:1:-1;9;2:12;2593:32:11;2667:47;2675:26;2680:8;2690:10;2675:4;:26::i;:::-;2703:10;2667:7;:47::i;:::-;-1:-1:-1;;;;;2642:72:11;:21;2652:10;2642:9;:21::i;:::-;-1:-1:-1;;;;;2642:72:11;;;2373:348;-1:-1:-1;;;;;2373:348:11:o;3929:618:13:-;4009:24;;:::i;:::-;4076:18;;1859:42;4112;;;4104:51;;12:1:-1;9;2:12;4104:51:13;4166:15;4184:23;4195:11;4184:10;:23::i;:::-;4166:41;;4227:33;4237:7;4246:5;:13;;;4227:9;:33::i;:::-;4217:43;;4280:33;4290:7;4299:5;:13;;;4280:9;:33::i;:::-;4270:43;;4339:19;4350:7;4339:10;:19::i;:::-;4323:13;;;:35;4429:20;;;;1499:2;4368:22;;;;;4410:40;;4368:22;;4410:9;:40::i;:::-;4400:50;-1:-1:-1;4475:65:13;4400:50;-1:-1:-1;;4503:36:13;;4475:18;:65::i;:::-;4461:11;;;:79;-1:-1:-1;4461:5:13;;3929:618;-1:-1:-1;;3929:618:13:o;3019:1242:11:-;3146:14;-1:-1:-1;;;;;;3179:22:11;;3176:1079;;3324:61;;-1:-1:-1;;;3324:61:11;;;;;;;3260:17;3324:61;;;;;;3288:4;3324:61;;;;;;;;;;3288:4;;3260:17;;3288:4;;3376:8;;3324:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3324:61:11;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3324:61:11;;;3314:72;;;;;;3307:79;;;;;3176:1079;-1:-1:-1;;;;;;3407:22:11;;-1:-1:-1;;;3407:22:11;3403:852;;;3499:15;;3536:10;3528:62;;;;-1:-1:-1;;;3528:62:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3659:14;3691:91;3698:11;;3691:91;;3729:8;;3765:2;3755:12;;;;3691:91;;;3795:25;3833:6;3823:17;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3823:17:11;;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;108:14;3823:17:11;87:42:-1;143:17;;-1:-1;3823:17:11;-1:-1:-1;3863:15:11;;;-1:-1:-1;3795:45:11;-1:-1:-1;;;3908:10:11;;3932:136;3939:11;;3932:136;;4019:2;4010:6;:11;4005:2;:16;3994:29;;3970:12;3983:7;;;;;;;3970:21;;;;;;;;;;;:53;-1:-1:-1;;;;;3970:53:11;;;;;;;;-1:-1:-1;4051:2:11;4041:12;;;;3932:136;;;4099:77;;-1:-1:-1;;;4099:77:11;;;;;;;4128:23;4099:77;;;;;;;;4116:10;;4128:23;;4153:12;;4167:8;;4099:77;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;4099:77:11;;;;;;;;;;-1:-1:-1;4099:77:11;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4099:77:11;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4099:77:11;;;4089:88;;;;;;4082:95;;;;;;;;3403:852;4208:36;;;-1:-1:-1;;;4208:36:11;;;;;;;;;;;;;;;;;;;;;;;;;;;603:616;707:7;738:10;:17;759:2;738:23;730:32;;12:1:-1;9;2:12;730:32:11;878:2;862:19;;856:26;922:2;906:19;;900:26;974:2;958:19;;952:26;773:9;944:35;1098:2;1094:6;;1090:44;;;1121:2;1116:7;1090:44;1151:1;:7;;1156:2;1151:7;:18;;;;1162:1;:7;;1167:2;1162:7;1151:18;1143:27;;12:1:-1;9;2:12;1143:27:11;1187:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1187:25:11;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;1187:25:11;;-1:-1:-1;;1187:25:11;;;603:616;-1:-1:-1;;;;;;;603:616:11:o;7406:537:1:-;-1:-1:-1;;;;;7609:23:1;;7506:15;7609:23;;;:14;:23;;;;;;7506:15;;7563:71;;7579:54;;:25;;:54;:29;:54;:::i;:::-;7563:11;;:71;:15;:71;:::i;:::-;7553:81;-1:-1:-1;7654:65:1;7553:81;7672:46;:12;7689:28;7672:46;:16;:46;:::i;:::-;7654:8;:65::i;:::-;7644:75;-1:-1:-1;7738:30:1;7644:75;7750:17;7738:30;:11;:30;:::i;:::-;-1:-1:-1;;;;;7906:23:1;;;;;;:14;:23;;;;;;7729:39;;-1:-1:-1;7906:30:1;;7934:1;7906:30;:27;:30;:::i;:::-;-1:-1:-1;;;;;7880:23:1;;;;;;;:14;:23;;;;;:56;;;;7406:537;;-1:-1:-1;7406:537:1:o;1770:136:15:-;1384:1;1586:9;;-1:-1:-1;;;1586:9:15;;:25;:9;:25;1578:34;;12:1:-1;9;2:12;1578:34:15;1861:38:::1;::::0;;1888:10:::1;1861:38:::0;;;;-1:-1:-1;;;;;1861:38:15;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;1770:136:::0;:::o;3897:286::-;3998:14;;4052:52;4068:7;4077:9;4088:1;4091:9;3998:14;4052:15;:52::i;:::-;4147:20;;4123:54;-1:-1:-1;;;;;4123:54:15:o;2042:132::-;1384:1;1586:9;;-1:-1:-1;;;1586:9:15;;:25;:9;:25;1578:34;;12:1:-1;9;2:12;1578:34:15;2131:36:::1;::::0;;2156:10:::1;2131:36:::0;;;;-1:-1:-1;;;;;2131:36:15;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;2042:132:::0;:::o;1907:183:21:-;-1:-1:-1;;;;;1980:22:21;;1972:31;;12:1:-1;9;2:12;1972:31:21;2039:6;;;2018:38;;-1:-1:-1;;;;;2018:38:21;;;;2039:6;;;2018:38;;;2066:6;:17;;-1:-1:-1;;;;;;2066:17:21;-1:-1:-1;;;;;2066:17:21;;;;;;;;;;1907:183::o;2055:383:13:-;2133:22;;:::i;:::-;2179:20;;1619:28;2179:36;2171:45;;12:1:-1;9;2:12;2171:45:13;2226:15;2244:25;2255:13;2244:10;:25::i;:::-;2226:43;;2289:34;2299:7;2308;:14;;;2289:9;:34::i;:::-;2279:44;;2343:34;2353:7;2362;:14;;;2343:9;:34::i;:::-;2333:44;;2411:19;2422:7;2411:10;:19::i;:::-;2387:13;;;:44;-1:-1:-1;2387:7:13;2055:383;-1:-1:-1;2055:383:13:o;9718:1559:10:-;10069:15;;:20;;10103:22;;;;;10163:14;;:19;;10196:21;;;;10255:12;;;;;:20;:25;;10294:27;;;;10016:315;;;-1:-1:-1;;;;;;10016:315:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;10016:315:10;;;;;10430:15;;;;:20;;10464:22;;;;10524:14;;;;:19;;10557:21;;;;10616:12;;:20;;;:25;;10655:27;;;;10354:338;;9890:7;;10016:315;;10430:20;;10464:22;;10524:19;;10354:338;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;10354:338:10;;;;-1:-1:-1;;;;;;10354:338:10;;;;;;;;;;274:1:-1;10354:338:10;;;;;;;;;;;;;;;-1:-1:-1;10354:338:10;;;;;;;-1:-1:-1;10354:338:10;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;10354:338:10;;;;;10908:12;;;;:33;;;;:38;;10960:40;;;;11038:26;;;;:31;;11083:33;;;;11168:21;;;;;10715:484;;10354:338;;-1:-1:-1;10354:338:10;;-1:-1:-1;;;;10791:31:10;616:66;;10908:38;;10960:40;;11038:31;;11083:33;;11168:21;;10715:484;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;-1:-1;;;;;;10715:484:10;;;;;;;;;;274:1:-1;10715:484:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10715:484:10;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;10715:484:10;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10715:484:10;;;10703:496;;11210:9;11222:29;11241:9;11222:18;:29::i;:::-;11210:41;9718:1559;-1:-1:-1;;;;;9718:1559:10:o;12741:230::-;12854:4;12884:11;;;-1:-1:-1;;12899:14:10;;12884:29;;;;12924:43;;;;;12940:27;12950:7;12959;13867:331;13933:4;-1:-1:-1;;13987:7:10;;;;;:18;;;14004:1;13998:2;:7;;13987:18;13983:60;;;14027:5;14020:12;;;;;13983:60;14053:10;14081:1;14066:17;;;;;14077:2;14073;14066:17;14053:30;;14093:17;14157:1;14113:46;;;;;14154:1;14150;14120:32;;;;;14146:2;14142:1;14127:17;;;;;14138:2;14134;14127:17;14120:32;14113:46;14176:15;;;;;13867:331;-1:-1:-1;;;;;13867:331:10:o;14302:516::-;14440:4;-1:-1:-1;;14440:4:10;14565:89;14440:4;14584:2;14590:6;;;14584:13;14608:2;14475:66;14636:2;14628:6;14621:31;14565:89;;;14613:40;14565:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;14565:89:10;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;14565:89:10;;;-1:-1:-1;;14565:89:10;;;;14707:24;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;14707:24:10;;;;;;;14697:35;;;;;;;-1:-1:-1;;;;;14795:19:10;;;14689:91;;14795:19;;-1:-1:-1;;;;14302:516:10;;;;;;;:::o;15977:784::-;16079:16;;:::i;:::-;16155:4;;;16183;;;;16211;;16239;;;;-1:-1:-1;;987:66:10;16155:4;16211;16259:7;;;16258:22;;;;;16277:2;16272:1;:7;16258:22;16254:84;;;16302:25;;;;;;;;;16318:1;16302:25;;;;16321:1;16302:25;;;;16324:1;16302:25;;;:14;:25::i;:::-;16295:32;;;;;;;;;16254:84;16347:9;16375:1;16359:18;;;;;16372:1;16370;:3;16366:2;16359:18;16347:30;;16401:9;16429:1;16413:18;;;;;16426:1;16424;:3;16420:2;16413:18;16401:30;;16455:9;16480:1;16467:15;;;;;16477:1;16474;16467:15;16455:27;;16503:9;16528:1;16515:15;;;;;16525:1;16522;16515:15;16503:27;;16552:9;16577:1;16564:15;;;;;16574:1;16571;16564:15;16552:27;;16653:1;16596:59;;;;;16649:1;16622:29;;;;;16646:1;16642;16629:15;;;;;16639:1;16636;16629:15;16622:29;16620:1;:31;16616:1;16603:15;;;;;16613:1;16610;16603:15;16596:59;16589:66;;16734:1;;16672:64;;;;16730:1;16717:15;;;;;16727:1;16724;16717:15;16715:1;:17;16711:1;16679:34;;;;;16707:1;16689:20;;;;;16701:4;;16699:6;;16696:1;16689:20;16686:1;16679:34;16672:64;16665:4;;;:71;-1:-1:-1;;;16746:4:10;;;:8;-1:-1:-1;16665:1:10;;15977:784;-1:-1:-1;;;;;;;15977:784:10:o;15117:426::-;15251:4;;;;15223;;15251;15265:80;;15297:5;15290:12;;;;;15265:80;-1:-1:-1;;15355:9:10;987:66;15421:2;15417;15410:17;15476:4;;15388:39;;-1:-1:-1;15470:1:10;;15444:28;;;;15451:4;;15457:11;;15444:28;:36;:91;;;;-1:-1:-1;15531:4:10;;;;15525:1;;15484:43;;;;15521:1;15497:26;;;;;15517:2;15504:11;15497:26;15491:4;;;;15484:43;:51;15444:91;15437:98;15117:426;-1:-1:-1;;;;;;15117:426:10:o;7560:177:13:-;7697:2;7685:15;;7660:71::o;8664:151::-;8784:15;;8760:49::o;1331:148:11:-;1448:21;;;;;;;;1331:148::o;7824:458:13:-;8097:15;;8156:1;8142:16;;8136:23;7913:21;8089:24;;;;8178:18;;8206:13;;;;:22;1537:2;8254:21;;7824:458::o;2605:952::-;2709:29;;:::i;:::-;1695:45;2762:43;;;2754:52;;12:1:-1;9;2:12;2754:52:13;2828:34;2838:8;2848:5;:13;;;2828:9;:34::i;:::-;2817:45;;2883:34;2893:8;2903:5;:13;;;2883:9;:34::i;:::-;2872:45;;2938:47;2948:8;2958:5;:26;;;2938:9;:47::i;:::-;2927:58;;3006:40;3016:8;3026:5;:19;;;3006:9;:40::i;:::-;2995:51;;3078:20;3089:8;3078:10;:20::i;:::-;3056:11;;;:43;1579:2;3166:25;;;;;;;;;;1499:2;3109:23;;;;;3166:25;;;;21:6:-1;;108:14;3166:25:13;87:42:-1;-1:-1;;;3143:20:13;;;:48;;;3269:57;;3279:8;;1579:2;3269:9;:57::i;:::-;3258:68;-1:-1:-1;1695:45:13;3340:42;;3336:215;;;-1:-1:-1;;3425:42:13;;3415:53;;;2:2:-1;;;;27:1;24;17:12;2:2;3415:53:13;;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;108:14;3415:53:13;87:42:-1;143:17;;-1:-1;3415:53:13;-1:-1:-1;3398:14:13;;;:70;;;3518:21;;3482:58;;3492:8;;3482:9;:58::i;:::-;;2605:952;;;;:::o;232:421:20:-;290:7;530:6;526:45;;-1:-1:-1;559:1:20;552:8;;526:45;593:5;;;597:1;593;:5;:1;616:5;;;;;:10;608:19;;12:1:-1;9;2:12;1440:145:20;1498:7;1529:5;;;1552:6;;;;1544:15;;12:1:-1;9;2:12;783:296:20;841:7;938:1;934;:5;926:14;;12:1:-1;9;2:12;926:14:20;950:9;966:1;962;:5;;;;;;;783:296;-1:-1:-1;;;;783:296:20:o;341:104:19:-;399:7;429:1;425;:5;:13;;437:1;425:13;;;-1:-1:-1;433:1:19;;418:20;-1:-1:-1;341:104:19:o;2527:899:15:-;2808:4;2802:11;2826:32;;;2874:25;;2871:2;;2951:10;2944:4;2929:13;2925:24;2918:44;2871:2;3015:1;2995:18;2992:25;2989:2;;;3069:10;3062:4;3047:13;3043:24;3036:44;2989:2;3203:1;3200;3178:18;3172:4;3168:29;3162:4;3158:40;3143:13;3134:7;3127:5;3114:91;3222:71;;;;3375:16;3370:3;3355:13;3340:52;3107:303;;3222:71;3273:1;3258:13;3251:24;3107:303;;2771:649;;;;;;;:::o;11283:985:10:-;11355:7;11375:13;11398;11581:18;-1:-1:-1;;;11655:4:10;11647:13;;11662:5;11602:66;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;11602:66:10;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;11602:66:10;;;11581:87;;11730:4;11737:5;11707:36;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;11707:36:10;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;11707:36:10;;;11697:47;;;;;;11805:4;11812:5;11782:36;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;11782:36:10;;;;;;;26:21:-1;;;-1:-1;;22:32;6:49;;11782:36:10;;;11772:47;;;;;;;;11679:141;;-1:-1:-1;11772:47:10;;-1:-1:-1;11992:35:10;;-1:-1:-1;;;12057:66:10;-1:-1:-1;;;;12057:66:10;;-1:-1:-1;12178:5:10;12170;12155:40;12134:61;;12251:9;12216:45;;;;;12243:5;12223:10;12216:45;12212:1;:49;;11283:985;-1:-1:-1;;;;;;;;11283:985:10:o;16930:627::-;16995:16;;:::i;:::-;17035:4;;;;;17049:32;;-1:-1:-1;17073:8:10;;17049:32;17136:4;;-1:-1:-1;;987:66:10;17091:9;987:66;17174:4;;;;17171:1;17164:18;17150:32;;17192:12;17224:1;17207:19;;;;;17219:3;17214;17207:19;17192:34;;17236:9;17264:1;17248:18;;;;;17261:1;17255:4;17248:18;17236:30;;17276:9;17315:1;17288:29;;;;;17311:1;17298:15;;;;;17308:1;17305;17298:15;17295:1;17288:29;17276:41;;17327:9;17385:1;17339:48;;;;;17382:1;17363:21;;;;;17379:1;-1:-1:-1;;17363:21:10;17359:1;17346:15;;;;;17356:1;17353;17346:15;17339:48;17397:8;;;17327:60;-1:-1:-1;17514:1:10;;17422:94;;;;17510:1;17464:48;;;;;17506:1;17487:21;;;;;17500:4;17494;17487:21;-1:-1:-1;;;;;17464:48:10;17460:1;17429:33;;;;;17456:1;17439:19;;;;;17453:1;17449;:5;17446:1;17439:19;17436:1;17429:33;17422:94;17415:4;;;:101;17548:1;;17533:17;;;;17545:1;17540:3;17533:17;17526:4;;;:24;-1:-1:-1;17526:1:10;;16930:627;-1:-1:-1;;;;;;;;16930:627:10:o;9187:959:13:-;9320:21;9610:2;9605;9591:12;9587:21;9583:30;9640:13;9698:2;9689:7;9685:16;9745:1;9714:301;9828:5;9825:1;9822:12;9714:301;;;9921:2;9914:10;;9980:19;;;9974:26;9948:24;;;9941:60;9865:1;9858:9;9714:301;;;9734:14;;;;10074:1;10062:7;10056:14;10052:2;10048:23;10039:7;10035:37;10028:48;10127:12;10111:13;:28;10095:44;;9187:959;;;;;:::o;389:8783:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;389:8783:1;;;;;;-1:-1:-1;;;;;389:8783:1;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;-1:-1;389:8783:1;;;-1:-1:-1;;389:8783:1:o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;389:8783:1;;;;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "details": "|v2.1.2|",
    "methods": {
      "constructor": {
        "params": {
          "_basePenalty": "Base for the penalty calculation",
          "_escrow": "Escrow contract",
          "_hashAlgorithm": "Hashing algorithm",
          "_penaltyHistoryCoefficient": "Coefficient for calculating the penalty depending on the history",
          "_percentagePenaltyCoefficient": "Coefficient for calculating the percentage penalty",
          "_rewardCoefficient": "Coefficient for calculating the reward"
        }
      },
      "evaluateCFrag(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes)": {
        "notice": "Submit proof that a worker created wrong CFrag",
        "params": {
          "_cFragBytes": "Serialized CFrag",
          "_cFragSignature": "Signature of CFrag by worker",
          "_capsuleBytes": "Serialized capsule",
          "_preComputedData": "Additional pre-computed data for CFrag correctness verification",
          "_requesterPublicKey": "Bob's signing public key, also known as \"stamp\"",
          "_taskSignature": "Signature of task specification by Bob",
          "_workerIdentityEvidence": "Signature of worker's public key by worker's eth-key",
          "_workerPublicKey": "Worker's signing public key, also known as \"stamp\""
        }
      },
      "finishUpgrade(address)": {
        "details": "the `onlyWhileUpgrading` modifier works through a call to the parent `finishUpgrade`"
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract.",
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "verifyState(address)": {
        "details": "the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`"
      }
    },
    "notice": "Supervises stakers' behavior and punishes when something's wrong.",
    "title": "Adjudicator"
  },
  "offset": [
    389,
    9172
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x116 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F32D59B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE2FDCC17 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE2FDCC17 EQ PUSH2 0x67C JUMPI DUP1 PUSH4 0xE38A303B EQ PUSH2 0x684 JUMPI DUP1 PUSH4 0xE8DCCD06 EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6C8 JUMPI DUP1 PUSH4 0xFC9DAA07 EQ PUSH2 0x6EE JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x63E JUMPI DUP1 PUSH4 0xB9626D21 EQ PUSH2 0x646 JUMPI DUP1 PUSH4 0xBD02B140 EQ PUSH2 0x66C JUMPI DUP1 PUSH4 0xD4B83992 EQ PUSH2 0x674 JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0x59A15FA5 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0x59A15FA5 EQ PUSH2 0x5AB JUMPI DUP1 PUSH4 0x5D5B6836 EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0x70535443 EQ PUSH2 0x5FD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x62E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x636 JUMPI PUSH2 0x116 JUMP JUMPDEST DUP1 PUSH4 0xBEA809B EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x1F96670B EQ PUSH2 0x565 JUMPI DUP1 PUSH4 0x4B2CD118 EQ PUSH2 0x57F JUMPI DUP1 PUSH4 0x5712E98C EQ PUSH2 0x5A3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x563 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x1D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x3E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x49D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x6F6 SWAP5 POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x56D PUSH2 0x10E8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x587 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x56D PUSH2 0x111B JUMP JUMPDEST PUSH2 0x5B3 PUSH2 0x113F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x5C3 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x56D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1163 JUMP JUMPDEST PUSH2 0x61A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x563 PUSH2 0x118A JUMP JUMPDEST PUSH2 0x587 PUSH2 0x11E5 JUMP JUMPDEST PUSH2 0x61A PUSH2 0x11F4 JUMP JUMPDEST PUSH2 0x563 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1205 JUMP JUMPDEST PUSH2 0x56D PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x587 PUSH2 0x12EC JUMP JUMPDEST PUSH2 0x587 PUSH2 0x12FB JUMP JUMPDEST PUSH2 0x68C PUSH2 0x131F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x563 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x132F JUMP JUMPDEST PUSH2 0x563 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13AB JUMP JUMPDEST PUSH2 0x56D PUSH2 0x13C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D2 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x72F JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x710 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x777 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x758 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x0 PUSH2 0x13EC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3603 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x847 DUP11 DUP11 DUP6 PUSH2 0x1544 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 ISZERO ISZERO DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP CALLER SWAP2 DUP5 SWAP2 PUSH32 0x14C7C3AEAED5D9DE50669529F936D80FF48AF1F52BEB8447437689CB298131A8 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 PUSH2 0x88D DUP6 PUSH2 0x1F71 JUMP JUMPDEST PUSH2 0x8DE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B65722773207075626C6963206B657920697320696E76616C69640000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x8E7 DUP7 PUSH2 0x1F71 JUMP JUMPDEST PUSH2 0x922 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x38CA PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x92A PUSH2 0x3393 JUMP JUMPDEST PUSH2 0x933 DUP5 PUSH2 0x1FD1 JUMP JUMPDEST SWAP1 POP PUSH2 0x9F8 DUP11 DUP11 DUP4 PUSH2 0x2C0 ADD MLOAD PUSH1 0x1 PUSH1 0x5 DUP2 LT PUSH2 0x94C JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x982 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x963 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP9 PUSH32 0x0 PUSH2 0x21AF JUMP JUMPDEST PUSH2 0xA49 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4346726167207369676E617475726520697320696E76616C6964000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xA51 PUSH2 0x3457 JUMP JUMPDEST PUSH2 0xA5A DUP12 PUSH2 0x21F7 JUMP JUMPDEST SWAP1 POP PUSH2 0xB27 DUP10 DUP3 PUSH1 0x80 ADD MLOAD PUSH1 0xC0 ADD MLOAD DUP5 PUSH2 0x2C0 ADD MLOAD PUSH1 0x2 PUSH1 0x5 DUP2 LT PUSH2 0xA7B JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xAB1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 PUSH32 0x0 PUSH2 0x21AF JUMP JUMPDEST PUSH2 0xB78 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5461736B207369676E617475726520697320696E76616C696400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0x2C0 DUP4 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x4 BYTE PUSH1 0xF8 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xDB3 DUP15 DUP3 DUP11 DUP8 PUSH2 0x2A0 ADD MLOAD PUSH1 0x0 DUP1 SHL PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xC0B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xBEC JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP9 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP9 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xC53 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xC34 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP8 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP8 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xC9B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xC7C JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP13 DUP7 PUSH2 0x2C0 ADD MLOAD PUSH1 0x3 PUSH1 0x5 DUP2 LT PUSH2 0xD07 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xD3D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xD1E JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP13 PUSH32 0x0 PUSH2 0x21AF JUMP JUMPDEST PUSH2 0xDEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x35E1 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE07 PUSH2 0xE01 DUP4 PUSH1 0x45 PUSH1 0xF8 SHL PUSH2 0x227F JUMP JUMPDEST DUP11 PUSH2 0x257F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB2EEB36E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xEF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3789 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x178B6DE6 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 PUSH2 0xFE3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x5374616B657220686173206E6F20746F6B656E73 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP8 PUSH2 0x10D5 JUMPI PUSH1 0x0 DUP1 PUSH2 0xFF5 DUP5 DUP5 PUSH2 0x2638 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x26730863 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE CALLER PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH32 0x0 AND SWAP2 PUSH4 0x99CC218C SWAP2 PUSH1 0x84 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1079 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x108D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH32 0x860028D7F53AFB628CAE3582337C99BE24159F7EE9D68A96BABBC7F054A36CAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1192 PUSH2 0x11F4 JUMP JUMPDEST PUSH2 0x119B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH2 0x120E DUP2 PUSH2 0x2771 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE SWAP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1237 SWAP1 PUSH1 0x1 PUSH2 0x13EC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x1257 JUMPI PUSH1 0x0 PUSH2 0x125A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND PUSH2 0x126F DUP4 PUSH4 0x70535443 PUSH1 0xE0 SHL DUP5 PUSH2 0x27CB JUMP JUMPDEST EQ PUSH2 0x1279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH32 0x17EF568E3E12AB5B9C7254A8D58478811DE00F9E6EB34345ACD53BF8FD09D3EC SLOAD SWAP1 PUSH2 0x12BA SWAP1 DUP5 SWAP1 PUSH4 0x2EADB41B PUSH1 0xE1 SHL SWAP1 PUSH2 0x27CB JUMP JUMPDEST EQ PUSH2 0x12C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1338 DUP2 PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE SWAP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1361 SWAP1 PUSH1 0x1 PUSH2 0x13EC JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 DUP1 MSTORE PUSH1 0x4 SWAP1 MSTORE POP POP PUSH1 0x7B PUSH32 0x17EF568E3E12AB5B9C7254A8D58478811DE00F9E6EB34345ACD53BF8FD09D3EC SSTORE JUMP JUMPDEST PUSH2 0x13B3 PUSH2 0x11F4 JUMP JUMPDEST PUSH2 0x13BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13C5 DUP2 PUSH2 0x2840 JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x13FB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x140E JUMPI POP DUP2 MLOAD PUSH1 0x20 DUP4 ADD KECCAK256 PUSH2 0x153E JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x141C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x14B1 JUMPI PUSH1 0x2 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1454 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1435 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP5 POP SWAP2 SWAP3 POP POP DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1493 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x153E JUMP JUMPDEST PUSH1 0x3 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x14E3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x14C4 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP5 POP SWAP2 SWAP3 POP POP DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1522 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD MLOAD PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x154E PUSH2 0x349D JUMP JUMPDEST PUSH2 0x1557 DUP6 PUSH2 0x28AE JUMP JUMPDEST SWAP1 POP PUSH2 0x1561 PUSH2 0x3457 JUMP JUMPDEST PUSH2 0x156A DUP6 PUSH2 0x21F7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1574 PUSH2 0x3393 JUMP JUMPDEST PUSH2 0x157D DUP6 PUSH2 0x1FD1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x162F DUP3 PUSH2 0x280 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP5 PUSH2 0x2C0 ADD MLOAD PUSH1 0x0 PUSH1 0x5 DUP2 LT PUSH2 0x15A5 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x15DB JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x15BC JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x257F JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x2A0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1692 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x426164204B46726167207369676E6174757265 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x169E DUP6 DUP6 PUSH2 0x2905 JUMP JUMPDEST DUP6 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD DUP6 MLOAD SWAP3 SWAP4 POP PUSH2 0x16B6 SWAP3 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x16F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x36FD PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1703 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x2BC1 JUMP JUMPDEST PUSH2 0x1754 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F696E74207A45206973206E6F7420612076616C696420454320706F696E74 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x177D DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x17B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3577 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0x17D2 SWAP3 SWAP2 SWAP1 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x180D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x381A PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x181F DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x2BC1 JUMP JUMPDEST PUSH2 0x185A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3862 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x187B DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP4 DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x18B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3978 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x18D4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x190F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3930 PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1980 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 ADD MLOAD DUP2 MSTORE POP PUSH2 0x197B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE POP PUSH2 0x2CEC JUMP JUMPDEST PUSH2 0x2E14 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1996 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x1F6A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD MLOAD DUP1 MLOAD SWAP2 ADD MLOAD PUSH1 0xE0 DUP7 ADD MLOAD PUSH2 0x19B1 SWAP3 SWAP2 SWAP1 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x19EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3743 PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A00 DUP5 PUSH2 0x100 ADD MLOAD DUP6 PUSH2 0x120 ADD MLOAD PUSH2 0x2BC1 JUMP JUMPDEST PUSH2 0x1A51 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F696E74207A56206973206E6F7420612076616C696420454320706F696E74 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1A7C DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD DUP9 PUSH2 0x120 ADD MLOAD PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x1AB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3671 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP1 MLOAD SWAP2 ADD MLOAD PUSH2 0x140 DUP7 ADD MLOAD PUSH2 0x1AD3 SWAP3 SWAP2 SWAP1 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x1B0E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x37AB PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B22 DUP5 PUSH2 0x160 ADD MLOAD DUP6 PUSH2 0x180 ADD MLOAD PUSH2 0x2BC1 JUMP JUMPDEST PUSH2 0x1B5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x38EB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B81 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x140 ADD MLOAD DUP5 DUP8 PUSH2 0x160 ADD MLOAD DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x1BBC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x390D PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x20 SWAP1 DUP2 ADD MLOAD DUP1 MLOAD SWAP2 ADD MLOAD PUSH2 0x1A0 DUP7 ADD MLOAD PUSH2 0x1BDD SWAP3 SWAP2 SWAP1 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x1C18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3693 PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C87 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH2 0x120 ADD MLOAD DUP2 MSTORE POP PUSH2 0x197B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH2 0x1A0 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH2 0x160 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH2 0x180 ADD MLOAD DUP2 MSTORE POP PUSH2 0x2CEC JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C9D JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x1F6A JUMP JUMPDEST PUSH2 0x1CB1 DUP5 PUSH2 0x1C0 ADD MLOAD DUP6 PUSH2 0x1E0 ADD MLOAD PUSH2 0x2BC1 JUMP JUMPDEST PUSH2 0x1CEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x38A9 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D4B PUSH32 0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F PUSH32 0x7880ED56962D7C0AE44D6F14BB53B5FE64B31EA44A41D0316F3A598778F0F936 DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x1C0 ADD MLOAD DUP9 PUSH2 0x1E0 ADD MLOAD PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x1D86 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x36DB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x40 ADD MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH2 0x200 DUP7 ADD MLOAD PUSH2 0x1DA8 SWAP3 SWAP2 SWAP1 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x1DE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3629 PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DF7 DUP5 PUSH2 0x220 ADD MLOAD DUP6 PUSH2 0x240 ADD MLOAD PUSH2 0x2BC1 JUMP JUMPDEST PUSH2 0x1E32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3555 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E5A DUP6 PUSH1 0x80 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x200 ADD MLOAD DUP5 DUP8 PUSH2 0x220 ADD MLOAD DUP9 PUSH2 0x240 ADD MLOAD PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x1E95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x390D PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH2 0x260 DUP7 ADD MLOAD PUSH2 0x1EB7 SWAP3 SWAP2 SWAP1 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x1EF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3599 PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F61 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH2 0x1C0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH2 0x1E0 ADD MLOAD DUP2 MSTORE POP PUSH2 0x197B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH2 0x260 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH2 0x220 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH2 0x240 ADD MLOAD DUP2 MSTORE POP PUSH2 0x2CEC JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x40 EQ PUSH2 0x1FB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3884 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1FC7 DUP3 DUP3 PUSH2 0x2BC1 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FD9 PUSH2 0x3393 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2B9 EQ PUSH2 0x1FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1FF3 DUP4 PUSH2 0x2E7C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1FFF DUP2 PUSH2 0x2E82 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 ADD PUSH2 0x200D DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x2020 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2031 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2042 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2053 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2064 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2075 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2086 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2098 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20AA DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20BC DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20CE DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20E0 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x1A0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20F2 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x1C0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2104 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x1E0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2116 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x200 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2128 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x220 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x213A DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x240 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x214C DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x260 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x215E DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x280 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2170 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x60 SHR PUSH2 0x2A0 DUP5 ADD MSTORE PUSH1 0x14 ADD PUSH2 0x2185 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT AND PUSH2 0x2C0 DUP5 ADD MSTORE PUSH1 0x5 ADD PUSH2 0x2B9 DUP3 ADD DUP2 EQ PUSH2 0x21A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x21BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21D2 PUSH2 0x21CC DUP7 DUP5 PUSH2 0x13EC JUMP JUMPDEST DUP6 PUSH2 0x257F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x21E4 DUP5 PUSH2 0x2E86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21FF PUSH2 0x3457 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x167 DUP2 LT ISZERO PUSH2 0x2210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x221B DUP5 PUSH2 0x2E7C JUMP JUMPDEST SWAP1 POP PUSH2 0x222B DUP2 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP1 POP PUSH2 0x223B DUP2 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP1 POP PUSH2 0x2246 DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2262 SWAP1 DUP3 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST SWAP1 POP PUSH2 0x2272 DUP2 PUSH1 0x82 NOT DUP5 ADD PUSH2 0x2EAC JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND PUSH2 0x2332 JUMPI PUSH1 0x40 MLOAD PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x20 DUP1 DUP4 ADD DUP3 DUP2 MSTORE PUSH1 0x0 PUSH1 0x21 DUP6 ADD DUP2 SWAP1 MSTORE ADDRESS PUSH1 0x60 DUP2 SWAP1 SHL PUSH1 0x22 DUP8 ADD MSTORE DUP9 MLOAD SWAP1 SWAP6 SWAP2 SWAP4 DUP7 SWAP4 DUP11 SWAP4 SWAP1 SWAP3 PUSH1 0x36 SWAP1 SWAP2 ADD SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x22EC JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x22CD JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP PUSH2 0x153E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND PUSH1 0x45 PUSH1 0xF8 SHL EQ ISZERO PUSH2 0x2532 JUMPI DUP3 MLOAD DUP1 PUSH2 0x2386 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x37F3 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x239D JUMPI PUSH1 0x1 ADD PUSH1 0xA DUP3 DIV SWAP2 POP PUSH2 0x2389 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x23B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x23E1 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP7 MLOAD SWAP4 POP SWAP1 POP PUSH1 0x0 NOT DUP3 ADD JUMPDEST DUP4 ISZERO PUSH2 0x2433 JUMPI PUSH1 0xA DUP5 MOD PUSH1 0x30 ADD PUSH1 0xF8 SHL DUP3 DUP3 DUP1 PUSH1 0x1 SWAP1 SUB SWAP4 POP DUP2 MLOAD DUP2 LT PUSH2 0x2411 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP5 DIV SWAP4 POP PUSH2 0x23EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x20 DUP1 DUP4 ADD DUP3 DUP2 MSTORE PUSH32 0x457468657265756D205369676E6564204D6573736167653A0A00000000000000 PUSH1 0x21 DUP6 ADD DUP2 SWAP1 MSTORE DUP7 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 DUP8 SWAP4 DUP14 SWAP4 SWAP3 PUSH1 0x3A ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x24A1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2482 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x24E9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x24CA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP5 POP POP POP POP POP PUSH2 0x153E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E737570706F72746564204549503139312076657273696F6E000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x41 EQ PUSH2 0x258F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE PUSH1 0x1B DUP2 LT ISZERO PUSH2 0x25AE JUMPI PUSH1 0x1B ADD JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x25C3 JUMPI POP DUP1 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x25CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP5 AND DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 PUSH1 0x1F NOT DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2623 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH2 0x26B5 SWAP1 PUSH2 0x2688 SWAP1 PUSH32 0x0 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2FB2 AND JUMP JUMPDEST PUSH32 0x0 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2FD9 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x26F0 DUP3 PUSH2 0x26EB DUP6 PUSH32 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2FEB AND JUMP JUMPDEST PUSH2 0x300D JUMP JUMPDEST SWAP2 POP PUSH2 0x2722 DUP3 PUSH32 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2FEB AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x274F SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x2FD9 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND EQ PUSH2 0x2789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 PUSH32 0x1E8D98C1B4A0D9BD2E2371026B632EB2773FCCE41742E41F02F574AB69868D4C SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27DC DUP6 DUP6 PUSH1 0x1 DUP7 DUP6 PUSH2 0x3023 JUMP JUMPDEST MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND EQ PUSH2 0x27FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 PUSH32 0xD55EC27C5C6316913ED8803C18CFD1BFEFEA953DB909DCBA6140744A9D8B0D1F SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28B6 PUSH2 0x349D JUMP JUMPDEST DUP2 MLOAD PUSH1 0x62 EQ PUSH2 0x28C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28CF DUP4 PUSH2 0x2E7C JUMP JUMPDEST SWAP1 POP PUSH2 0x28DF DUP2 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP1 POP PUSH2 0x28EF DUP2 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP1 POP PUSH2 0x28FA DUP2 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD DUP4 MLOAD DUP1 MLOAD SWAP1 DUP5 ADD MLOAD PUSH1 0x80 DUP7 ADD DUP1 MLOAD MLOAD DUP1 MLOAD SWAP1 DUP8 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xF8 SWAP10 DUP11 SHL DUP2 AND DUP3 DUP13 ADD MSTORE PUSH1 0x21 DUP3 ADD SWAP9 SWAP1 SWAP9 MSTORE SWAP6 DUP9 SHL DUP8 AND PUSH1 0x41 DUP8 ADD MSTORE PUSH1 0x42 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SHL SWAP1 SWAP4 AND PUSH1 0x62 DUP4 ADD MSTORE PUSH1 0x63 DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP1 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x83 DUP3 ADD SWAP1 MSTORE DUP4 DUP7 ADD MLOAD DUP1 MLOAD SWAP1 DUP6 ADD MLOAD DUP7 DUP7 ADD MLOAD DUP1 MLOAD SWAP1 DUP8 ADD MLOAD SWAP5 MLOAD DUP8 ADD MLOAD DUP1 MLOAD SWAP1 DUP9 ADD MLOAD DUP8 MLOAD PUSH1 0x0 SWAP10 DUP10 SWAP9 SWAP7 SWAP8 SWAP6 SWAP7 SWAP5 SWAP6 PUSH1 0xA3 ADD SWAP2 DUP3 SWAP2 DUP11 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x29D1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x29B2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0xF8 SWAP11 DUP12 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP1 DUP2 AND SWAP3 SWAP1 SWAP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP3 ADD SWAP10 SWAP1 SWAP10 MSTORE SWAP7 DUP10 SHL DUP3 AND PUSH1 0x21 DUP9 ADD MSTORE POP PUSH1 0x22 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP5 SHL AND PUSH1 0x42 DUP3 ADD MSTORE PUSH1 0x43 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x63 DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP9 ADD MLOAD SWAP1 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 DUP5 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD DUP1 MLOAD SWAP1 DUP7 ADD MLOAD PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD DUP8 MLOAD SWAP8 SWAP10 POP DUP10 SWAP9 POP PUSH1 0x1 PUSH1 0xF9 SHL SWAP8 PUSH32 0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F SWAP8 SWAP5 SWAP7 SWAP4 SWAP6 SWAP3 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x83 SWAP1 SWAP3 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP12 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2ACB JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2AAC JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP13 DUP2 AND SWAP3 SWAP1 SWAP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP3 ADD DUP12 SWAP1 MSTORE PUSH1 0xF8 DUP11 DUP2 SHL DUP6 AND PUSH1 0x21 DUP5 ADD MSTORE PUSH1 0x22 DUP4 ADD DUP11 SWAP1 MSTORE DUP9 SWAP1 SHL SWAP1 SWAP4 AND PUSH1 0x42 DUP3 ADD MSTORE PUSH1 0x43 DUP2 ADD DUP7 SWAP1 MSTORE DUP5 MLOAD PUSH1 0x63 SWAP1 SWAP2 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2B53 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2B34 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 PUSH2 0x2B9B DUP3 PUSH2 0x3073 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH1 0x1 NOT DUP6 ADD PUSH1 0xFF AND EQ DUP1 DUP1 ISZERO PUSH2 0x2B9B JUMPI POP PUSH2 0x2B9B DUP5 DUP5 JUMPDEST PUSH1 0x0 PUSH5 0x1000003D0 NOT DUP1 DUP5 LT ISZERO DUP1 PUSH2 0x2BD9 JUMPI POP DUP1 DUP4 LT ISZERO JUMPDEST ISZERO PUSH2 0x2BE8 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x153E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH2 0x2BF2 JUMPI INVALID JUMPDEST DUP5 DUP6 MULMOD SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x2C01 JUMPI INVALID JUMPDEST PUSH1 0x7 DUP5 DUP1 PUSH2 0x2C0B JUMPI INVALID JUMPDEST DUP9 DUP7 DUP1 PUSH2 0x2C14 JUMPI INVALID JUMPDEST DUP11 DUP12 MULMOD MULMOD ADDMOD SWAP2 SWAP1 SWAP2 EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH17 0x14551231950B75FC4402DA1732FC9BEBE NOT DUP2 PUSH1 0x1 DUP2 PUSH1 0x1B DUP10 DUP4 AND ADD DUP11 DUP6 DUP13 DUP12 MULMOD PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 DUP5 MSTORE SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0xFF SWAP1 SWAP5 AND DUP5 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP4 ADD MSTORE MLOAD PUSH1 0xA0 DUP1 DUP4 ADD SWAP4 SWAP3 PUSH1 0x1F NOT DUP4 ADD SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 ADD MLOAD PUSH1 0x20 DUP3 DUP2 ADD DUP11 SWAP1 MSTORE DUP3 DUP5 ADD DUP10 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP6 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 SWAP4 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP4 POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2CF4 PUSH2 0x34CA JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD MLOAD DUP5 MLOAD SWAP2 DUP6 ADD MLOAD PUSH5 0x1000003D0 NOT SWAP4 SWAP3 SWAP1 DUP2 DUP5 EQ DUP1 ISZERO PUSH2 0x2D1A JUMPI POP DUP1 DUP4 EQ JUMPDEST ISZERO PUSH2 0x2D4F JUMPI PUSH2 0x2D43 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE POP PUSH2 0x3257 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH2 0x153E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP1 PUSH2 0x2D59 JUMPI INVALID JUMPDEST DUP5 DUP8 SUB DUP4 ADDMOD SWAP1 POP PUSH1 0x0 DUP7 DUP1 PUSH2 0x2D6A JUMPI INVALID JUMPDEST DUP7 DUP9 SUB DUP6 ADDMOD SWAP1 POP PUSH1 0x0 DUP8 DUP1 PUSH2 0x2D7B JUMPI INVALID JUMPDEST DUP3 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP9 DUP1 PUSH2 0x2D8A JUMPI INVALID JUMPDEST DUP4 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP10 DUP1 PUSH2 0x2D99 JUMPI INVALID JUMPDEST DUP4 DUP11 MULMOD SWAP1 POP DUP10 DUP1 PUSH2 0x2DA6 JUMPI INVALID JUMPDEST DUP11 DUP1 PUSH2 0x2DAE JUMPI INVALID JUMPDEST DUP4 DUP13 DUP1 PUSH2 0x2DB7 JUMPI INVALID JUMPDEST DUP5 PUSH1 0x2 MULMOD ADDMOD DUP12 SUB DUP12 DUP1 PUSH2 0x2DC6 JUMPI INVALID JUMPDEST DUP8 DUP9 MULMOD ADDMOD DUP12 MSTORE DUP10 DUP1 PUSH2 0x2DD4 JUMPI INVALID JUMPDEST DUP11 DUP1 PUSH2 0x2DDC JUMPI INVALID JUMPDEST DUP4 DUP11 MULMOD DUP12 SUB DUP12 DUP1 PUSH2 0x2DE9 JUMPI INVALID JUMPDEST DUP13 DUP1 PUSH2 0x2DF1 JUMPI INVALID JUMPDEST DUP15 MLOAD DUP15 SUB DUP6 ADDMOD DUP9 MULMOD ADDMOD PUSH1 0x20 DUP13 ADD MSTORE POP POP POP PUSH1 0x40 DUP9 ADD MSTORE POP SWAP5 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP1 PUSH2 0x2E2B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x153E JUMP JUMPDEST PUSH5 0x1000003D0 NOT PUSH1 0x0 DUP2 DUP4 DUP5 MULMOD DUP6 MLOAD SWAP1 SWAP2 POP DUP3 DUP1 PUSH2 0x2E45 JUMPI INVALID JUMPDEST DUP8 MLOAD DUP4 SWAP1 MULMOD EQ DUP1 ISZERO PUSH2 0x2E72 JUMPI POP PUSH1 0x20 DUP6 ADD MLOAD DUP3 DUP1 PUSH2 0x2E5F JUMPI INVALID JUMPDEST DUP4 DUP1 PUSH2 0x2E67 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD PUSH1 0x20 DUP10 ADD MLOAD MULMOD EQ JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 SWAP1 SWAP2 BYTE DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH1 0x21 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2EB4 PUSH2 0x34E8 JUMP JUMPDEST PUSH1 0xE4 DUP3 LT ISZERO PUSH2 0x2EC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ED0 DUP4 DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP3 POP PUSH2 0x2EE0 DUP4 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP3 POP PUSH2 0x2EF0 DUP4 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP3 POP PUSH2 0x2F00 DUP4 DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0x2E91 JUMP JUMPDEST SWAP3 POP PUSH2 0x2F0B DUP4 PUSH2 0x2E82 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP2 DUP2 MSTORE PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x2F45 SWAP1 DUP5 SWAP1 PUSH1 0x40 PUSH2 0x334C JUMP JUMPDEST SWAP3 POP PUSH1 0xE4 DUP3 GT ISZERO PUSH2 0x153E JUMPI PUSH1 0xE3 NOT DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2F96 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE DUP1 MLOAD PUSH2 0x2FAB SWAP2 DUP6 SWAP2 PUSH2 0x334C JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2FC1 JUMPI POP PUSH1 0x0 PUSH2 0x153E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2FCE JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1F6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1F6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2FF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x3004 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x301C JUMPI DUP2 PUSH2 0x1F6A JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE DUP4 ISZERO PUSH2 0x3036 JUMPI DUP3 PUSH1 0x4 DUP3 ADD MSTORE JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0x3046 JUMPI DUP2 PUSH1 0x24 DUP3 ADD MSTORE JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x20 MUL PUSH1 0x4 ADD DUP4 DUP10 GAS DELEGATECALL DUP1 ISZERO PUSH2 0x3064 JUMPI RETURNDATASIZE PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x3069 JUMP JUMPDEST PUSH1 0x0 DUP3 REVERT JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH15 0x3430B9B42FBA37AFB1BAB93B32B137 PUSH1 0x89 SHL PUSH1 0x0 DUP1 SHL DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x30D0 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x30B1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x314C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x312D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x31CC JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x31AD JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 DUP2 SUB PUSH1 0x1F NOT ADD DUP4 MSTORE SWAP1 SWAP4 MSTORE DUP1 MLOAD SWAP3 ADD SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 SWAP8 POP SWAP4 SWAP6 POP PUSH17 0x14551231950B75FC4402DA1732FC9BEC0 SWAP4 POP PUSH17 0x14551231950B75FC4402DA1732FC9BEBF NOT SWAP3 POP PUSH1 0x0 SWAP2 POP DUP3 SWAP1 POP DUP4 DUP8 MULMOD SWAP1 POP DUP2 DUP1 PUSH2 0x3245 JUMPI INVALID JUMPDEST DUP6 DUP3 ADDMOD PUSH1 0x1 ADD SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x325F PUSH2 0x34CA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD DUP1 PUSH2 0x326F JUMPI POP PUSH2 0x1FCC JUMP JUMPDEST DUP3 MLOAD PUSH5 0x1000003D0 NOT SWAP1 PUSH1 0x0 DUP3 PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x2 MULMOD SWAP1 POP PUSH1 0x0 DUP4 DUP1 PUSH2 0x3290 JUMPI INVALID JUMPDEST DUP3 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH2 0x329F JUMPI INVALID JUMPDEST DUP5 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP6 DUP1 PUSH2 0x32AE JUMPI INVALID JUMPDEST DUP7 DUP1 PUSH2 0x32B6 JUMPI INVALID JUMPDEST DUP7 DUP8 MULMOD PUSH1 0x3 MULMOD SWAP1 POP PUSH1 0x0 DUP7 DUP1 PUSH2 0x32C8 JUMPI INVALID JUMPDEST DUP8 DUP1 PUSH2 0x32D0 JUMPI INVALID JUMPDEST DUP5 PUSH5 0x1000003D2 NOT MULMOD DUP9 DUP1 PUSH2 0x32E1 JUMPI INVALID JUMPDEST DUP5 DUP6 MULMOD ADDMOD DUP1 DUP11 MSTORE SWAP1 POP DUP7 DUP1 PUSH2 0x32F2 JUMPI INVALID JUMPDEST DUP8 DUP1 PUSH2 0x32FA JUMPI INVALID JUMPDEST DUP9 DUP1 PUSH2 0x3302 JUMPI INVALID JUMPDEST DUP7 DUP8 MULMOD PUSH4 0x800001E9 PUSH1 0x1 PUSH1 0xFF SHL SUB MULMOD DUP9 DUP1 PUSH2 0x3319 JUMPI INVALID JUMPDEST DUP10 DUP1 PUSH2 0x3321 JUMPI INVALID JUMPDEST DUP5 DUP12 SUB DUP8 ADDMOD DUP6 MULMOD ADDMOD PUSH1 0x20 DUP11 ADD MSTORE DUP7 DUP1 PUSH2 0x3336 JUMPI INVALID JUMPDEST DUP9 DUP7 MULMOD PUSH1 0x40 DUP11 ADD MSTORE POP SWAP7 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV DUP5 PUSH1 0x20 DUP6 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3379 JUMPI PUSH1 0x20 DUP2 MUL DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x335D JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 ADD DUP5 ADD MSTORE DUP2 DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x2E0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x346A PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3477 PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x348B PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3498 PUSH2 0x34E8 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x34B0 PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x34BD PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x34FB PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3508 PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3515 PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3522 PUSH2 0x353D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID POP PUSH16 0x696E7420682A5531206973206E6F7420 PUSH2 0x2076 PUSH2 0x6C69 PUSH5 0x2045432070 PUSH16 0x696E74507265636F6D7075746564207A 0x2A GASLIMIT KECCAK256 PUSH23 0x616C756520697320696E636F7272656374507265636F6D PUSH17 0x75746564205920636F6F7264696E617465 KECCAK256 PUSH16 0x6620553220646F65736E277420636F72 PUSH19 0x6573706F6E6420746F20636F6D707265737365 PUSH5 0x2055322070 PUSH16 0x696E7453706563696669636174696F6E KECCAK256 PUSH20 0x69676E617475726520697320696E76616C696454 PUSH9 0x697320434672616720 PUSH9 0x617320616C72656164 PUSH26 0x206265656E206576616C75617465642E507265636F6D70757465 PUSH5 0x205920636F PUSH16 0x7264696E617465206F6620553120646F PUSH6 0x736E27742063 PUSH16 0x72726573706F6E6420746F20636F6D70 PUSH19 0x657373656420553120706F696E74507265636F PUSH14 0x7075746564207A2A562076616C75 PUSH6 0x20697320696E PUSH4 0x6F727265 PUSH4 0x74507265 PUSH4 0x6F6D7075 PUSH21 0x6564205920636F6F7264696E617465206F66205632 KECCAK256 PUSH5 0x6F65736E27 PUSH21 0x20636F72726573706F6E6420746F20636F6D707265 PUSH20 0x73656420563220706F696E74507265636F6D7075 PUSH21 0x6564207A2A552076616C756520697320696E636F72 PUSH19 0x656374507265636F6D7075746564205920636F PUSH16 0x7264696E617465206F66204520646F65 PUSH20 0x6E277420636F72726573706F6E6420746F20636F PUSH14 0x70726573736564204520706F696E PUSH21 0x507265636F6D7075746564205920636F6F7264696E PUSH2 0x7465 KECCAK256 PUSH16 0x66205620646F65736E277420636F7272 PUSH6 0x73706F6E6420 PUSH21 0x6F20636F6D70726573736564205620706F696E7457 PUSH16 0x726B6572206D7573742062652072656C PUSH2 0x7465 PUSH5 0x20746F2061 KECCAK256 PUSH20 0x74616B6572507265636F6D707574656420592063 PUSH16 0x6F7264696E617465206F662056312064 PUSH16 0x65736E277420636F72726573706F6E64 KECCAK256 PUSH21 0x6F20636F6D7072657373656420563120706F696E74 GASLIMIT PUSH14 0x707479206D657373616765206E6F PUSH21 0x20616C6C6F77656420666F722076657273696F6E20 GASLIMIT POP PUSH19 0x65636F6D7075746564205920636F6F7264696E PUSH2 0x7465 KECCAK256 PUSH16 0x6620453120646F65736E277420636F72 PUSH19 0x6573706F6E6420746F20636F6D707265737365 PUSH5 0x2045312070 PUSH16 0x696E74506F696E7420682A4531206973 KECCAK256 PUSH15 0x6F7420612076616C69642045432070 PUSH16 0x696E7453657269616C697A656420636F PUSH16 0x7264696E617465732073686F756C6420 PUSH3 0x652036 CALLVALUE KECCAK256 TIMESTAMP POP PUSH16 0x696E74207A2A55206973206E6F742061 KECCAK256 PUSH23 0x616C696420454320706F696E7452657175657374657227 PUSH20 0x207075626C6963206B657920697320696E76616C PUSH10 0x64506F696E7420682A56 BALANCE KECCAK256 PUSH10 0x73206E6F742061207661 PUSH13 0x696420454320706F696E745072 PUSH6 0x636F6D707574 PUSH6 0x6420682A5631 KECCAK256 PUSH23 0x616C756520697320696E636F7272656374507265636F6D PUSH17 0x75746564205920636F6F7264696E617465 KECCAK256 PUSH16 0x6620453220646F65736E277420636F72 PUSH19 0x6573706F6E6420746F20636F6D707265737365 PUSH5 0x2045322070 PUSH16 0x696E74507265636F6D70757465642068 0x2A GASLIMIT BALANCE KECCAK256 PUSH23 0x616C756520697320696E636F7272656374A26469706673 PC 0x22 SLT KECCAK256 DUP12 SWAP5 SWAP7 SELFBALANCE 0xB5 0x26 0xC 0xC2 OR LT SAR 0xFB SWAP13 DUP3 LOG4 NOT SWAP2 0xD5 CALL 0x2A 0xE SLT PUSH22 0xBC10D07214902FA39064736F6C634300060700330000 ",
  "pcMap": {
    "0": {
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "op": "DUP1"
    },
    "7": {
      "op": "ISZERO"
    },
    "8": {
      "op": "PUSH2",
      "value": "0x10"
    },
    "11": {
      "op": "JUMPI"
    },
    "12": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "14": {
      "op": "DUP1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "op": "JUMPDEST"
    },
    "17": {
      "offset": [
        389,
        9172
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x116"
    },
    "25": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8F32D59B"
    },
    "38": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "GT",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA2"
    },
    "42": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xE2FDCC17"
    },
    "49": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "GT",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xE2FDCC17"
    },
    "60": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x67C"
    },
    "64": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xE38A303B"
    },
    "71": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x684"
    },
    "75": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xE8DCCD06"
    },
    "82": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6A2"
    },
    "86": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xF2FDE38B"
    },
    "93": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "94": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6C8"
    },
    "97": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "98": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "99": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFC9DAA07"
    },
    "104": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "105": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6EE"
    },
    "108": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "109": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x116"
    },
    "112": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "113": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "114": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "115": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8F32D59B"
    },
    "120": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "121": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x63E"
    },
    "124": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "125": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "126": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xB9626D21"
    },
    "131": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "132": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x646"
    },
    "135": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "136": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "137": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xBD02B140"
    },
    "142": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "143": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x66C"
    },
    "146": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "147": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "148": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xD4B83992"
    },
    "153": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "154": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x674"
    },
    "157": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "158": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x116"
    },
    "161": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "162": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "163": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "164": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x59A15FA5"
    },
    "169": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "GT",
      "path": "1"
    },
    "170": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE9"
    },
    "173": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "174": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "175": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x59A15FA5"
    },
    "180": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "181": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5AB"
    },
    "184": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "185": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "186": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x5D5B6836"
    },
    "191": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "192": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5D7"
    },
    "195": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "196": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "197": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x70535443"
    },
    "202": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "203": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5FD"
    },
    "206": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "207": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "208": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x715018A6"
    },
    "213": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "214": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x62E"
    },
    "217": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "218": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "219": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8DA5CB5B"
    },
    "224": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "225": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x636"
    },
    "228": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "229": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x116"
    },
    "232": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "233": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "234": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "235": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xBEA809B"
    },
    "240": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "241": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11B"
    },
    "244": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "245": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "246": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x1F96670B"
    },
    "251": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "252": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x565"
    },
    "255": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "256": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "257": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x4B2CD118"
    },
    "262": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "263": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57F"
    },
    "266": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "267": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "268": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x5712E98C"
    },
    "273": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "EQ",
      "path": "1"
    },
    "274": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5A3"
    },
    "277": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "278": {
      "fn": null,
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "279": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "281": {
      "op": "DUP1"
    },
    "282": {
      "first_revert": true,
      "op": "REVERT"
    },
    "283": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "284": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x563"
    },
    "287": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "289": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "290": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "291": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SUB",
      "path": "1"
    },
    "292": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "295": {
      "op": "DUP2"
    },
    "296": {
      "op": "LT"
    },
    "297": {
      "op": "ISZERO"
    },
    "298": {
      "op": "PUSH2",
      "value": "0x132"
    },
    "301": {
      "op": "JUMPI"
    },
    "302": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "304": {
      "op": "DUP1"
    },
    "305": {
      "op": "REVERT"
    },
    "306": {
      "op": "JUMPDEST"
    },
    "307": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "308": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "309": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "310": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "312": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "313": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "314": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "315": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "316": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "318": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "320": {
      "op": "SHL"
    },
    "321": {
      "op": "DUP2"
    },
    "322": {
      "op": "GT"
    },
    "323": {
      "op": "ISZERO"
    },
    "324": {
      "op": "PUSH2",
      "value": "0x14C"
    },
    "327": {
      "op": "JUMPI"
    },
    "328": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "330": {
      "op": "DUP1"
    },
    "331": {
      "op": "REVERT"
    },
    "332": {
      "op": "JUMPDEST"
    },
    "333": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "334": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "335": {
      "op": "DUP4"
    },
    "336": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "338": {
      "op": "DUP3"
    },
    "339": {
      "op": "ADD"
    },
    "340": {
      "op": "GT"
    },
    "341": {
      "op": "ISZERO"
    },
    "342": {
      "op": "PUSH2",
      "value": "0x15E"
    },
    "345": {
      "op": "JUMPI"
    },
    "346": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "348": {
      "op": "DUP1"
    },
    "349": {
      "op": "REVERT"
    },
    "350": {
      "op": "JUMPDEST"
    },
    "351": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "352": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "353": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "354": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "356": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "357": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "358": {
      "op": "DUP5"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "361": {
      "op": "DUP4"
    },
    "362": {
      "op": "MUL"
    },
    "363": {
      "op": "DUP5"
    },
    "364": {
      "op": "ADD"
    },
    "365": {
      "op": "GT"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "368": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "370": {
      "op": "SHL"
    },
    "371": {
      "op": "DUP4"
    },
    "372": {
      "op": "GT"
    },
    "373": {
      "op": "OR"
    },
    "374": {
      "op": "ISZERO"
    },
    "375": {
      "op": "PUSH2",
      "value": "0x17F"
    },
    "378": {
      "op": "JUMPI"
    },
    "379": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "381": {
      "op": "DUP1"
    },
    "382": {
      "op": "REVERT"
    },
    "383": {
      "op": "JUMPDEST"
    },
    "384": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "385": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "386": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "387": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "388": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "390": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "391": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "393": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "394": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "395": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "396": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "397": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "399": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "400": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "402": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "403": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "404": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "405": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "406": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "408": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "409": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "410": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "411": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "412": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "413": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "414": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "415": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "416": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "417": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "419": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "420": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "421": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "422": {
      "op": "DUP1"
    },
    "423": {
      "op": "DUP3"
    },
    "424": {
      "op": "DUP5"
    },
    "425": {
      "op": "CALLDATACOPY"
    },
    "426": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "428": {
      "op": "SWAP3"
    },
    "429": {
      "op": "ADD"
    },
    "430": {
      "op": "SWAP2"
    },
    "431": {
      "op": "SWAP1"
    },
    "432": {
      "op": "SWAP2"
    },
    "433": {
      "op": "MSTORE"
    },
    "434": {
      "op": "POP"
    },
    "435": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "436": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "437": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "438": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "439": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "441": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "442": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "443": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "444": {
      "op": "POP"
    },
    "445": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "446": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "447": {
      "op": "POP"
    },
    "448": {
      "op": "POP"
    },
    "449": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "451": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "453": {
      "op": "SHL"
    },
    "454": {
      "op": "DUP2"
    },
    "455": {
      "op": "GT"
    },
    "456": {
      "op": "ISZERO"
    },
    "457": {
      "op": "PUSH2",
      "value": "0x1D1"
    },
    "460": {
      "op": "JUMPI"
    },
    "461": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "463": {
      "op": "DUP1"
    },
    "464": {
      "op": "REVERT"
    },
    "465": {
      "op": "JUMPDEST"
    },
    "466": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "467": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "468": {
      "op": "DUP4"
    },
    "469": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "471": {
      "op": "DUP3"
    },
    "472": {
      "op": "ADD"
    },
    "473": {
      "op": "GT"
    },
    "474": {
      "op": "ISZERO"
    },
    "475": {
      "op": "PUSH2",
      "value": "0x1E3"
    },
    "478": {
      "op": "JUMPI"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "481": {
      "op": "DUP1"
    },
    "482": {
      "op": "REVERT"
    },
    "483": {
      "op": "JUMPDEST"
    },
    "484": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "485": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "486": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "487": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "489": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "490": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "491": {
      "op": "DUP5"
    },
    "492": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "494": {
      "op": "DUP4"
    },
    "495": {
      "op": "MUL"
    },
    "496": {
      "op": "DUP5"
    },
    "497": {
      "op": "ADD"
    },
    "498": {
      "op": "GT"
    },
    "499": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "501": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "503": {
      "op": "SHL"
    },
    "504": {
      "op": "DUP4"
    },
    "505": {
      "op": "GT"
    },
    "506": {
      "op": "OR"
    },
    "507": {
      "op": "ISZERO"
    },
    "508": {
      "op": "PUSH2",
      "value": "0x204"
    },
    "511": {
      "op": "JUMPI"
    },
    "512": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "514": {
      "op": "DUP1"
    },
    "515": {
      "op": "REVERT"
    },
    "516": {
      "op": "JUMPDEST"
    },
    "517": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "518": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "519": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "520": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "521": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "523": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "524": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "526": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "527": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "528": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "529": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "530": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "532": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "533": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "535": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "536": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "537": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "538": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "539": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "541": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "542": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "543": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "544": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "545": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "546": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "547": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "548": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "549": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "550": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "552": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "553": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "554": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "555": {
      "op": "DUP1"
    },
    "556": {
      "op": "DUP3"
    },
    "557": {
      "op": "DUP5"
    },
    "558": {
      "op": "CALLDATACOPY"
    },
    "559": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "561": {
      "op": "SWAP3"
    },
    "562": {
      "op": "ADD"
    },
    "563": {
      "op": "SWAP2"
    },
    "564": {
      "op": "SWAP1"
    },
    "565": {
      "op": "SWAP2"
    },
    "566": {
      "op": "MSTORE"
    },
    "567": {
      "op": "POP"
    },
    "568": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "569": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "570": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "571": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "572": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "574": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "575": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "576": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "577": {
      "op": "POP"
    },
    "578": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "579": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "580": {
      "op": "POP"
    },
    "581": {
      "op": "POP"
    },
    "582": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "584": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "586": {
      "op": "SHL"
    },
    "587": {
      "op": "DUP2"
    },
    "588": {
      "op": "GT"
    },
    "589": {
      "op": "ISZERO"
    },
    "590": {
      "op": "PUSH2",
      "value": "0x256"
    },
    "593": {
      "op": "JUMPI"
    },
    "594": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "596": {
      "op": "DUP1"
    },
    "597": {
      "op": "REVERT"
    },
    "598": {
      "op": "JUMPDEST"
    },
    "599": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "600": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "601": {
      "op": "DUP4"
    },
    "602": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "604": {
      "op": "DUP3"
    },
    "605": {
      "op": "ADD"
    },
    "606": {
      "op": "GT"
    },
    "607": {
      "op": "ISZERO"
    },
    "608": {
      "op": "PUSH2",
      "value": "0x268"
    },
    "611": {
      "op": "JUMPI"
    },
    "612": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "614": {
      "op": "DUP1"
    },
    "615": {
      "op": "REVERT"
    },
    "616": {
      "op": "JUMPDEST"
    },
    "617": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "618": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "619": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "620": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "622": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "623": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "624": {
      "op": "DUP5"
    },
    "625": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "627": {
      "op": "DUP4"
    },
    "628": {
      "op": "MUL"
    },
    "629": {
      "op": "DUP5"
    },
    "630": {
      "op": "ADD"
    },
    "631": {
      "op": "GT"
    },
    "632": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "634": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "636": {
      "op": "SHL"
    },
    "637": {
      "op": "DUP4"
    },
    "638": {
      "op": "GT"
    },
    "639": {
      "op": "OR"
    },
    "640": {
      "op": "ISZERO"
    },
    "641": {
      "op": "PUSH2",
      "value": "0x289"
    },
    "644": {
      "op": "JUMPI"
    },
    "645": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "647": {
      "op": "DUP1"
    },
    "648": {
      "op": "REVERT"
    },
    "649": {
      "op": "JUMPDEST"
    },
    "650": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "651": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "652": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "653": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "654": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "656": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "657": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "659": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "660": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "661": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "662": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "663": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "665": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "666": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "668": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "669": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "670": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "671": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "672": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "674": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "675": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "676": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "677": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "678": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "679": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "680": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "681": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "682": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "683": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "685": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "686": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "687": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "688": {
      "op": "DUP1"
    },
    "689": {
      "op": "DUP3"
    },
    "690": {
      "op": "DUP5"
    },
    "691": {
      "op": "CALLDATACOPY"
    },
    "692": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "694": {
      "op": "SWAP3"
    },
    "695": {
      "op": "ADD"
    },
    "696": {
      "op": "SWAP2"
    },
    "697": {
      "op": "SWAP1"
    },
    "698": {
      "op": "SWAP2"
    },
    "699": {
      "op": "MSTORE"
    },
    "700": {
      "op": "POP"
    },
    "701": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "702": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "703": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "704": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "705": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "707": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "708": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "709": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "710": {
      "op": "POP"
    },
    "711": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "712": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "713": {
      "op": "POP"
    },
    "714": {
      "op": "POP"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "717": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "719": {
      "op": "SHL"
    },
    "720": {
      "op": "DUP2"
    },
    "721": {
      "op": "GT"
    },
    "722": {
      "op": "ISZERO"
    },
    "723": {
      "op": "PUSH2",
      "value": "0x2DB"
    },
    "726": {
      "op": "JUMPI"
    },
    "727": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "729": {
      "op": "DUP1"
    },
    "730": {
      "op": "REVERT"
    },
    "731": {
      "op": "JUMPDEST"
    },
    "732": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "733": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "734": {
      "op": "DUP4"
    },
    "735": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "737": {
      "op": "DUP3"
    },
    "738": {
      "op": "ADD"
    },
    "739": {
      "op": "GT"
    },
    "740": {
      "op": "ISZERO"
    },
    "741": {
      "op": "PUSH2",
      "value": "0x2ED"
    },
    "744": {
      "op": "JUMPI"
    },
    "745": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "747": {
      "op": "DUP1"
    },
    "748": {
      "op": "REVERT"
    },
    "749": {
      "op": "JUMPDEST"
    },
    "750": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "751": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "752": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "753": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "755": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "756": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "757": {
      "op": "DUP5"
    },
    "758": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "760": {
      "op": "DUP4"
    },
    "761": {
      "op": "MUL"
    },
    "762": {
      "op": "DUP5"
    },
    "763": {
      "op": "ADD"
    },
    "764": {
      "op": "GT"
    },
    "765": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "767": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "769": {
      "op": "SHL"
    },
    "770": {
      "op": "DUP4"
    },
    "771": {
      "op": "GT"
    },
    "772": {
      "op": "OR"
    },
    "773": {
      "op": "ISZERO"
    },
    "774": {
      "op": "PUSH2",
      "value": "0x30E"
    },
    "777": {
      "op": "JUMPI"
    },
    "778": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "780": {
      "op": "DUP1"
    },
    "781": {
      "op": "REVERT"
    },
    "782": {
      "op": "JUMPDEST"
    },
    "783": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "784": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "785": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "786": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "787": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "789": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "790": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "792": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "793": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "794": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "795": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "796": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "798": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "799": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "801": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "802": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "803": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "804": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "805": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "807": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "808": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "809": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "810": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "811": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "812": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "813": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "814": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "815": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "816": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "818": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "819": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "820": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "821": {
      "op": "DUP1"
    },
    "822": {
      "op": "DUP3"
    },
    "823": {
      "op": "DUP5"
    },
    "824": {
      "op": "CALLDATACOPY"
    },
    "825": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "827": {
      "op": "SWAP3"
    },
    "828": {
      "op": "ADD"
    },
    "829": {
      "op": "SWAP2"
    },
    "830": {
      "op": "SWAP1"
    },
    "831": {
      "op": "SWAP2"
    },
    "832": {
      "op": "MSTORE"
    },
    "833": {
      "op": "POP"
    },
    "834": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "835": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "836": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "837": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "838": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "840": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "841": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "842": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "843": {
      "op": "POP"
    },
    "844": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "845": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "846": {
      "op": "POP"
    },
    "847": {
      "op": "POP"
    },
    "848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "850": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "852": {
      "op": "SHL"
    },
    "853": {
      "op": "DUP2"
    },
    "854": {
      "op": "GT"
    },
    "855": {
      "op": "ISZERO"
    },
    "856": {
      "op": "PUSH2",
      "value": "0x360"
    },
    "859": {
      "op": "JUMPI"
    },
    "860": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "862": {
      "op": "DUP1"
    },
    "863": {
      "op": "REVERT"
    },
    "864": {
      "op": "JUMPDEST"
    },
    "865": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "866": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "867": {
      "op": "DUP4"
    },
    "868": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "870": {
      "op": "DUP3"
    },
    "871": {
      "op": "ADD"
    },
    "872": {
      "op": "GT"
    },
    "873": {
      "op": "ISZERO"
    },
    "874": {
      "op": "PUSH2",
      "value": "0x372"
    },
    "877": {
      "op": "JUMPI"
    },
    "878": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "880": {
      "op": "DUP1"
    },
    "881": {
      "op": "REVERT"
    },
    "882": {
      "op": "JUMPDEST"
    },
    "883": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "884": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "885": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "886": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "888": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "889": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "890": {
      "op": "DUP5"
    },
    "891": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "893": {
      "op": "DUP4"
    },
    "894": {
      "op": "MUL"
    },
    "895": {
      "op": "DUP5"
    },
    "896": {
      "op": "ADD"
    },
    "897": {
      "op": "GT"
    },
    "898": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "900": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "902": {
      "op": "SHL"
    },
    "903": {
      "op": "DUP4"
    },
    "904": {
      "op": "GT"
    },
    "905": {
      "op": "OR"
    },
    "906": {
      "op": "ISZERO"
    },
    "907": {
      "op": "PUSH2",
      "value": "0x393"
    },
    "910": {
      "op": "JUMPI"
    },
    "911": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "913": {
      "op": "DUP1"
    },
    "914": {
      "op": "REVERT"
    },
    "915": {
      "op": "JUMPDEST"
    },
    "916": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "917": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "918": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "919": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "920": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "922": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "923": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "925": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "926": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "927": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "928": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "929": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "931": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "932": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "934": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "935": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "936": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "937": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "938": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "940": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "941": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "942": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "943": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "944": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "945": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "946": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "947": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "948": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "949": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "951": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "952": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "953": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "954": {
      "op": "DUP1"
    },
    "955": {
      "op": "DUP3"
    },
    "956": {
      "op": "DUP5"
    },
    "957": {
      "op": "CALLDATACOPY"
    },
    "958": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "960": {
      "op": "SWAP3"
    },
    "961": {
      "op": "ADD"
    },
    "962": {
      "op": "SWAP2"
    },
    "963": {
      "op": "SWAP1"
    },
    "964": {
      "op": "SWAP2"
    },
    "965": {
      "op": "MSTORE"
    },
    "966": {
      "op": "POP"
    },
    "967": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "968": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "969": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "970": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "971": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "973": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "974": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "975": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "976": {
      "op": "POP"
    },
    "977": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "978": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "979": {
      "op": "POP"
    },
    "980": {
      "op": "POP"
    },
    "981": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "983": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "985": {
      "op": "SHL"
    },
    "986": {
      "op": "DUP2"
    },
    "987": {
      "op": "GT"
    },
    "988": {
      "op": "ISZERO"
    },
    "989": {
      "op": "PUSH2",
      "value": "0x3E5"
    },
    "992": {
      "op": "JUMPI"
    },
    "993": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "995": {
      "op": "DUP1"
    },
    "996": {
      "op": "REVERT"
    },
    "997": {
      "op": "JUMPDEST"
    },
    "998": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "999": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1000": {
      "op": "DUP4"
    },
    "1001": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1003": {
      "op": "DUP3"
    },
    "1004": {
      "op": "ADD"
    },
    "1005": {
      "op": "GT"
    },
    "1006": {
      "op": "ISZERO"
    },
    "1007": {
      "op": "PUSH2",
      "value": "0x3F7"
    },
    "1010": {
      "op": "JUMPI"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1013": {
      "op": "DUP1"
    },
    "1014": {
      "op": "REVERT"
    },
    "1015": {
      "op": "JUMPDEST"
    },
    "1016": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1017": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1018": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1019": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1021": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1022": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1023": {
      "op": "DUP5"
    },
    "1024": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1026": {
      "op": "DUP4"
    },
    "1027": {
      "op": "MUL"
    },
    "1028": {
      "op": "DUP5"
    },
    "1029": {
      "op": "ADD"
    },
    "1030": {
      "op": "GT"
    },
    "1031": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1033": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1035": {
      "op": "SHL"
    },
    "1036": {
      "op": "DUP4"
    },
    "1037": {
      "op": "GT"
    },
    "1038": {
      "op": "OR"
    },
    "1039": {
      "op": "ISZERO"
    },
    "1040": {
      "op": "PUSH2",
      "value": "0x418"
    },
    "1043": {
      "op": "JUMPI"
    },
    "1044": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1046": {
      "op": "DUP1"
    },
    "1047": {
      "op": "REVERT"
    },
    "1048": {
      "op": "JUMPDEST"
    },
    "1049": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1050": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1051": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1052": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1053": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1055": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1056": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1058": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1059": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1060": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "1061": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "1062": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1064": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1065": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1067": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1068": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1069": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1070": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1071": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1073": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1074": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1075": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1076": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1077": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1078": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1079": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1080": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1081": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1082": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1084": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1085": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1086": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1087": {
      "op": "DUP1"
    },
    "1088": {
      "op": "DUP3"
    },
    "1089": {
      "op": "DUP5"
    },
    "1090": {
      "op": "CALLDATACOPY"
    },
    "1091": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1093": {
      "op": "SWAP3"
    },
    "1094": {
      "op": "ADD"
    },
    "1095": {
      "op": "SWAP2"
    },
    "1096": {
      "op": "SWAP1"
    },
    "1097": {
      "op": "SWAP2"
    },
    "1098": {
      "op": "MSTORE"
    },
    "1099": {
      "op": "POP"
    },
    "1100": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1101": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "1102": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1103": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1104": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1106": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1107": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1108": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1109": {
      "op": "POP"
    },
    "1110": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1111": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1112": {
      "op": "POP"
    },
    "1113": {
      "op": "POP"
    },
    "1114": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1118": {
      "op": "SHL"
    },
    "1119": {
      "op": "DUP2"
    },
    "1120": {
      "op": "GT"
    },
    "1121": {
      "op": "ISZERO"
    },
    "1122": {
      "op": "PUSH2",
      "value": "0x46A"
    },
    "1125": {
      "op": "JUMPI"
    },
    "1126": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1128": {
      "op": "DUP1"
    },
    "1129": {
      "op": "REVERT"
    },
    "1130": {
      "op": "JUMPDEST"
    },
    "1131": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1132": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1133": {
      "op": "DUP4"
    },
    "1134": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1136": {
      "op": "DUP3"
    },
    "1137": {
      "op": "ADD"
    },
    "1138": {
      "op": "GT"
    },
    "1139": {
      "op": "ISZERO"
    },
    "1140": {
      "op": "PUSH2",
      "value": "0x47C"
    },
    "1143": {
      "op": "JUMPI"
    },
    "1144": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1146": {
      "op": "DUP1"
    },
    "1147": {
      "op": "REVERT"
    },
    "1148": {
      "op": "JUMPDEST"
    },
    "1149": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1150": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1151": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1152": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1154": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1155": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1156": {
      "op": "DUP5"
    },
    "1157": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1159": {
      "op": "DUP4"
    },
    "1160": {
      "op": "MUL"
    },
    "1161": {
      "op": "DUP5"
    },
    "1162": {
      "op": "ADD"
    },
    "1163": {
      "op": "GT"
    },
    "1164": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1166": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1168": {
      "op": "SHL"
    },
    "1169": {
      "op": "DUP4"
    },
    "1170": {
      "op": "GT"
    },
    "1171": {
      "op": "OR"
    },
    "1172": {
      "op": "ISZERO"
    },
    "1173": {
      "op": "PUSH2",
      "value": "0x49D"
    },
    "1176": {
      "op": "JUMPI"
    },
    "1177": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1179": {
      "op": "DUP1"
    },
    "1180": {
      "op": "REVERT"
    },
    "1181": {
      "op": "JUMPDEST"
    },
    "1182": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1183": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1184": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1185": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1186": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1188": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1189": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1191": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1192": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1193": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "1194": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "1195": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1197": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1198": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1200": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1201": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1202": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1203": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1204": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1206": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1207": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1208": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1209": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1210": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1211": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1212": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1213": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1214": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1215": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1217": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1218": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1219": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1220": {
      "op": "DUP1"
    },
    "1221": {
      "op": "DUP3"
    },
    "1222": {
      "op": "DUP5"
    },
    "1223": {
      "op": "CALLDATACOPY"
    },
    "1224": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1226": {
      "op": "SWAP3"
    },
    "1227": {
      "op": "ADD"
    },
    "1228": {
      "op": "SWAP2"
    },
    "1229": {
      "op": "SWAP1"
    },
    "1230": {
      "op": "SWAP2"
    },
    "1231": {
      "op": "MSTORE"
    },
    "1232": {
      "op": "POP"
    },
    "1233": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1234": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "1235": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1236": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1237": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1239": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1240": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1241": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1242": {
      "op": "POP"
    },
    "1243": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1244": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1245": {
      "op": "POP"
    },
    "1246": {
      "op": "POP"
    },
    "1247": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1249": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1251": {
      "op": "SHL"
    },
    "1252": {
      "op": "DUP2"
    },
    "1253": {
      "op": "GT"
    },
    "1254": {
      "op": "ISZERO"
    },
    "1255": {
      "op": "PUSH2",
      "value": "0x4EF"
    },
    "1258": {
      "op": "JUMPI"
    },
    "1259": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1261": {
      "op": "DUP1"
    },
    "1262": {
      "op": "REVERT"
    },
    "1263": {
      "op": "JUMPDEST"
    },
    "1264": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1265": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1266": {
      "op": "DUP4"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1269": {
      "op": "DUP3"
    },
    "1270": {
      "op": "ADD"
    },
    "1271": {
      "op": "GT"
    },
    "1272": {
      "op": "ISZERO"
    },
    "1273": {
      "op": "PUSH2",
      "value": "0x501"
    },
    "1276": {
      "op": "JUMPI"
    },
    "1277": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1279": {
      "op": "DUP1"
    },
    "1280": {
      "op": "REVERT"
    },
    "1281": {
      "op": "JUMPDEST"
    },
    "1282": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1283": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1284": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1285": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1287": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1288": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1289": {
      "op": "DUP5"
    },
    "1290": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1292": {
      "op": "DUP4"
    },
    "1293": {
      "op": "MUL"
    },
    "1294": {
      "op": "DUP5"
    },
    "1295": {
      "op": "ADD"
    },
    "1296": {
      "op": "GT"
    },
    "1297": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1299": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1301": {
      "op": "SHL"
    },
    "1302": {
      "op": "DUP4"
    },
    "1303": {
      "op": "GT"
    },
    "1304": {
      "op": "OR"
    },
    "1305": {
      "op": "ISZERO"
    },
    "1306": {
      "op": "PUSH2",
      "value": "0x522"
    },
    "1309": {
      "op": "JUMPI"
    },
    "1310": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1312": {
      "op": "DUP1"
    },
    "1313": {
      "op": "REVERT"
    },
    "1314": {
      "op": "JUMPDEST"
    },
    "1315": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1316": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1317": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1318": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1319": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1321": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1322": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1324": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1325": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1326": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DIV",
      "path": "1"
    },
    "1327": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MUL",
      "path": "1"
    },
    "1328": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1330": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1331": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1333": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1334": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1335": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1336": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1337": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1339": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1340": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1341": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1342": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1343": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1344": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1345": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1346": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1347": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1348": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1350": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "ADD",
      "path": "1"
    },
    "1351": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1352": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1353": {
      "op": "DUP1"
    },
    "1354": {
      "op": "DUP3"
    },
    "1355": {
      "op": "DUP5"
    },
    "1356": {
      "op": "CALLDATACOPY"
    },
    "1357": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1359": {
      "op": "SWAP3"
    },
    "1360": {
      "op": "ADD"
    },
    "1361": {
      "op": "SWAP2"
    },
    "1362": {
      "op": "SWAP1"
    },
    "1363": {
      "op": "SWAP2"
    },
    "1364": {
      "op": "MSTORE"
    },
    "1365": {
      "op": "POP"
    },
    "1366": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1367": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "1368": {
      "op": "POP"
    },
    "1369": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6F6"
    },
    "1372": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1373": {
      "op": "POP"
    },
    "1374": {
      "op": "POP"
    },
    "1375": {
      "op": "POP"
    },
    "1376": {
      "op": "POP"
    },
    "1377": {
      "op": "POP"
    },
    "1378": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        3293,
        7201
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1379": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1380": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "STOP",
      "path": "1"
    },
    "1381": {
      "offset": [
        1090,
        1140
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1382": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x56D"
    },
    "1385": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10E8"
    },
    "1388": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        1090,
        1140
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1389": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1390": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1392": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1393": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1394": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1395": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1396": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1397": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1398": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1399": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1400": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1401": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "SUB",
      "path": "1"
    },
    "1402": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1404": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "ADD",
      "path": "1"
    },
    "1405": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1406": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "RETURN",
      "path": "1"
    },
    "1407": {
      "offset": [
        973,
        1002
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1408": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x587"
    },
    "1411": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x110C"
    },
    "1414": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        973,
        1002
      ],
      "op": "JUMP",
      "path": "15"
    },
    "1415": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1416": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1418": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "DUP1",
      "path": "15"
    },
    "1419": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "1420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1422": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1424": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1426": {
      "op": "SHL"
    },
    "1427": {
      "op": "SUB"
    },
    "1428": {
      "offset": [
        973,
        1002
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1429": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "1430": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "AND",
      "path": "15"
    },
    "1431": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "DUP3",
      "path": "15"
    },
    "1432": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "1433": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "1434": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1435": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "DUP2",
      "path": "15"
    },
    "1436": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1437": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "SUB",
      "path": "15"
    },
    "1438": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1440": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "ADD",
      "path": "15"
    },
    "1441": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1442": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "RETURN",
      "path": "15"
    },
    "1443": {
      "offset": [
        1048,
        1084
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1444": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1048,
        1084
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x56D"
    },
    "1447": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1048,
        1084
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x111B"
    },
    "1450": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        1048,
        1084
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1451": {
      "offset": [
        980,
        1042
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1452": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5B3"
    },
    "1455": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x113F"
    },
    "1458": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        980,
        1042
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1459": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1460": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1462": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1463": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1464": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1465": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1467": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1468": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "GT",
      "path": "1"
    },
    "1469": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1470": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5C3"
    },
    "1473": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1474": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "INVALID",
      "path": "1"
    },
    "1475": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1476": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "1478": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "AND",
      "path": "1"
    },
    "1479": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1480": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1481": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1483": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "ADD",
      "path": "1"
    },
    "1484": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1485": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "POP",
      "path": "1"
    },
    "1486": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "POP",
      "path": "1"
    },
    "1487": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1489": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1490": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1491": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1492": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "SUB",
      "path": "1"
    },
    "1493": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1494": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "RETURN",
      "path": "1"
    },
    "1495": {
      "offset": [
        1254,
        1304
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1496": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x56D"
    },
    "1499": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1501": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1502": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "1503": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "SUB",
      "path": "1"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1506": {
      "op": "DUP2"
    },
    "1507": {
      "op": "LT"
    },
    "1508": {
      "op": "ISZERO"
    },
    "1509": {
      "op": "PUSH2",
      "value": "0x5ED"
    },
    "1512": {
      "op": "JUMPI"
    },
    "1513": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1515": {
      "op": "DUP1"
    },
    "1516": {
      "op": "REVERT"
    },
    "1517": {
      "op": "JUMPDEST"
    },
    "1518": {
      "op": "POP"
    },
    "1519": {
      "offset": [
        1254,
        1304
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1520": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1522": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1524": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1526": {
      "op": "SHL"
    },
    "1527": {
      "op": "SUB"
    },
    "1528": {
      "offset": [
        1254,
        1304
      ],
      "op": "AND",
      "path": "1"
    },
    "1529": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1163"
    },
    "1532": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        1254,
        1304
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1533": {
      "offset": [
        1310,
        1358
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1534": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x61A"
    },
    "1537": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1539": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1540": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "1541": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SUB",
      "path": "1"
    },
    "1542": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1544": {
      "op": "DUP2"
    },
    "1545": {
      "op": "LT"
    },
    "1546": {
      "op": "ISZERO"
    },
    "1547": {
      "op": "PUSH2",
      "value": "0x613"
    },
    "1550": {
      "op": "JUMPI"
    },
    "1551": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1553": {
      "op": "DUP1"
    },
    "1554": {
      "op": "REVERT"
    },
    "1555": {
      "op": "JUMPDEST"
    },
    "1556": {
      "op": "POP"
    },
    "1557": {
      "offset": [
        1310,
        1358
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1558": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1175"
    },
    "1561": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        1310,
        1358
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1562": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1563": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1565": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1566": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1567": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1568": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1569": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1570": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1571": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1572": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1573": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1574": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1575": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1576": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SUB",
      "path": "1"
    },
    "1577": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1579": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "ADD",
      "path": "1"
    },
    "1580": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1581": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "RETURN",
      "path": "1"
    },
    "1582": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1348,
        1485
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1583": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1348,
        1485
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x563"
    },
    "1586": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1348,
        1485
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x118A"
    },
    "1589": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1348,
        1485
      ],
      "op": "JUMP",
      "path": "21"
    },
    "1590": {
      "fn": "Ownable.owner",
      "offset": [
        660,
        737
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1591": {
      "fn": "Ownable.owner",
      "offset": [
        660,
        737
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x587"
    },
    "1594": {
      "fn": "Ownable.owner",
      "offset": [
        660,
        737
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x11E5"
    },
    "1597": {
      "fn": "Ownable.owner",
      "jump": "i",
      "offset": [
        660,
        737
      ],
      "op": "JUMP",
      "path": "21"
    },
    "1598": {
      "fn": "Ownable.isOwner",
      "offset": [
        980,
        1070
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1599": {
      "fn": "Ownable.isOwner",
      "offset": [
        980,
        1070
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x61A"
    },
    "1602": {
      "fn": "Ownable.isOwner",
      "offset": [
        980,
        1070
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x11F4"
    },
    "1605": {
      "fn": "Ownable.isOwner",
      "jump": "i",
      "offset": [
        980,
        1070
      ],
      "op": "JUMP",
      "path": "21"
    },
    "1606": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1607": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x563"
    },
    "1610": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1612": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1613": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "1614": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "SUB",
      "path": "1"
    },
    "1615": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1617": {
      "op": "DUP2"
    },
    "1618": {
      "op": "LT"
    },
    "1619": {
      "op": "ISZERO"
    },
    "1620": {
      "op": "PUSH2",
      "value": "0x65C"
    },
    "1623": {
      "op": "JUMPI"
    },
    "1624": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1626": {
      "op": "DUP1"
    },
    "1627": {
      "op": "REVERT"
    },
    "1628": {
      "op": "JUMPDEST"
    },
    "1629": {
      "op": "POP"
    },
    "1630": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1631": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1633": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1635": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1637": {
      "op": "SHL"
    },
    "1638": {
      "op": "SUB"
    },
    "1639": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "AND",
      "path": "1"
    },
    "1640": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1205"
    },
    "1643": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        8045,
        8639
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1644": {
      "offset": [
        1146,
        1199
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1645": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1146,
        1199
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x56D"
    },
    "1648": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1146,
        1199
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12C8"
    },
    "1651": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        1146,
        1199
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1652": {
      "offset": [
        859,
        880
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1653": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        859,
        880
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x587"
    },
    "1656": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        859,
        880
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x12EC"
    },
    "1659": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        859,
        880
      ],
      "op": "JUMP",
      "path": "15"
    },
    "1660": {
      "offset": [
        937,
        974
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1661": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        937,
        974
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x587"
    },
    "1664": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        937,
        974
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12FB"
    },
    "1667": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        937,
        974
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1668": {
      "offset": [
        1132,
        1154
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1669": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x68C"
    },
    "1672": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x131F"
    },
    "1675": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        1132,
        1154
      ],
      "op": "JUMP",
      "path": "15"
    },
    "1676": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1677": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1679": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "DUP1",
      "path": "15"
    },
    "1680": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "1681": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0xFF"
    },
    "1683": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1684": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "1685": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "AND",
      "path": "15"
    },
    "1686": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "DUP3",
      "path": "15"
    },
    "1687": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "1688": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "1689": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1690": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "DUP2",
      "path": "15"
    },
    "1691": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1692": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "SUB",
      "path": "15"
    },
    "1693": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1695": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "ADD",
      "path": "15"
    },
    "1696": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1697": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "RETURN",
      "path": "15"
    },
    "1698": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1699": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x563"
    },
    "1702": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1704": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1705": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "1706": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "SUB",
      "path": "1"
    },
    "1707": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1709": {
      "op": "DUP2"
    },
    "1710": {
      "op": "LT"
    },
    "1711": {
      "op": "ISZERO"
    },
    "1712": {
      "op": "PUSH2",
      "value": "0x6B8"
    },
    "1715": {
      "op": "JUMPI"
    },
    "1716": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1718": {
      "op": "DUP1"
    },
    "1719": {
      "op": "REVERT"
    },
    "1720": {
      "op": "JUMPDEST"
    },
    "1721": {
      "op": "POP"
    },
    "1722": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1723": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1725": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1727": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1729": {
      "op": "SHL"
    },
    "1730": {
      "op": "SUB"
    },
    "1731": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "AND",
      "path": "1"
    },
    "1732": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x132F"
    },
    "1735": {
      "fn": "Adjudicator.finishUpgrade",
      "jump": "i",
      "offset": [
        8743,
        9170
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1736": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1737": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x563"
    },
    "1740": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x4"
    },
    "1742": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1743": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "CALLDATASIZE",
      "path": "21"
    },
    "1744": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "SUB",
      "path": "21"
    },
    "1745": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1747": {
      "op": "DUP2"
    },
    "1748": {
      "op": "LT"
    },
    "1749": {
      "op": "ISZERO"
    },
    "1750": {
      "op": "PUSH2",
      "value": "0x6DE"
    },
    "1753": {
      "op": "JUMPI"
    },
    "1754": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1756": {
      "op": "DUP1"
    },
    "1757": {
      "op": "REVERT"
    },
    "1758": {
      "op": "JUMPDEST"
    },
    "1759": {
      "op": "POP"
    },
    "1760": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "CALLDATALOAD",
      "path": "21"
    },
    "1761": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1763": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1765": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1767": {
      "op": "SHL"
    },
    "1768": {
      "op": "SUB"
    },
    "1769": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "AND",
      "path": "21"
    },
    "1770": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x13AB"
    },
    "1773": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1656,
        1763
      ],
      "op": "JUMP",
      "path": "21"
    },
    "1774": {
      "offset": [
        1205,
        1247
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1775": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1205,
        1247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x56D"
    },
    "1778": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1205,
        1247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13C8"
    },
    "1781": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1205,
        1247
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1782": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1783": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3714,
        3736
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1785": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3739,
        3835
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7D2"
    },
    "1788": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3792,
        3805
      ],
      "op": "DUP10",
      "path": "1"
    },
    "1789": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3807,
        3818
      ],
      "op": "DUP10",
      "path": "1"
    },
    "1790": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1792": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1793": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1795": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "ADD",
      "path": "1"
    },
    "1796": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1797": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1798": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1799": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1800": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1801": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1803": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "ADD",
      "path": "1"
    },
    "1804": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1805": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1806": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1807": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1808": {
      "op": "JUMPDEST"
    },
    "1809": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1811": {
      "op": "DUP4"
    },
    "1812": {
      "op": "LT"
    },
    "1813": {
      "op": "PUSH2",
      "value": "0x72F"
    },
    "1816": {
      "op": "JUMPI"
    },
    "1817": {
      "op": "DUP1"
    },
    "1818": {
      "op": "MLOAD"
    },
    "1819": {
      "op": "DUP3"
    },
    "1820": {
      "op": "MSTORE"
    },
    "1821": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1823": {
      "op": "NOT"
    },
    "1824": {
      "op": "SWAP1"
    },
    "1825": {
      "op": "SWAP3"
    },
    "1826": {
      "op": "ADD"
    },
    "1827": {
      "op": "SWAP2"
    },
    "1828": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1830": {
      "op": "SWAP2"
    },
    "1831": {
      "op": "DUP3"
    },
    "1832": {
      "op": "ADD"
    },
    "1833": {
      "op": "SWAP2"
    },
    "1834": {
      "op": "ADD"
    },
    "1835": {
      "op": "PUSH2",
      "value": "0x710"
    },
    "1838": {
      "op": "JUMP"
    },
    "1839": {
      "op": "JUMPDEST"
    },
    "1840": {
      "op": "MLOAD"
    },
    "1841": {
      "op": "DUP2"
    },
    "1842": {
      "op": "MLOAD"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1845": {
      "op": "SWAP4"
    },
    "1846": {
      "op": "DUP5"
    },
    "1847": {
      "op": "SUB"
    },
    "1848": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "1851": {
      "op": "EXP"
    },
    "1852": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1854": {
      "op": "NOT"
    },
    "1855": {
      "op": "ADD"
    },
    "1856": {
      "op": "DUP1"
    },
    "1857": {
      "op": "NOT"
    },
    "1858": {
      "op": "SWAP1"
    },
    "1859": {
      "op": "SWAP3"
    },
    "1860": {
      "op": "AND"
    },
    "1861": {
      "op": "SWAP2"
    },
    "1862": {
      "op": "AND"
    },
    "1863": {
      "op": "OR"
    },
    "1864": {
      "op": "SWAP1"
    },
    "1865": {
      "op": "MSTORE"
    },
    "1866": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1867": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1868": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1869": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1870": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1871": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "ADD",
      "path": "1"
    },
    "1872": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1873": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1874": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "ADD",
      "path": "1"
    },
    "1875": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1876": {
      "op": "POP"
    },
    "1877": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1878": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1879": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1880": {
      "op": "JUMPDEST"
    },
    "1881": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1883": {
      "op": "DUP4"
    },
    "1884": {
      "op": "LT"
    },
    "1885": {
      "op": "PUSH2",
      "value": "0x777"
    },
    "1888": {
      "op": "JUMPI"
    },
    "1889": {
      "op": "DUP1"
    },
    "1890": {
      "op": "MLOAD"
    },
    "1891": {
      "op": "DUP3"
    },
    "1892": {
      "op": "MSTORE"
    },
    "1893": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1895": {
      "op": "NOT"
    },
    "1896": {
      "op": "SWAP1"
    },
    "1897": {
      "op": "SWAP3"
    },
    "1898": {
      "op": "ADD"
    },
    "1899": {
      "op": "SWAP2"
    },
    "1900": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1902": {
      "op": "SWAP2"
    },
    "1903": {
      "op": "DUP3"
    },
    "1904": {
      "op": "ADD"
    },
    "1905": {
      "op": "SWAP2"
    },
    "1906": {
      "op": "ADD"
    },
    "1907": {
      "op": "PUSH2",
      "value": "0x758"
    },
    "1910": {
      "op": "JUMP"
    },
    "1911": {
      "op": "JUMPDEST"
    },
    "1912": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1914": {
      "op": "DUP4"
    },
    "1915": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1917": {
      "op": "SUB"
    },
    "1918": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "1921": {
      "op": "EXP"
    },
    "1922": {
      "op": "SUB"
    },
    "1923": {
      "op": "DUP1"
    },
    "1924": {
      "op": "NOT"
    },
    "1925": {
      "op": "DUP3"
    },
    "1926": {
      "op": "MLOAD"
    },
    "1927": {
      "op": "AND"
    },
    "1928": {
      "op": "DUP2"
    },
    "1929": {
      "op": "DUP5"
    },
    "1930": {
      "op": "MLOAD"
    },
    "1931": {
      "op": "AND"
    },
    "1932": {
      "op": "DUP1"
    },
    "1933": {
      "op": "DUP3"
    },
    "1934": {
      "op": "OR"
    },
    "1935": {
      "op": "DUP6"
    },
    "1936": {
      "op": "MSTORE"
    },
    "1937": {
      "op": "POP"
    },
    "1938": {
      "op": "POP"
    },
    "1939": {
      "op": "POP"
    },
    "1940": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "POP",
      "path": "1"
    },
    "1941": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "POP",
      "path": "1"
    },
    "1942": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "POP",
      "path": "1"
    },
    "1943": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1944": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "POP",
      "path": "1"
    },
    "1945": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "ADD",
      "path": "1"
    },
    "1946": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1947": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "POP",
      "path": "1"
    },
    "1948": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "POP",
      "path": "1"
    },
    "1949": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "POP",
      "path": "1"
    },
    "1950": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1952": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1953": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1955": {
      "op": "DUP2"
    },
    "1956": {
      "op": "DUP4"
    },
    "1957": {
      "op": "SUB"
    },
    "1958": {
      "op": "SUB"
    },
    "1959": {
      "op": "DUP2"
    },
    "1960": {
      "op": "MSTORE"
    },
    "1961": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1962": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1964": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3775,
        3819
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1965": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3821,
        3834
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "1998": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3739,
        3761
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13EC"
    },
    "2001": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        3739,
        3835
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2002": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3739,
        3835
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2003": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x0"
    },
    "2005": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2006": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2007": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2008": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3869
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "2010": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2012": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2013": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2015": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2016": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2017": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2018": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3714,
        3835
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2019": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3714,
        3835
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2020": {
      "op": "POP"
    },
    "2021": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "2023": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3854,
        3885
      ],
      "op": "AND",
      "path": "1"
    },
    "2024": {
      "branch": 175,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3853,
        3885
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2025": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x823"
    },
    "2028": {
      "branch": 175,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2029": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2031": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2032": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2036": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2038": {
      "op": "SHL"
    },
    "2039": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2040": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2041": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2043": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "ADD",
      "path": "1"
    },
    "2044": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2045": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2046": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2048": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "ADD",
      "path": "1"
    },
    "2049": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2050": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2051": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "SUB",
      "path": "1"
    },
    "2052": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2053": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2054": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x26"
    },
    "2056": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2057": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2058": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2060": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "ADD",
      "path": "1"
    },
    "2061": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2062": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3603"
    },
    "2065": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x26"
    },
    "2067": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2068": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "CODECOPY",
      "path": "1"
    },
    "2069": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2071": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "ADD",
      "path": "1"
    },
    "2072": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2073": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "POP",
      "path": "1"
    },
    "2074": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "POP",
      "path": "1"
    },
    "2075": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2077": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2078": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2079": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2080": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "SUB",
      "path": "1"
    },
    "2081": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2082": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2083": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3845,
        3928
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2084": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 1,
      "value": "0x0"
    },
    "2086": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2087": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2088": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2089": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3953
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "2091": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2093": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2094": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2096": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2097": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3969
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2098": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2099": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3976
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2100": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2102": {
      "op": "NOT"
    },
    "2103": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3976
      ],
      "op": "AND",
      "path": "1"
    },
    "2104": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3972,
        3976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2106": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3976
      ],
      "op": "OR",
      "path": "1"
    },
    "2107": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3976
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2108": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3938,
        3976
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2109": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4059,
        4140
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x847"
    },
    "2112": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4095,
        4108
      ],
      "op": "DUP11",
      "path": "1"
    },
    "2113": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4110,
        4121
      ],
      "op": "DUP11",
      "path": "1"
    },
    "2114": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4123,
        4139
      ],
      "op": "DUP6",
      "path": "1"
    },
    "2115": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4059,
        4094
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1544"
    },
    "2118": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        4059,
        4140
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2119": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4059,
        4140
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2120": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x40"
    },
    "2122": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2123": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2124": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2125": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2126": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2127": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2128": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2129": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2130": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2131": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4037,
        4140
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2132": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4037,
        4140
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2133": {
      "op": "POP"
    },
    "2134": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4186,
        4196
      ],
      "op": "CALLER",
      "path": "1"
    },
    "2135": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4186,
        4196
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2136": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4170,
        4184
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2137": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4170,
        4184
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2138": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x14C7C3AEAED5D9DE50669529F936D80FF48AF1F52BEB8447437689CB298131A8"
    },
    "2171": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2172": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2173": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2174": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2175": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "SUB",
      "path": "1"
    },
    "2176": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2178": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "ADD",
      "path": "1"
    },
    "2179": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2180": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4155,
        4213
      ],
      "op": "LOG3",
      "path": "1"
    },
    "2181": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4291,
        4357
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 3,
      "value": "0x88D"
    },
    "2184": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4340,
        4356
      ],
      "op": "DUP6",
      "path": "1"
    },
    "2185": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4291,
        4339
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1F71"
    },
    "2188": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        4291,
        4357
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2189": {
      "branch": 176,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4291,
        4357
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2190": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8DE"
    },
    "2193": {
      "branch": 176,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2194": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2196": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2197": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2198": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2202": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2204": {
      "op": "SHL"
    },
    "2205": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2206": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2207": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2209": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2211": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2212": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "ADD",
      "path": "1"
    },
    "2213": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2214": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1E"
    },
    "2216": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "2218": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2219": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "ADD",
      "path": "1"
    },
    "2220": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2221": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x5374616B65722773207075626C6963206B657920697320696E76616C69640000"
    },
    "2254": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x44"
    },
    "2256": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2257": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "ADD",
      "path": "1"
    },
    "2258": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2259": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2260": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2261": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2262": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2263": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2264": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "SUB",
      "path": "1"
    },
    "2265": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "2267": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "ADD",
      "path": "1"
    },
    "2268": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2269": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2270": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4283,
        4408
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2271": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4426,
        4495
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 4,
      "value": "0x8E7"
    },
    "2274": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4475,
        4494
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2275": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4426,
        4474
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1F71"
    },
    "2278": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        4426,
        4495
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2279": {
      "branch": 177,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4426,
        4495
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2280": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x922"
    },
    "2283": {
      "branch": 177,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2284": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2286": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2287": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2291": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2293": {
      "op": "SHL"
    },
    "2294": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2295": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2296": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2298": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "ADD",
      "path": "1"
    },
    "2299": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2300": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2301": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2303": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "ADD",
      "path": "1"
    },
    "2304": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2305": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2306": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "SUB",
      "path": "1"
    },
    "2307": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2308": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2309": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x21"
    },
    "2311": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2312": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2313": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2315": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "ADD",
      "path": "1"
    },
    "2316": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2317": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x38CA"
    },
    "2320": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x21"
    },
    "2322": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2323": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "CODECOPY",
      "path": "1"
    },
    "2324": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2326": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "ADD",
      "path": "1"
    },
    "2327": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2328": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "POP",
      "path": "1"
    },
    "2329": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "POP",
      "path": "1"
    },
    "2330": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2332": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2333": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2334": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2335": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "SUB",
      "path": "1"
    },
    "2336": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2337": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2338": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4418,
        4549
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2339": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4560,
        4609
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x92A"
    },
    "2342": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4560,
        4609
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3393"
    },
    "2345": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        4560,
        4609
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2346": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4560,
        4609
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2347": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4612,
        4648
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x933"
    },
    "2350": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4612,
        4628
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2351": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4612,
        4646
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1FD1"
    },
    "2354": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        4612,
        4648
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2355": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4612,
        4648
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2356": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4560,
        4648
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2357": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4560,
        4648
      ],
      "op": "POP",
      "path": "1"
    },
    "2358": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4713,
        4905
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 5,
      "value": "0x9F8"
    },
    "2361": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4755,
        4766
      ],
      "op": "DUP11",
      "path": "1"
    },
    "2362": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4801,
        4816
      ],
      "op": "DUP11",
      "path": "1"
    },
    "2363": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4825
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2364": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4835
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2C0"
    },
    "2367": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4835
      ],
      "op": "ADD",
      "path": "1"
    },
    "2368": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4835
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2369": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4836,
        4837
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2371": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "2373": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2374": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "LT",
      "path": "1"
    },
    "2375": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x94C"
    },
    "2378": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2379": {
      "dev": "Index out of range",
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "INVALID",
      "path": "1"
    },
    "2380": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2381": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "BYTE",
      "path": "1"
    },
    "2382": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xF8"
    },
    "2384": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4818,
        4838
      ],
      "op": "SHL",
      "path": "1"
    },
    "2385": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2387": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2388": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2390": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "ADD",
      "path": "1"
    },
    "2391": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2392": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2393": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2394": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2395": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2396": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2398": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "ADD",
      "path": "1"
    },
    "2399": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2400": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2401": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2402": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2403": {
      "op": "JUMPDEST"
    },
    "2404": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2406": {
      "op": "DUP4"
    },
    "2407": {
      "op": "LT"
    },
    "2408": {
      "op": "PUSH2",
      "value": "0x982"
    },
    "2411": {
      "op": "JUMPI"
    },
    "2412": {
      "op": "DUP1"
    },
    "2413": {
      "op": "MLOAD"
    },
    "2414": {
      "op": "DUP3"
    },
    "2415": {
      "op": "MSTORE"
    },
    "2416": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2418": {
      "op": "NOT"
    },
    "2419": {
      "op": "SWAP1"
    },
    "2420": {
      "op": "SWAP3"
    },
    "2421": {
      "op": "ADD"
    },
    "2422": {
      "op": "SWAP2"
    },
    "2423": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2425": {
      "op": "SWAP2"
    },
    "2426": {
      "op": "DUP3"
    },
    "2427": {
      "op": "ADD"
    },
    "2428": {
      "op": "SWAP2"
    },
    "2429": {
      "op": "ADD"
    },
    "2430": {
      "op": "PUSH2",
      "value": "0x963"
    },
    "2433": {
      "op": "JUMP"
    },
    "2434": {
      "op": "JUMPDEST"
    },
    "2435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2437": {
      "op": "DUP4"
    },
    "2438": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2440": {
      "op": "SUB"
    },
    "2441": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2444": {
      "op": "EXP"
    },
    "2445": {
      "op": "SUB"
    },
    "2446": {
      "op": "DUP1"
    },
    "2447": {
      "op": "NOT"
    },
    "2448": {
      "op": "DUP3"
    },
    "2449": {
      "op": "MLOAD"
    },
    "2450": {
      "op": "AND"
    },
    "2451": {
      "op": "DUP2"
    },
    "2452": {
      "op": "DUP5"
    },
    "2453": {
      "op": "MLOAD"
    },
    "2454": {
      "op": "AND"
    },
    "2455": {
      "op": "DUP1"
    },
    "2456": {
      "op": "DUP3"
    },
    "2457": {
      "op": "OR"
    },
    "2458": {
      "op": "DUP6"
    },
    "2459": {
      "op": "MSTORE"
    },
    "2460": {
      "op": "POP"
    },
    "2461": {
      "op": "POP"
    },
    "2462": {
      "op": "POP"
    },
    "2463": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "POP",
      "path": "1"
    },
    "2464": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "POP",
      "path": "1"
    },
    "2465": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "POP",
      "path": "1"
    },
    "2466": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2467": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "POP",
      "path": "1"
    },
    "2468": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "ADD",
      "path": "1"
    },
    "2469": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2470": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2472": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2474": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2476": {
      "op": "SHL"
    },
    "2477": {
      "op": "SUB"
    },
    "2478": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "NOT",
      "path": "1"
    },
    "2479": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "AND",
      "path": "1"
    },
    "2480": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2482": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2484": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2486": {
      "op": "SHL"
    },
    "2487": {
      "op": "SUB"
    },
    "2488": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "NOT",
      "path": "1"
    },
    "2489": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "AND",
      "path": "1"
    },
    "2490": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2491": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2492": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2494": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "ADD",
      "path": "1"
    },
    "2495": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2496": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "POP",
      "path": "1"
    },
    "2497": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "POP",
      "path": "1"
    },
    "2498": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "POP",
      "path": "1"
    },
    "2499": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2501": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2502": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2504": {
      "op": "DUP2"
    },
    "2505": {
      "op": "DUP4"
    },
    "2506": {
      "op": "SUB"
    },
    "2507": {
      "op": "SUB"
    },
    "2508": {
      "op": "DUP2"
    },
    "2509": {
      "op": "MSTORE"
    },
    "2510": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2511": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2513": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4784,
        4839
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2514": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4857,
        4873
      ],
      "op": "DUP9",
      "path": "1"
    },
    "2515": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4891,
        4904
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "2548": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4713,
        4737
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21AF"
    },
    "2551": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        4713,
        4905
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2552": {
      "branch": 178,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4713,
        4905
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2553": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA49"
    },
    "2556": {
      "branch": 178,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2557": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2559": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2560": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2561": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2565": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2567": {
      "op": "SHL"
    },
    "2568": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2569": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2570": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2572": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2574": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2575": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "ADD",
      "path": "1"
    },
    "2576": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2577": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1A"
    },
    "2579": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "2581": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2582": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "ADD",
      "path": "1"
    },
    "2583": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2584": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x4346726167207369676E617475726520697320696E76616C6964000000000000"
    },
    "2617": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x44"
    },
    "2619": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2620": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "ADD",
      "path": "1"
    },
    "2621": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2622": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2623": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2624": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2625": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2626": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2627": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "SUB",
      "path": "1"
    },
    "2628": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "2630": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "ADD",
      "path": "1"
    },
    "2631": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2632": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2633": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        4705,
        4961
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2634": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5074,
        5117
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA51"
    },
    "2637": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5074,
        5117
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3457"
    },
    "2640": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        5074,
        5117
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2641": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5074,
        5117
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2642": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5120,
        5147
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA5A"
    },
    "2645": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5120,
        5131
      ],
      "op": "DUP12",
      "path": "1"
    },
    "2646": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5120,
        5145
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21F7"
    },
    "2649": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        5120,
        5147
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2650": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5120,
        5147
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2651": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5074,
        5147
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2652": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5074,
        5147
      ],
      "op": "POP",
      "path": "1"
    },
    "2653": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5165,
        5365
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 6,
      "value": "0xB27"
    },
    "2656": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5207,
        5221
      ],
      "op": "DUP10",
      "path": "1"
    },
    "2657": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5256,
        5261
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2658": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5256,
        5267
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2660": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5256,
        5267
      ],
      "op": "ADD",
      "path": "1"
    },
    "2661": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5256,
        5267
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2662": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5256,
        5276
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xC0"
    },
    "2664": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5256,
        5276
      ],
      "op": "ADD",
      "path": "1"
    },
    "2665": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5256,
        5276
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2666": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5285
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2667": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5295
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2C0"
    },
    "2670": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5295
      ],
      "op": "ADD",
      "path": "1"
    },
    "2671": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5295
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2672": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5296,
        5297
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2674": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "2676": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2677": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "LT",
      "path": "1"
    },
    "2678": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA7B"
    },
    "2681": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2682": {
      "dev": "Index out of range",
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "INVALID",
      "path": "1"
    },
    "2683": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2684": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "BYTE",
      "path": "1"
    },
    "2685": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xF8"
    },
    "2687": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5278,
        5298
      ],
      "op": "SHL",
      "path": "1"
    },
    "2688": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2690": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2691": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2693": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "ADD",
      "path": "1"
    },
    "2694": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2695": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2696": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2697": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2698": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2699": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2701": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "ADD",
      "path": "1"
    },
    "2702": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2703": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2704": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2705": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2706": {
      "op": "JUMPDEST"
    },
    "2707": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2709": {
      "op": "DUP4"
    },
    "2710": {
      "op": "LT"
    },
    "2711": {
      "op": "PUSH2",
      "value": "0xAB1"
    },
    "2714": {
      "op": "JUMPI"
    },
    "2715": {
      "op": "DUP1"
    },
    "2716": {
      "op": "MLOAD"
    },
    "2717": {
      "op": "DUP3"
    },
    "2718": {
      "op": "MSTORE"
    },
    "2719": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2721": {
      "op": "NOT"
    },
    "2722": {
      "op": "SWAP1"
    },
    "2723": {
      "op": "SWAP3"
    },
    "2724": {
      "op": "ADD"
    },
    "2725": {
      "op": "SWAP2"
    },
    "2726": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2728": {
      "op": "SWAP2"
    },
    "2729": {
      "op": "DUP3"
    },
    "2730": {
      "op": "ADD"
    },
    "2731": {
      "op": "SWAP2"
    },
    "2732": {
      "op": "ADD"
    },
    "2733": {
      "op": "PUSH2",
      "value": "0xA92"
    },
    "2736": {
      "op": "JUMP"
    },
    "2737": {
      "op": "JUMPDEST"
    },
    "2738": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2740": {
      "op": "DUP4"
    },
    "2741": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2743": {
      "op": "SUB"
    },
    "2744": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2747": {
      "op": "EXP"
    },
    "2748": {
      "op": "SUB"
    },
    "2749": {
      "op": "DUP1"
    },
    "2750": {
      "op": "NOT"
    },
    "2751": {
      "op": "DUP3"
    },
    "2752": {
      "op": "MLOAD"
    },
    "2753": {
      "op": "AND"
    },
    "2754": {
      "op": "DUP2"
    },
    "2755": {
      "op": "DUP5"
    },
    "2756": {
      "op": "MLOAD"
    },
    "2757": {
      "op": "AND"
    },
    "2758": {
      "op": "DUP1"
    },
    "2759": {
      "op": "DUP3"
    },
    "2760": {
      "op": "OR"
    },
    "2761": {
      "op": "DUP6"
    },
    "2762": {
      "op": "MSTORE"
    },
    "2763": {
      "op": "POP"
    },
    "2764": {
      "op": "POP"
    },
    "2765": {
      "op": "POP"
    },
    "2766": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "POP",
      "path": "1"
    },
    "2767": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "POP",
      "path": "1"
    },
    "2768": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "POP",
      "path": "1"
    },
    "2769": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2770": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "POP",
      "path": "1"
    },
    "2771": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "ADD",
      "path": "1"
    },
    "2772": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2773": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2775": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2777": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2779": {
      "op": "SHL"
    },
    "2780": {
      "op": "SUB"
    },
    "2781": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "NOT",
      "path": "1"
    },
    "2782": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "AND",
      "path": "1"
    },
    "2783": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2785": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2787": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2789": {
      "op": "SHL"
    },
    "2790": {
      "op": "SUB"
    },
    "2791": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "NOT",
      "path": "1"
    },
    "2792": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "AND",
      "path": "1"
    },
    "2793": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2794": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2795": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2797": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "ADD",
      "path": "1"
    },
    "2798": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2799": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "POP",
      "path": "1"
    },
    "2800": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "POP",
      "path": "1"
    },
    "2801": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "POP",
      "path": "1"
    },
    "2802": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2804": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2805": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2807": {
      "op": "DUP2"
    },
    "2808": {
      "op": "DUP4"
    },
    "2809": {
      "op": "SUB"
    },
    "2810": {
      "op": "SUB"
    },
    "2811": {
      "op": "DUP2"
    },
    "2812": {
      "op": "MSTORE"
    },
    "2813": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2814": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2816": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5239,
        5299
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2817": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5317,
        5333
      ],
      "op": "DUP10",
      "path": "1"
    },
    "2818": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5351,
        5364
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "2851": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5165,
        5189
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21AF"
    },
    "2854": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        5165,
        5365
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2855": {
      "branch": 179,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5165,
        5365
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2856": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB78"
    },
    "2859": {
      "branch": 179,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2860": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2862": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2863": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2864": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2868": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2870": {
      "op": "SHL"
    },
    "2871": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2872": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2873": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2875": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2877": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2878": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "ADD",
      "path": "1"
    },
    "2879": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2880": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x19"
    },
    "2882": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "2884": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2885": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "ADD",
      "path": "1"
    },
    "2886": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2887": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x5461736B207369676E617475726520697320696E76616C696400000000000000"
    },
    "2920": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x44"
    },
    "2922": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2923": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "ADD",
      "path": "1"
    },
    "2924": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2925": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2926": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2927": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2928": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2929": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2930": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "SUB",
      "path": "1"
    },
    "2931": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "2933": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "ADD",
      "path": "1"
    },
    "2934": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2935": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2936": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5157,
        5420
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2937": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5698,
        5700
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2939": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5676,
        5701
      ],
      "op": "DUP8",
      "path": "1"
    },
    "2940": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5676,
        5701
      ],
      "op": "ADD",
      "path": "1"
    },
    "2941": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5670,
        5702
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2942": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5759,
        5776
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2C0"
    },
    "2945": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5759,
        5776
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2946": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5759,
        5776
      ],
      "op": "ADD",
      "path": "1"
    },
    "2947": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5759,
        5776
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2948": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5721,
        5739
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "2950": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5721,
        5739
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2951": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5777,
        5778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2953": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5759,
        5779
      ],
      "op": "BYTE",
      "path": "1"
    },
    "2954": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5759,
        5779
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xF8"
    },
    "2956": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5759,
        5779
      ],
      "op": "SHL",
      "path": "1"
    },
    "2957": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5781,
        5792
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2958": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2960": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2961": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2963": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "ADD",
      "path": "1"
    },
    "2964": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2965": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2968": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2970": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2972": {
      "op": "SHL"
    },
    "2973": {
      "op": "SUB"
    },
    "2974": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "NOT",
      "path": "1"
    },
    "2975": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "AND",
      "path": "1"
    },
    "2976": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2978": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2980": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2982": {
      "op": "SHL"
    },
    "2983": {
      "op": "SUB"
    },
    "2984": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "NOT",
      "path": "1"
    },
    "2985": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "AND",
      "path": "1"
    },
    "2986": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2987": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2988": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2990": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "ADD",
      "path": "1"
    },
    "2991": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2992": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2993": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2994": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2996": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "ADD",
      "path": "1"
    },
    "2997": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2998": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "POP",
      "path": "1"
    },
    "2999": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "POP",
      "path": "1"
    },
    "3000": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "POP",
      "path": "1"
    },
    "3001": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3003": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3004": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3006": {
      "op": "DUP2"
    },
    "3007": {
      "op": "DUP4"
    },
    "3008": {
      "op": "SUB"
    },
    "3009": {
      "op": "SUB"
    },
    "3010": {
      "op": "DUP2"
    },
    "3011": {
      "op": "MSTORE"
    },
    "3012": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3013": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3015": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5742,
        5793
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3016": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5721,
        5793
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3017": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5721,
        5793
      ],
      "op": "POP",
      "path": "1"
    },
    "3018": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5812,
        6230
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 7,
      "value": "0xDB3"
    },
    "3021": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5871,
        5884
      ],
      "op": "DUP15",
      "path": "1"
    },
    "3022": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5919,
        5924
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3023": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5959,
        5982
      ],
      "op": "DUP11",
      "path": "1"
    },
    "3024": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6017,
        6024
      ],
      "op": "DUP8",
      "path": "1"
    },
    "3025": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6017,
        6043
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2A0"
    },
    "3028": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6017,
        6043
      ],
      "op": "ADD",
      "path": "1"
    },
    "3029": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6017,
        6043
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3030": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6086,
        6087
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3032": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6078,
        6088
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3033": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6078,
        6088
      ],
      "op": "SHL",
      "path": "1"
    },
    "3034": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3036": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3037": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3039": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3040": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3041": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP7",
      "path": "1"
    },
    "3042": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3043": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3044": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3045": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3047": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3048": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3049": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3050": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3051": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3052": {
      "op": "JUMPDEST"
    },
    "3053": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3055": {
      "op": "DUP4"
    },
    "3056": {
      "op": "LT"
    },
    "3057": {
      "op": "PUSH2",
      "value": "0xC0B"
    },
    "3060": {
      "op": "JUMPI"
    },
    "3061": {
      "op": "DUP1"
    },
    "3062": {
      "op": "MLOAD"
    },
    "3063": {
      "op": "DUP3"
    },
    "3064": {
      "op": "MSTORE"
    },
    "3065": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3067": {
      "op": "NOT"
    },
    "3068": {
      "op": "SWAP1"
    },
    "3069": {
      "op": "SWAP3"
    },
    "3070": {
      "op": "ADD"
    },
    "3071": {
      "op": "SWAP2"
    },
    "3072": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3074": {
      "op": "SWAP2"
    },
    "3075": {
      "op": "DUP3"
    },
    "3076": {
      "op": "ADD"
    },
    "3077": {
      "op": "SWAP2"
    },
    "3078": {
      "op": "ADD"
    },
    "3079": {
      "op": "PUSH2",
      "value": "0xBEC"
    },
    "3082": {
      "op": "JUMP"
    },
    "3083": {
      "op": "JUMPDEST"
    },
    "3084": {
      "op": "MLOAD"
    },
    "3085": {
      "op": "DUP2"
    },
    "3086": {
      "op": "MLOAD"
    },
    "3087": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3089": {
      "op": "SWAP4"
    },
    "3090": {
      "op": "DUP5"
    },
    "3091": {
      "op": "SUB"
    },
    "3092": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3095": {
      "op": "EXP"
    },
    "3096": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3098": {
      "op": "NOT"
    },
    "3099": {
      "op": "ADD"
    },
    "3100": {
      "op": "DUP1"
    },
    "3101": {
      "op": "NOT"
    },
    "3102": {
      "op": "SWAP1"
    },
    "3103": {
      "op": "SWAP3"
    },
    "3104": {
      "op": "AND"
    },
    "3105": {
      "op": "SWAP2"
    },
    "3106": {
      "op": "AND"
    },
    "3107": {
      "op": "OR"
    },
    "3108": {
      "op": "SWAP1"
    },
    "3109": {
      "op": "MSTORE"
    },
    "3110": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP9",
      "path": "1"
    },
    "3111": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3112": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3113": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3114": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "3115": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3116": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3117": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP9",
      "path": "1"
    },
    "3118": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3119": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3120": {
      "op": "POP"
    },
    "3121": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3122": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3123": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3124": {
      "op": "JUMPDEST"
    },
    "3125": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3127": {
      "op": "DUP4"
    },
    "3128": {
      "op": "LT"
    },
    "3129": {
      "op": "PUSH2",
      "value": "0xC53"
    },
    "3132": {
      "op": "JUMPI"
    },
    "3133": {
      "op": "DUP1"
    },
    "3134": {
      "op": "MLOAD"
    },
    "3135": {
      "op": "DUP3"
    },
    "3136": {
      "op": "MSTORE"
    },
    "3137": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3139": {
      "op": "NOT"
    },
    "3140": {
      "op": "SWAP1"
    },
    "3141": {
      "op": "SWAP3"
    },
    "3142": {
      "op": "ADD"
    },
    "3143": {
      "op": "SWAP2"
    },
    "3144": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3146": {
      "op": "SWAP2"
    },
    "3147": {
      "op": "DUP3"
    },
    "3148": {
      "op": "ADD"
    },
    "3149": {
      "op": "SWAP2"
    },
    "3150": {
      "op": "ADD"
    },
    "3151": {
      "op": "PUSH2",
      "value": "0xC34"
    },
    "3154": {
      "op": "JUMP"
    },
    "3155": {
      "op": "JUMPDEST"
    },
    "3156": {
      "op": "MLOAD"
    },
    "3157": {
      "op": "DUP2"
    },
    "3158": {
      "op": "MLOAD"
    },
    "3159": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3161": {
      "op": "SWAP4"
    },
    "3162": {
      "op": "DUP5"
    },
    "3163": {
      "op": "SUB"
    },
    "3164": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3167": {
      "op": "EXP"
    },
    "3168": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3170": {
      "op": "NOT"
    },
    "3171": {
      "op": "ADD"
    },
    "3172": {
      "op": "DUP1"
    },
    "3173": {
      "op": "NOT"
    },
    "3174": {
      "op": "SWAP1"
    },
    "3175": {
      "op": "SWAP3"
    },
    "3176": {
      "op": "AND"
    },
    "3177": {
      "op": "SWAP2"
    },
    "3178": {
      "op": "AND"
    },
    "3179": {
      "op": "OR"
    },
    "3180": {
      "op": "SWAP1"
    },
    "3181": {
      "op": "MSTORE"
    },
    "3182": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP8",
      "path": "1"
    },
    "3183": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3184": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3185": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3186": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "3187": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3188": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3189": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP8",
      "path": "1"
    },
    "3190": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3191": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3192": {
      "op": "POP"
    },
    "3193": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3194": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3195": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3196": {
      "op": "JUMPDEST"
    },
    "3197": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3199": {
      "op": "DUP4"
    },
    "3200": {
      "op": "LT"
    },
    "3201": {
      "op": "PUSH2",
      "value": "0xC9B"
    },
    "3204": {
      "op": "JUMPI"
    },
    "3205": {
      "op": "DUP1"
    },
    "3206": {
      "op": "MLOAD"
    },
    "3207": {
      "op": "DUP3"
    },
    "3208": {
      "op": "MSTORE"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3211": {
      "op": "NOT"
    },
    "3212": {
      "op": "SWAP1"
    },
    "3213": {
      "op": "SWAP3"
    },
    "3214": {
      "op": "ADD"
    },
    "3215": {
      "op": "SWAP2"
    },
    "3216": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3218": {
      "op": "SWAP2"
    },
    "3219": {
      "op": "DUP3"
    },
    "3220": {
      "op": "ADD"
    },
    "3221": {
      "op": "SWAP2"
    },
    "3222": {
      "op": "ADD"
    },
    "3223": {
      "op": "PUSH2",
      "value": "0xC7C"
    },
    "3226": {
      "op": "JUMP"
    },
    "3227": {
      "op": "JUMPDEST"
    },
    "3228": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3230": {
      "op": "DUP4"
    },
    "3231": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3233": {
      "op": "SUB"
    },
    "3234": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3237": {
      "op": "EXP"
    },
    "3238": {
      "op": "SUB"
    },
    "3239": {
      "op": "DUP1"
    },
    "3240": {
      "op": "NOT"
    },
    "3241": {
      "op": "DUP3"
    },
    "3242": {
      "op": "MLOAD"
    },
    "3243": {
      "op": "AND"
    },
    "3244": {
      "op": "DUP2"
    },
    "3245": {
      "op": "DUP5"
    },
    "3246": {
      "op": "MLOAD"
    },
    "3247": {
      "op": "AND"
    },
    "3248": {
      "op": "DUP1"
    },
    "3249": {
      "op": "DUP3"
    },
    "3250": {
      "op": "OR"
    },
    "3251": {
      "op": "DUP6"
    },
    "3252": {
      "op": "MSTORE"
    },
    "3253": {
      "op": "POP"
    },
    "3254": {
      "op": "POP"
    },
    "3255": {
      "op": "POP"
    },
    "3256": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3257": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3258": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3259": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3260": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3261": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3262": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3263": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3265": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3267": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3269": {
      "op": "SHL"
    },
    "3270": {
      "op": "SUB"
    },
    "3271": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "AND",
      "path": "1"
    },
    "3272": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3274": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3276": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3278": {
      "op": "SHL"
    },
    "3279": {
      "op": "SUB"
    },
    "3280": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "AND",
      "path": "1"
    },
    "3281": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "3283": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SHL",
      "path": "1"
    },
    "3284": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3285": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3286": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x14"
    },
    "3288": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3289": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3290": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3291": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3292": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3294": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "ADD",
      "path": "1"
    },
    "3295": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "3296": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3297": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3298": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3299": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3300": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3301": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "POP",
      "path": "1"
    },
    "3302": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3304": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3305": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3307": {
      "op": "DUP2"
    },
    "3308": {
      "op": "DUP4"
    },
    "3309": {
      "op": "SUB"
    },
    "3310": {
      "op": "SUB"
    },
    "3311": {
      "op": "DUP2"
    },
    "3312": {
      "op": "MSTORE"
    },
    "3313": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3314": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3316": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5854,
        6089
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3317": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6124,
        6138
      ],
      "op": "DUP13",
      "path": "1"
    },
    "3318": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6147
      ],
      "op": "DUP7",
      "path": "1"
    },
    "3319": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6157
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2C0"
    },
    "3322": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6157
      ],
      "op": "ADD",
      "path": "1"
    },
    "3323": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6157
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3324": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6158,
        6159
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "3326": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "3328": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3329": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "LT",
      "path": "1"
    },
    "3330": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD07"
    },
    "3333": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3334": {
      "dev": "Index out of range",
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "INVALID",
      "path": "1"
    },
    "3335": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3336": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "BYTE",
      "path": "1"
    },
    "3337": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xF8"
    },
    "3339": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6140,
        6160
      ],
      "op": "SHL",
      "path": "1"
    },
    "3340": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3342": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3343": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3345": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "ADD",
      "path": "1"
    },
    "3346": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3347": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3348": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3349": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3350": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3351": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3353": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "ADD",
      "path": "1"
    },
    "3354": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3355": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3356": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3357": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3358": {
      "op": "JUMPDEST"
    },
    "3359": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3361": {
      "op": "DUP4"
    },
    "3362": {
      "op": "LT"
    },
    "3363": {
      "op": "PUSH2",
      "value": "0xD3D"
    },
    "3366": {
      "op": "JUMPI"
    },
    "3367": {
      "op": "DUP1"
    },
    "3368": {
      "op": "MLOAD"
    },
    "3369": {
      "op": "DUP3"
    },
    "3370": {
      "op": "MSTORE"
    },
    "3371": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3373": {
      "op": "NOT"
    },
    "3374": {
      "op": "SWAP1"
    },
    "3375": {
      "op": "SWAP3"
    },
    "3376": {
      "op": "ADD"
    },
    "3377": {
      "op": "SWAP2"
    },
    "3378": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3380": {
      "op": "SWAP2"
    },
    "3381": {
      "op": "DUP3"
    },
    "3382": {
      "op": "ADD"
    },
    "3383": {
      "op": "SWAP2"
    },
    "3384": {
      "op": "ADD"
    },
    "3385": {
      "op": "PUSH2",
      "value": "0xD1E"
    },
    "3388": {
      "op": "JUMP"
    },
    "3389": {
      "op": "JUMPDEST"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3392": {
      "op": "DUP4"
    },
    "3393": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3395": {
      "op": "SUB"
    },
    "3396": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3399": {
      "op": "EXP"
    },
    "3400": {
      "op": "SUB"
    },
    "3401": {
      "op": "DUP1"
    },
    "3402": {
      "op": "NOT"
    },
    "3403": {
      "op": "DUP3"
    },
    "3404": {
      "op": "MLOAD"
    },
    "3405": {
      "op": "AND"
    },
    "3406": {
      "op": "DUP2"
    },
    "3407": {
      "op": "DUP5"
    },
    "3408": {
      "op": "MLOAD"
    },
    "3409": {
      "op": "AND"
    },
    "3410": {
      "op": "DUP1"
    },
    "3411": {
      "op": "DUP3"
    },
    "3412": {
      "op": "OR"
    },
    "3413": {
      "op": "DUP6"
    },
    "3414": {
      "op": "MSTORE"
    },
    "3415": {
      "op": "POP"
    },
    "3416": {
      "op": "POP"
    },
    "3417": {
      "op": "POP"
    },
    "3418": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "POP",
      "path": "1"
    },
    "3419": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "POP",
      "path": "1"
    },
    "3420": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "POP",
      "path": "1"
    },
    "3421": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3422": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "POP",
      "path": "1"
    },
    "3423": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "ADD",
      "path": "1"
    },
    "3424": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3425": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3427": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3429": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3431": {
      "op": "SHL"
    },
    "3432": {
      "op": "SUB"
    },
    "3433": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "NOT",
      "path": "1"
    },
    "3434": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "AND",
      "path": "1"
    },
    "3435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3439": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3441": {
      "op": "SHL"
    },
    "3442": {
      "op": "SUB"
    },
    "3443": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "NOT",
      "path": "1"
    },
    "3444": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "AND",
      "path": "1"
    },
    "3445": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3446": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3447": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "3449": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "ADD",
      "path": "1"
    },
    "3450": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3451": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "POP",
      "path": "1"
    },
    "3452": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "POP",
      "path": "1"
    },
    "3453": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "POP",
      "path": "1"
    },
    "3454": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3456": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3457": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3459": {
      "op": "DUP2"
    },
    "3460": {
      "op": "DUP4"
    },
    "3461": {
      "op": "SUB"
    },
    "3462": {
      "op": "SUB"
    },
    "3463": {
      "op": "DUP2"
    },
    "3464": {
      "op": "MSTORE"
    },
    "3465": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3466": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3468": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6107,
        6161
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3469": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6179,
        6198
      ],
      "op": "DUP13",
      "path": "1"
    },
    "3470": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6216,
        6229
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "3503": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5812,
        5836
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21AF"
    },
    "3506": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        5812,
        6230
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3507": {
      "branch": 180,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5812,
        6230
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3508": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDEE"
    },
    "3511": {
      "branch": 180,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3512": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3514": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3515": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3519": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3521": {
      "op": "SHL"
    },
    "3522": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3523": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3524": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3526": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "ADD",
      "path": "1"
    },
    "3527": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3528": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3529": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3531": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "ADD",
      "path": "1"
    },
    "3532": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3533": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3534": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "SUB",
      "path": "1"
    },
    "3535": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3536": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3537": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x22"
    },
    "3539": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3540": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3541": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3543": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "ADD",
      "path": "1"
    },
    "3544": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3545": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x35E1"
    },
    "3548": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x22"
    },
    "3550": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3551": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "CODECOPY",
      "path": "1"
    },
    "3552": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3554": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "ADD",
      "path": "1"
    },
    "3555": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3556": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "POP",
      "path": "1"
    },
    "3557": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "POP",
      "path": "1"
    },
    "3558": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3560": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3561": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3562": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3563": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "SUB",
      "path": "1"
    },
    "3564": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3565": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3566": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        5804,
        6294
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3567": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6364,
        6378
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3569": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6381,
        6564
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE07"
    },
    "3572": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6420,
        6467
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE01"
    },
    "3575": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6449,
        6454
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3576": {
      "op": "PUSH1",
      "value": "0x45"
    },
    "3578": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3580": {
      "op": "SHL"
    },
    "3581": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6420,
        6448
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x227F"
    },
    "3584": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        6420,
        6467
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3585": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6420,
        6467
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3586": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6540,
        6563
      ],
      "op": "DUP11",
      "path": "1"
    },
    "3587": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6381,
        6406
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x257F"
    },
    "3590": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        6381,
        6564
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3591": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6381,
        6564
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3592": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6364,
        6564
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3593": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6364,
        6564
      ],
      "op": "POP",
      "path": "1"
    },
    "3594": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6574,
        6588
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3596": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6597
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "3629": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3631": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3633": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3635": {
      "op": "SHL"
    },
    "3636": {
      "op": "SUB"
    },
    "3637": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6614
      ],
      "op": "AND",
      "path": "1"
    },
    "3638": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6614
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xB2EEB36E"
    },
    "3643": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6615,
        6621
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3644": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3646": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3647": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3648": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "3653": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "AND",
      "path": "1"
    },
    "3654": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "3656": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "SHL",
      "path": "1"
    },
    "3657": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3658": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3659": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3661": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "ADD",
      "path": "1"
    },
    "3662": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3663": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3664": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3666": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3668": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3670": {
      "op": "SHL"
    },
    "3671": {
      "op": "SUB"
    },
    "3672": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "AND",
      "path": "1"
    },
    "3673": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3675": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3677": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3679": {
      "op": "SHL"
    },
    "3680": {
      "op": "SUB"
    },
    "3681": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "AND",
      "path": "1"
    },
    "3682": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3683": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3684": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3686": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "ADD",
      "path": "1"
    },
    "3687": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3688": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "POP",
      "path": "1"
    },
    "3689": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "POP",
      "path": "1"
    },
    "3690": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3692": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3694": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3695": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3696": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3697": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "SUB",
      "path": "1"
    },
    "3698": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3699": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP7",
      "path": "1"
    },
    "3700": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3701": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "3702": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3703": {
      "op": "DUP1"
    },
    "3704": {
      "op": "ISZERO"
    },
    "3705": {
      "op": "PUSH2",
      "value": "0xE81"
    },
    "3708": {
      "op": "JUMPI"
    },
    "3709": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3711": {
      "op": "DUP1"
    },
    "3712": {
      "op": "REVERT"
    },
    "3713": {
      "op": "JUMPDEST"
    },
    "3714": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "POP",
      "path": "1"
    },
    "3715": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "GAS",
      "path": "1"
    },
    "3716": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "3717": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3718": {
      "op": "DUP1"
    },
    "3719": {
      "op": "ISZERO"
    },
    "3720": {
      "op": "PUSH2",
      "value": "0xE95"
    },
    "3723": {
      "op": "JUMPI"
    },
    "3724": {
      "op": "RETURNDATASIZE"
    },
    "3725": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3727": {
      "op": "DUP1"
    },
    "3728": {
      "op": "RETURNDATACOPY"
    },
    "3729": {
      "op": "RETURNDATASIZE"
    },
    "3730": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3732": {
      "op": "REVERT"
    },
    "3733": {
      "op": "JUMPDEST"
    },
    "3734": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "POP",
      "path": "1"
    },
    "3735": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "POP",
      "path": "1"
    },
    "3736": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "POP",
      "path": "1"
    },
    "3737": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "POP",
      "path": "1"
    },
    "3738": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3740": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3741": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3742": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3744": {
      "op": "DUP2"
    },
    "3745": {
      "op": "LT"
    },
    "3746": {
      "op": "ISZERO"
    },
    "3747": {
      "op": "PUSH2",
      "value": "0xEAB"
    },
    "3750": {
      "op": "JUMPI"
    },
    "3751": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3753": {
      "op": "DUP1"
    },
    "3754": {
      "op": "REVERT"
    },
    "3755": {
      "op": "JUMPDEST"
    },
    "3756": {
      "op": "POP"
    },
    "3757": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3758": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6591,
        6622
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3759": {
      "op": "POP"
    },
    "3760": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3762": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3764": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3766": {
      "op": "SHL"
    },
    "3767": {
      "op": "SUB"
    },
    "3768": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6640,
        6660
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 8
    },
    "3769": {
      "branch": 181,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6640,
        6660
      ],
      "op": "AND",
      "path": "1"
    },
    "3770": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEF4"
    },
    "3773": {
      "branch": 181,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3774": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3776": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3777": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3781": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3783": {
      "op": "SHL"
    },
    "3784": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3785": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3786": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3788": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "ADD",
      "path": "1"
    },
    "3789": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3790": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3791": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3793": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "ADD",
      "path": "1"
    },
    "3794": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3795": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3796": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "SUB",
      "path": "1"
    },
    "3797": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3798": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3799": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x22"
    },
    "3801": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3802": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3803": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3805": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "ADD",
      "path": "1"
    },
    "3806": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3807": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3789"
    },
    "3810": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x22"
    },
    "3812": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3813": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "CODECOPY",
      "path": "1"
    },
    "3814": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3816": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "ADD",
      "path": "1"
    },
    "3817": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3818": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "POP",
      "path": "1"
    },
    "3819": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "POP",
      "path": "1"
    },
    "3820": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3822": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3823": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3824": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3825": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "SUB",
      "path": "1"
    },
    "3826": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3827": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3828": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6632,
        6699
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3829": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6757,
        6776
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3831": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6785
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "3864": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3866": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3868": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3870": {
      "op": "SHL"
    },
    "3871": {
      "op": "SUB"
    },
    "3872": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6798
      ],
      "op": "AND",
      "path": "1"
    },
    "3873": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6798
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x178B6DE6"
    },
    "3878": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6799,
        6805
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3879": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3881": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3882": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3883": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "3888": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "AND",
      "path": "1"
    },
    "3889": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "3891": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "SHL",
      "path": "1"
    },
    "3892": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3893": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3894": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3896": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "ADD",
      "path": "1"
    },
    "3897": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3898": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3899": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3901": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3903": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3905": {
      "op": "SHL"
    },
    "3906": {
      "op": "SUB"
    },
    "3907": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "AND",
      "path": "1"
    },
    "3908": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3910": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3912": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3914": {
      "op": "SHL"
    },
    "3915": {
      "op": "SUB"
    },
    "3916": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "AND",
      "path": "1"
    },
    "3917": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3918": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3919": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3921": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "ADD",
      "path": "1"
    },
    "3922": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3923": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "POP",
      "path": "1"
    },
    "3924": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "POP",
      "path": "1"
    },
    "3925": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3927": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3929": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3930": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3931": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3932": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "SUB",
      "path": "1"
    },
    "3933": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3934": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP7",
      "path": "1"
    },
    "3935": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3936": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "3937": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3938": {
      "op": "DUP1"
    },
    "3939": {
      "op": "ISZERO"
    },
    "3940": {
      "op": "PUSH2",
      "value": "0xF6C"
    },
    "3943": {
      "op": "JUMPI"
    },
    "3944": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3946": {
      "op": "DUP1"
    },
    "3947": {
      "op": "REVERT"
    },
    "3948": {
      "op": "JUMPDEST"
    },
    "3949": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "POP",
      "path": "1"
    },
    "3950": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "GAS",
      "path": "1"
    },
    "3951": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "3952": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3953": {
      "op": "DUP1"
    },
    "3954": {
      "op": "ISZERO"
    },
    "3955": {
      "op": "PUSH2",
      "value": "0xF80"
    },
    "3958": {
      "op": "JUMPI"
    },
    "3959": {
      "op": "RETURNDATASIZE"
    },
    "3960": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3962": {
      "op": "DUP1"
    },
    "3963": {
      "op": "RETURNDATACOPY"
    },
    "3964": {
      "op": "RETURNDATASIZE"
    },
    "3965": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3967": {
      "op": "REVERT"
    },
    "3968": {
      "op": "JUMPDEST"
    },
    "3969": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "POP",
      "path": "1"
    },
    "3970": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "POP",
      "path": "1"
    },
    "3971": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "POP",
      "path": "1"
    },
    "3972": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "POP",
      "path": "1"
    },
    "3973": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3975": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3976": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3977": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3979": {
      "op": "DUP2"
    },
    "3980": {
      "op": "LT"
    },
    "3981": {
      "op": "ISZERO"
    },
    "3982": {
      "op": "PUSH2",
      "value": "0xF96"
    },
    "3985": {
      "op": "JUMPI"
    },
    "3986": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3988": {
      "op": "DUP1"
    },
    "3989": {
      "op": "REVERT"
    },
    "3990": {
      "op": "JUMPDEST"
    },
    "3991": {
      "op": "POP"
    },
    "3992": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3993": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6779,
        6806
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3994": {
      "op": "POP"
    },
    "3995": {
      "branch": 182,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6824,
        6839
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 9
    },
    "3996": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xFE3"
    },
    "3999": {
      "branch": 182,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4000": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4002": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4003": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4004": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4008": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4010": {
      "op": "SHL"
    },
    "4011": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4012": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4013": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4015": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4017": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4018": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "ADD",
      "path": "1"
    },
    "4019": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4020": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x14"
    },
    "4022": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "4024": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4025": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "ADD",
      "path": "1"
    },
    "4026": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4027": {
      "op": "PUSH20",
      "value": "0x5374616B657220686173206E6F20746F6B656E73"
    },
    "4048": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4050": {
      "op": "SHL"
    },
    "4051": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x44"
    },
    "4053": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4054": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "ADD",
      "path": "1"
    },
    "4055": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4056": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4057": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4058": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4059": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4060": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4061": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "SUB",
      "path": "1"
    },
    "4062": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "4064": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "ADD",
      "path": "1"
    },
    "4065": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4066": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "REVERT",
      "path": "1"
    },
    "4067": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6816,
        6864
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4068": {
      "branch": 183,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6931,
        6945
      ],
      "op": "DUP8",
      "path": "1"
    },
    "4069": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6926,
        7195
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10D5"
    },
    "4072": {
      "branch": 183,
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6926,
        7195
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4073": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6962,
        6977
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4075": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6979,
        6993
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4076": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6997,
        7043
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xFF5"
    },
    "4079": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7023,
        7029
      ],
      "op": "DUP5",
      "path": "1"
    },
    "4080": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7031,
        7042
      ],
      "op": "DUP5",
      "path": "1"
    },
    "4081": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6997,
        7022
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2638"
    },
    "4084": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "i",
      "offset": [
        6997,
        7043
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4085": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6997,
        7043
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4086": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 10,
      "value": "0x40"
    },
    "4088": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4089": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4090": {
      "op": "PUSH4",
      "value": "0x26730863"
    },
    "4095": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "4097": {
      "op": "SHL"
    },
    "4098": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4099": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4100": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4102": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4104": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4106": {
      "op": "SHL"
    },
    "4107": {
      "op": "SUB"
    },
    "4108": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP9",
      "path": "1"
    },
    "4109": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4110": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "AND",
      "path": "1"
    },
    "4111": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4113": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4114": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ADD",
      "path": "1"
    },
    "4115": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4116": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "4118": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4119": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ADD",
      "path": "1"
    },
    "4120": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP6",
      "path": "1"
    },
    "4121": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4122": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4123": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7093,
        7103
      ],
      "op": "CALLER",
      "path": "1"
    },
    "4124": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x44"
    },
    "4126": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4127": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ADD",
      "path": "1"
    },
    "4128": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4129": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "4131": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4132": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ADD",
      "path": "1"
    },
    "4133": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP5",
      "path": "1"
    },
    "4134": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4135": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4136": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4137": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4138": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6961,
        7043
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "4139": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6961,
        7043
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "4140": {
      "op": "POP"
    },
    "4141": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6961,
        7043
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4142": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6961,
        7043
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "4143": {
      "op": "POP"
    },
    "4144": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7063
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "4177": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7075
      ],
      "op": "AND",
      "path": "1"
    },
    "4178": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7075
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4179": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7075
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x99CC218C"
    },
    "4184": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7075
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4185": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x84"
    },
    "4187": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4188": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4189": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ADD",
      "path": "1"
    },
    "4190": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4191": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4193": {
      "op": "SWAP3"
    },
    "4194": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4195": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4196": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4197": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4198": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4199": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "SUB",
      "path": "1"
    },
    "4200": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ADD",
      "path": "1"
    },
    "4201": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4202": {
      "op": "DUP4"
    },
    "4203": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7075
      ],
      "op": "DUP8",
      "path": "1"
    },
    "4204": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4205": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "4206": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4207": {
      "op": "DUP1"
    },
    "4208": {
      "op": "ISZERO"
    },
    "4209": {
      "op": "PUSH2",
      "value": "0x1079"
    },
    "4212": {
      "op": "JUMPI"
    },
    "4213": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4215": {
      "op": "DUP1"
    },
    "4216": {
      "op": "REVERT"
    },
    "4217": {
      "op": "JUMPDEST"
    },
    "4218": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "POP",
      "path": "1"
    },
    "4219": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "GAS",
      "path": "1"
    },
    "4220": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "CALL",
      "path": "1"
    },
    "4221": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4222": {
      "op": "DUP1"
    },
    "4223": {
      "op": "ISZERO"
    },
    "4224": {
      "op": "PUSH2",
      "value": "0x108D"
    },
    "4227": {
      "op": "JUMPI"
    },
    "4228": {
      "op": "RETURNDATASIZE"
    },
    "4229": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4231": {
      "op": "DUP1"
    },
    "4232": {
      "op": "RETURNDATACOPY"
    },
    "4233": {
      "op": "RETURNDATASIZE"
    },
    "4234": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4236": {
      "op": "REVERT"
    },
    "4237": {
      "op": "JUMPDEST"
    },
    "4238": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "POP",
      "path": "1"
    },
    "4239": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "POP",
      "path": "1"
    },
    "4240": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "POP",
      "path": "1"
    },
    "4241": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7057,
        7112
      ],
      "op": "POP",
      "path": "1"
    },
    "4242": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7177,
        7183
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 11
    },
    "4243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4245": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4247": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4249": {
      "op": "SHL"
    },
    "4250": {
      "op": "SUB"
    },
    "4251": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "AND",
      "path": "1"
    },
    "4252": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7169,
        7175
      ],
      "op": "DUP6",
      "path": "1"
    },
    "4253": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4255": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4257": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4259": {
      "op": "SHL"
    },
    "4260": {
      "op": "SUB"
    },
    "4261": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "AND",
      "path": "1"
    },
    "4262": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7153,
        7167
      ],
      "op": "DUP13",
      "path": "1"
    },
    "4263": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x860028D7F53AFB628CAE3582337C99BE24159F7EE9D68A96BABBC7F054A36CAF"
    },
    "4296": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4298": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4299": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4301": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4302": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4303": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4304": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "SUB",
      "path": "1"
    },
    "4305": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4306": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        7131,
        7184
      ],
      "op": "LOG4",
      "path": "1"
    },
    "4307": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6926,
        7195
      ],
      "op": "POP",
      "path": "1"
    },
    "4308": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6926,
        7195
      ],
      "op": "POP",
      "path": "1"
    },
    "4309": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        6926,
        7195
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4310": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4311": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4312": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4313": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4314": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4315": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4316": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4317": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4318": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4319": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4320": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4321": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4322": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4323": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4324": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4325": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4326": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        3293,
        7201
      ],
      "op": "POP",
      "path": "1"
    },
    "4327": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "o",
      "offset": [
        3293,
        7201
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4328": {
      "offset": [
        1090,
        1140
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4329": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "4362": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1090,
        1140
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4363": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "o",
      "offset": [
        1090,
        1140
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4364": {
      "offset": [
        973,
        1002
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4365": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x2"
    },
    "4367": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "SLOAD",
      "path": "15"
    },
    "4368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4370": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4372": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4374": {
      "op": "SHL"
    },
    "4375": {
      "op": "SUB"
    },
    "4376": {
      "offset": [
        973,
        1002
      ],
      "op": "AND",
      "path": "15"
    },
    "4377": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        973,
        1002
      ],
      "op": "DUP2",
      "path": "15"
    },
    "4378": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "o",
      "offset": [
        973,
        1002
      ],
      "op": "JUMP",
      "path": "15"
    },
    "4379": {
      "offset": [
        1048,
        1084
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4380": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1048,
        1084
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "4413": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1048,
        1084
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4414": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "o",
      "offset": [
        1048,
        1084
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4415": {
      "offset": [
        980,
        1042
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4416": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "4449": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        980,
        1042
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4450": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "o",
      "offset": [
        980,
        1042
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4451": {
      "offset": [
        1254,
        1304
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4452": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4454": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4456": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4457": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4459": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4460": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4461": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4462": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4464": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4465": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "4466": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "4467": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1254,
        1304
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4468": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "o",
      "offset": [
        1254,
        1304
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4469": {
      "offset": [
        1310,
        1358
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4470": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "4472": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4474": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4475": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4477": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4478": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4479": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4480": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4482": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4483": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "4484": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "4485": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "4487": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "AND",
      "path": "1"
    },
    "4488": {
      "fn": "Adjudicator.evaluateCFrag",
      "offset": [
        1310,
        1358
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4489": {
      "fn": "Adjudicator.evaluateCFrag",
      "jump": "o",
      "offset": [
        1310,
        1358
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4490": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1348,
        1485
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "4491": {
      "offset": [
        864,
        873
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x1192"
    },
    "4494": {
      "offset": [
        864,
        871
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x11F4"
    },
    "4497": {
      "jump": "i",
      "offset": [
        864,
        873
      ],
      "op": "JUMP",
      "path": "21"
    },
    "4498": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        864,
        873
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "4499": {
      "offset": [
        856,
        874
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x119B"
    },
    "4502": {
      "offset": [
        856,
        874
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "4503": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4505": {
      "op": "DUP1"
    },
    "4506": {
      "op": "REVERT"
    },
    "4507": {
      "offset": [
        856,
        874
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "4508": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1446,
        1447
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 12,
      "value": "0x0"
    },
    "4510": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1430,
        1436
      ],
      "op": "DUP1",
      "path": "21"
    },
    "4511": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1430,
        1436
      ],
      "op": "SLOAD",
      "path": "21"
    },
    "4512": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1409,
        1449
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "4514": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1409,
        1449
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "4515": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4517": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4519": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4521": {
      "op": "SHL"
    },
    "4522": {
      "op": "SUB"
    },
    "4523": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1430,
        1436
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "4524": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1430,
        1436
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "4525": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1430,
        1436
      ],
      "op": "AND",
      "path": "21"
    },
    "4526": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1430,
        1436
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "4527": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1409,
        1449
      ],
      "op": "PUSH32",
      "path": "21",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "4560": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1409,
        1449
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "4561": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1446,
        1447
      ],
      "op": "DUP4",
      "path": "21"
    },
    "4562": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1446,
        1447
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "4563": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1409,
        1449
      ],
      "op": "LOG3",
      "path": "21"
    },
    "4564": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1476,
        1477
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 13,
      "value": "0x0"
    },
    "4566": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1459,
        1478
      ],
      "op": "DUP1",
      "path": "21"
    },
    "4567": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1459,
        1478
      ],
      "op": "SLOAD",
      "path": "21"
    },
    "4568": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4570": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4572": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4574": {
      "op": "SHL"
    },
    "4575": {
      "op": "SUB"
    },
    "4576": {
      "op": "NOT"
    },
    "4577": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1459,
        1478
      ],
      "op": "AND",
      "path": "21"
    },
    "4578": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1459,
        1478
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "4579": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1459,
        1478
      ],
      "op": "SSTORE",
      "path": "21"
    },
    "4580": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1348,
        1485
      ],
      "op": "JUMP",
      "path": "21"
    },
    "4581": {
      "fn": "Ownable.owner",
      "offset": [
        660,
        737
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "4582": {
      "fn": "Ownable.owner",
      "offset": [
        698,
        705
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "4584": {
      "fn": "Ownable.owner",
      "offset": [
        724,
        730
      ],
      "op": "SLOAD",
      "path": "21",
      "statement": 14
    },
    "4585": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4587": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4589": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4591": {
      "op": "SHL"
    },
    "4592": {
      "op": "SUB"
    },
    "4593": {
      "fn": "Ownable.owner",
      "offset": [
        724,
        730
      ],
      "op": "AND",
      "path": "21"
    },
    "4594": {
      "fn": "Ownable.owner",
      "offset": [
        660,
        737
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "4595": {
      "fn": "Ownable.owner",
      "jump": "o",
      "offset": [
        660,
        737
      ],
      "op": "JUMP",
      "path": "21"
    },
    "4596": {
      "fn": "Ownable.isOwner",
      "offset": [
        980,
        1070
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "4597": {
      "fn": "Ownable.isOwner",
      "offset": [
        1020,
        1024
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "4599": {
      "fn": "Ownable.isOwner",
      "offset": [
        1057,
        1063
      ],
      "op": "SLOAD",
      "path": "21",
      "statement": 15
    },
    "4600": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4602": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4604": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4606": {
      "op": "SHL"
    },
    "4607": {
      "op": "SUB"
    },
    "4608": {
      "fn": "Ownable.isOwner",
      "offset": [
        1057,
        1063
      ],
      "op": "AND",
      "path": "21"
    },
    "4609": {
      "fn": "Ownable.isOwner",
      "offset": [
        1043,
        1053
      ],
      "op": "CALLER",
      "path": "21"
    },
    "4610": {
      "fn": "Ownable.isOwner",
      "offset": [
        1043,
        1063
      ],
      "op": "EQ",
      "path": "21"
    },
    "4611": {
      "fn": "Ownable.isOwner",
      "offset": [
        1043,
        1063
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "4612": {
      "fn": "Ownable.isOwner",
      "jump": "o",
      "offset": [
        980,
        1070
      ],
      "op": "JUMP",
      "path": "21"
    },
    "4613": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4614": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8121,
        8151
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 16,
      "value": "0x120E"
    },
    "4617": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8139,
        8150
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4618": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8121,
        8138
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2771"
    },
    "4621": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        8121,
        8151
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4622": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8121,
        8151
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4623": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4625": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4626": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4627": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8161,
        8188
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4629": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4631": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4632": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4633": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "ADD",
      "path": "1"
    },
    "4634": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4635": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4636": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4637": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4638": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4639": {
      "op": "DUP1"
    },
    "4640": {
      "op": "DUP5"
    },
    "4641": {
      "op": "SUB"
    },
    "4642": {
      "op": "SWAP1"
    },
    "4643": {
      "op": "SWAP2"
    },
    "4644": {
      "op": "ADD"
    },
    "4645": {
      "op": "DUP2"
    },
    "4646": {
      "op": "MSTORE"
    },
    "4647": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4648": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4649": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "ADD",
      "path": "1"
    },
    "4650": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4651": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4652": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8227,
        8277
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4653": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8191,
        8318
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1237"
    },
    "4656": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8191,
        8318
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4657": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8279,
        8317
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "4659": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8191,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13EC"
    },
    "4662": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        8191,
        8318
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4663": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8191,
        8318
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4664": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 17,
      "value": "0x0"
    },
    "4666": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4667": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4668": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4669": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "4671": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4673": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4674": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4676": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4677": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "4678": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "4679": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8161,
        8318
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4680": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8161,
        8318
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4681": {
      "op": "POP"
    },
    "4682": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "4684": {
      "branch": 184,
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8465
      ],
      "op": "AND",
      "path": "1"
    },
    "4685": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8473
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1257"
    },
    "4688": {
      "branch": 184,
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8473
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4689": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8472,
        8473
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4691": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8473
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x125A"
    },
    "4694": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8473
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4695": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8473
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4696": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8468,
        8469
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "4698": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8429,
        8473
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4699": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8336,
        8474
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "4701": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8336,
        8474
      ],
      "op": "AND",
      "path": "1"
    },
    "4702": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8336,
        8412
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x126F"
    },
    "4705": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8348,
        8359
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4706": {
      "op": "PUSH4",
      "value": "0x70535443"
    },
    "4711": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4713": {
      "op": "SHL"
    },
    "4714": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8392,
        8411
      ],
      "op": "DUP5",
      "path": "1"
    },
    "4715": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8336,
        8347
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x27CB"
    },
    "4718": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        8336,
        8412
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4719": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8336,
        8412
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4720": {
      "branch": 185,
      "fn": "Adjudicator.verifyState",
      "offset": [
        8336,
        8474
      ],
      "op": "EQ",
      "path": "1"
    },
    "4721": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8328,
        8475
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1279"
    },
    "4724": {
      "branch": 185,
      "fn": "Adjudicator.verifyState",
      "offset": [
        8328,
        8475
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4725": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4727": {
      "op": "DUP1"
    },
    "4728": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8328,
        8475
      ],
      "op": "REVERT",
      "path": "1"
    },
    "4729": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8328,
        8475
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4730": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 18,
      "value": "0x0"
    },
    "4732": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4733": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4734": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4735": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8613
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4737": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4739": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4740": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x17EF568E3E12AB5B9C7254A8D58478811DE00F9E6EB34345ACD53BF8FD09D3EC"
    },
    "4773": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "4774": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8599,
        8631
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4775": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8493,
        8583
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12BA"
    },
    "4778": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8493,
        8583
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4779": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8505,
        8516
      ],
      "op": "DUP5",
      "path": "1"
    },
    "4780": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8505,
        8516
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4781": {
      "op": "PUSH4",
      "value": "0x2EADB41B"
    },
    "4786": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "4788": {
      "op": "SHL"
    },
    "4789": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8518,
        8546
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4790": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8493,
        8504
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x27CB"
    },
    "4793": {
      "fn": "Adjudicator.verifyState",
      "jump": "i",
      "offset": [
        8493,
        8583
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4794": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8493,
        8583
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4795": {
      "branch": 186,
      "fn": "Adjudicator.verifyState",
      "offset": [
        8493,
        8631
      ],
      "op": "EQ",
      "path": "1"
    },
    "4796": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8485,
        8632
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12C4"
    },
    "4799": {
      "branch": 186,
      "fn": "Adjudicator.verifyState",
      "offset": [
        8485,
        8632
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4800": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4802": {
      "op": "DUP1"
    },
    "4803": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8485,
        8632
      ],
      "op": "REVERT",
      "path": "1"
    },
    "4804": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8485,
        8632
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4805": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "POP",
      "path": "1"
    },
    "4806": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        8045,
        8639
      ],
      "op": "POP",
      "path": "1"
    },
    "4807": {
      "fn": "Adjudicator.verifyState",
      "jump": "o",
      "offset": [
        8045,
        8639
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4808": {
      "offset": [
        1146,
        1199
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4809": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1146,
        1199
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "4842": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1146,
        1199
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4843": {
      "fn": "Adjudicator.verifyState",
      "jump": "o",
      "offset": [
        1146,
        1199
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4844": {
      "offset": [
        859,
        880
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4845": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        859,
        880
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "4847": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        859,
        880
      ],
      "op": "SLOAD",
      "path": "15"
    },
    "4848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4850": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4852": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4854": {
      "op": "SHL"
    },
    "4855": {
      "op": "SUB"
    },
    "4856": {
      "offset": [
        859,
        880
      ],
      "op": "AND",
      "path": "15"
    },
    "4857": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        859,
        880
      ],
      "op": "DUP2",
      "path": "15"
    },
    "4858": {
      "fn": "Adjudicator.verifyState",
      "jump": "o",
      "offset": [
        859,
        880
      ],
      "op": "JUMP",
      "path": "15"
    },
    "4859": {
      "offset": [
        937,
        974
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4860": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        937,
        974
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "4893": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        937,
        974
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4894": {
      "fn": "Adjudicator.verifyState",
      "jump": "o",
      "offset": [
        937,
        974
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4895": {
      "offset": [
        1132,
        1154
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4896": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x2"
    },
    "4898": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "SLOAD",
      "path": "15"
    },
    "4899": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4901": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4903": {
      "op": "SHL"
    },
    "4904": {
      "offset": [
        1132,
        1154
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "4905": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "DIV",
      "path": "15"
    },
    "4906": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0xFF"
    },
    "4908": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "AND",
      "path": "15"
    },
    "4909": {
      "fn": "Adjudicator.verifyState",
      "offset": [
        1132,
        1154
      ],
      "op": "DUP2",
      "path": "15"
    },
    "4910": {
      "fn": "Adjudicator.verifyState",
      "jump": "o",
      "offset": [
        1132,
        1154
      ],
      "op": "JUMP",
      "path": "15"
    },
    "4911": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8743,
        9170
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4912": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8817,
        8845
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 19,
      "value": "0x1338"
    },
    "4915": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8837,
        8844
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4916": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8817,
        8836
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x27E6"
    },
    "4919": {
      "fn": "Adjudicator.finishUpgrade",
      "jump": "i",
      "offset": [
        8817,
        8845
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4920": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8817,
        8845
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4921": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4923": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4924": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4925": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8905,
        8932
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4927": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4929": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4930": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4931": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "ADD",
      "path": "1"
    },
    "4932": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4933": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4934": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4935": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4936": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4937": {
      "op": "DUP1"
    },
    "4938": {
      "op": "DUP5"
    },
    "4939": {
      "op": "SUB"
    },
    "4940": {
      "op": "SWAP1"
    },
    "4941": {
      "op": "SWAP2"
    },
    "4942": {
      "op": "ADD"
    },
    "4943": {
      "op": "DUP2"
    },
    "4944": {
      "op": "MSTORE"
    },
    "4945": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4946": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4947": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "ADD",
      "path": "1"
    },
    "4948": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4949": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4950": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8971,
        9021
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4951": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8935,
        9062
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1361"
    },
    "4954": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8935,
        9062
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4955": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9023,
        9061
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "4957": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8935,
        8957
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13EC"
    },
    "4960": {
      "fn": "Adjudicator.finishUpgrade",
      "jump": "i",
      "offset": [
        8935,
        9062
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4961": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        8935,
        9062
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4962": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 20,
      "value": "0x0"
    },
    "4964": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4965": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4966": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4967": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9087
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "4969": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4971": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4972": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4973": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4974": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4976": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4977": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9108
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "4978": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9115
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4979": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9115
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "4980": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4982": {
      "op": "NOT"
    },
    "4983": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9115
      ],
      "op": "AND",
      "path": "1"
    },
    "4984": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9111,
        9115
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "4986": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9115
      ],
      "op": "OR",
      "path": "1"
    },
    "4987": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9115
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4988": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9072,
        9115
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "4989": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9157
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 21
    },
    "4990": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9157
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4991": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9157
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4992": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9139
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4994": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9157
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4995": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9157
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4996": {
      "op": "POP"
    },
    "4997": {
      "op": "POP"
    },
    "4998": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9160,
        9163
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7B"
    },
    "5000": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9157
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x17EF568E3E12AB5B9C7254A8D58478811DE00F9E6EB34345ACD53BF8FD09D3EC"
    },
    "5033": {
      "fn": "Adjudicator.finishUpgrade",
      "offset": [
        9125,
        9163
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "5034": {
      "fn": "Adjudicator.finishUpgrade",
      "jump": "o",
      "offset": [
        8743,
        9170
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5035": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "5036": {
      "offset": [
        864,
        873
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x13B3"
    },
    "5039": {
      "offset": [
        864,
        871
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x11F4"
    },
    "5042": {
      "jump": "i",
      "offset": [
        864,
        873
      ],
      "op": "JUMP",
      "path": "21"
    },
    "5043": {
      "branch": 188,
      "fn": "Ownable.transferOwnership",
      "offset": [
        864,
        873
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "5044": {
      "offset": [
        856,
        874
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x13BC"
    },
    "5047": {
      "branch": 188,
      "offset": [
        856,
        874
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "5048": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5050": {
      "op": "DUP1"
    },
    "5051": {
      "op": "REVERT"
    },
    "5052": {
      "offset": [
        856,
        874
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "5053": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1728,
        1756
      ],
      "op": "PUSH2",
      "path": "21",
      "statement": 22,
      "value": "0x13C5"
    },
    "5056": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1747,
        1755
      ],
      "op": "DUP2",
      "path": "21"
    },
    "5057": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1728,
        1746
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x2840"
    },
    "5060": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1728,
        1756
      ],
      "op": "JUMP",
      "path": "21"
    },
    "5061": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1728,
        1756
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "5062": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1656,
        1763
      ],
      "op": "POP",
      "path": "21"
    },
    "5063": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        1656,
        1763
      ],
      "op": "JUMP",
      "path": "21"
    },
    "5064": {
      "offset": [
        1205,
        1247
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5065": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1205,
        1247
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "5098": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1205,
        1247
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5099": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        1205,
        1247
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5100": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1639,
        2036
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "5101": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1749,
        1763
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "5103": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1749,
        1763
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5104": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1793
      ],
      "op": "DUP3",
      "path": "11"
    },
    "5105": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x2"
    },
    "5107": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "DUP2",
      "path": "11"
    },
    "5108": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "GT",
      "path": "11"
    },
    "5109": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "5110": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x13FB"
    },
    "5113": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "5114": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "INVALID",
      "path": "11"
    },
    "5115": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "5116": {
      "branch": 220,
      "fn": "SignatureVerifier.hash",
      "offset": [
        1783,
        1820
      ],
      "op": "EQ",
      "path": "11"
    },
    "5117": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1779,
        2030
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "5118": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1779,
        2030
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x140E"
    },
    "5121": {
      "branch": 220,
      "fn": "SignatureVerifier.hash",
      "offset": [
        1779,
        2030
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "5122": {
      "op": "POP"
    },
    "5123": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1845,
        1864
      ],
      "op": "DUP2",
      "path": "11",
      "statement": 23
    },
    "5124": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1845,
        1864
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5125": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1845,
        1864
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "5127": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1845,
        1864
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5128": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1845,
        1864
      ],
      "op": "ADD",
      "path": "11"
    },
    "5129": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1845,
        1864
      ],
      "op": "KECCAK256",
      "path": "11"
    },
    "5130": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1779,
        2030
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x153E"
    },
    "5133": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1779,
        2030
      ],
      "op": "JUMP",
      "path": "11"
    },
    "5134": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1779,
        2030
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "5135": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1899,
        1919
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1"
    },
    "5137": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1895
      ],
      "op": "DUP3",
      "path": "11"
    },
    "5138": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x2"
    },
    "5140": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "DUP2",
      "path": "11"
    },
    "5141": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "GT",
      "path": "11"
    },
    "5142": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "5143": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x141C"
    },
    "5146": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "5147": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "INVALID",
      "path": "11"
    },
    "5148": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "5149": {
      "branch": 221,
      "fn": "SignatureVerifier.hash",
      "offset": [
        1885,
        1919
      ],
      "op": "EQ",
      "path": "11"
    },
    "5150": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1881,
        2030
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "5151": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1881,
        2030
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x14B1"
    },
    "5154": {
      "branch": 221,
      "fn": "SignatureVerifier.hash",
      "offset": [
        1881,
        2030
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "5155": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 24,
      "value": "0x2"
    },
    "5157": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1951,
        1959
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5158": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "5160": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5161": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5162": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP3",
      "path": "11"
    },
    "5163": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5164": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5165": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5166": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "5168": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "ADD",
      "path": "11"
    },
    "5169": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5170": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5171": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5172": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5173": {
      "op": "JUMPDEST"
    },
    "5174": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5176": {
      "op": "DUP4"
    },
    "5177": {
      "op": "LT"
    },
    "5178": {
      "op": "PUSH2",
      "value": "0x1454"
    },
    "5181": {
      "op": "JUMPI"
    },
    "5182": {
      "op": "DUP1"
    },
    "5183": {
      "op": "MLOAD"
    },
    "5184": {
      "op": "DUP3"
    },
    "5185": {
      "op": "MSTORE"
    },
    "5186": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5188": {
      "op": "NOT"
    },
    "5189": {
      "op": "SWAP1"
    },
    "5190": {
      "op": "SWAP3"
    },
    "5191": {
      "op": "ADD"
    },
    "5192": {
      "op": "SWAP2"
    },
    "5193": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5195": {
      "op": "SWAP2"
    },
    "5196": {
      "op": "DUP3"
    },
    "5197": {
      "op": "ADD"
    },
    "5198": {
      "op": "SWAP2"
    },
    "5199": {
      "op": "ADD"
    },
    "5200": {
      "op": "PUSH2",
      "value": "0x1435"
    },
    "5203": {
      "op": "JUMP"
    },
    "5204": {
      "op": "JUMPDEST"
    },
    "5205": {
      "op": "MLOAD"
    },
    "5206": {
      "op": "DUP2"
    },
    "5207": {
      "op": "MLOAD"
    },
    "5208": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5210": {
      "op": "SWAP4"
    },
    "5211": {
      "op": "DUP5"
    },
    "5212": {
      "op": "SUB"
    },
    "5213": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "5216": {
      "op": "EXP"
    },
    "5217": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5219": {
      "op": "NOT"
    },
    "5220": {
      "op": "ADD"
    },
    "5221": {
      "op": "DUP1"
    },
    "5222": {
      "op": "NOT"
    },
    "5223": {
      "op": "SWAP1"
    },
    "5224": {
      "op": "SWAP3"
    },
    "5225": {
      "op": "AND"
    },
    "5226": {
      "op": "SWAP2"
    },
    "5227": {
      "op": "AND"
    },
    "5228": {
      "op": "OR"
    },
    "5229": {
      "op": "SWAP1"
    },
    "5230": {
      "op": "MSTORE"
    },
    "5231": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "5233": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5234": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "5235": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5236": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "5237": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "ADD",
      "path": "11"
    },
    "5238": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "5239": {
      "op": "POP"
    },
    "5240": {
      "op": "SWAP2"
    },
    "5241": {
      "op": "SWAP3"
    },
    "5242": {
      "op": "POP"
    },
    "5243": {
      "op": "POP"
    },
    "5244": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5245": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5246": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SUB",
      "path": "11"
    },
    "5247": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP2",
      "path": "11"
    },
    "5248": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "DUP6",
      "path": "11"
    },
    "5249": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "GAS",
      "path": "11"
    },
    "5250": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "STATICCALL",
      "path": "11"
    },
    "5251": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "5252": {
      "op": "DUP1"
    },
    "5253": {
      "op": "ISZERO"
    },
    "5254": {
      "op": "PUSH2",
      "value": "0x1493"
    },
    "5257": {
      "op": "JUMPI"
    },
    "5258": {
      "op": "RETURNDATASIZE"
    },
    "5259": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5261": {
      "op": "DUP1"
    },
    "5262": {
      "op": "RETURNDATACOPY"
    },
    "5263": {
      "op": "RETURNDATASIZE"
    },
    "5264": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5266": {
      "op": "REVERT"
    },
    "5267": {
      "op": "JUMPDEST"
    },
    "5268": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "POP",
      "path": "11"
    },
    "5269": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "POP",
      "path": "11"
    },
    "5270": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "POP",
      "path": "11"
    },
    "5271": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "5273": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5274": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "RETURNDATASIZE",
      "path": "11"
    },
    "5275": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5277": {
      "op": "DUP2"
    },
    "5278": {
      "op": "LT"
    },
    "5279": {
      "op": "ISZERO"
    },
    "5280": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5283": {
      "op": "JUMPI"
    },
    "5284": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5286": {
      "op": "DUP1"
    },
    "5287": {
      "op": "REVERT"
    },
    "5288": {
      "op": "JUMPDEST"
    },
    "5289": {
      "op": "POP"
    },
    "5290": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5291": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1944,
        1960
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5292": {
      "op": "POP"
    },
    "5293": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1881,
        2030
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x153E"
    },
    "5296": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1881,
        2030
      ],
      "op": "JUMP",
      "path": "11"
    },
    "5297": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1881,
        2030
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "5298": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 25,
      "value": "0x3"
    },
    "5300": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2010,
        2018
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5301": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "5303": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5304": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5305": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP3",
      "path": "11"
    },
    "5306": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5307": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5308": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5309": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "5311": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "ADD",
      "path": "11"
    },
    "5312": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5313": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5314": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5315": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5316": {
      "op": "JUMPDEST"
    },
    "5317": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5319": {
      "op": "DUP4"
    },
    "5320": {
      "op": "LT"
    },
    "5321": {
      "op": "PUSH2",
      "value": "0x14E3"
    },
    "5324": {
      "op": "JUMPI"
    },
    "5325": {
      "op": "DUP1"
    },
    "5326": {
      "op": "MLOAD"
    },
    "5327": {
      "op": "DUP3"
    },
    "5328": {
      "op": "MSTORE"
    },
    "5329": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5331": {
      "op": "NOT"
    },
    "5332": {
      "op": "SWAP1"
    },
    "5333": {
      "op": "SWAP3"
    },
    "5334": {
      "op": "ADD"
    },
    "5335": {
      "op": "SWAP2"
    },
    "5336": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5338": {
      "op": "SWAP2"
    },
    "5339": {
      "op": "DUP3"
    },
    "5340": {
      "op": "ADD"
    },
    "5341": {
      "op": "SWAP2"
    },
    "5342": {
      "op": "ADD"
    },
    "5343": {
      "op": "PUSH2",
      "value": "0x14C4"
    },
    "5346": {
      "op": "JUMP"
    },
    "5347": {
      "op": "JUMPDEST"
    },
    "5348": {
      "op": "MLOAD"
    },
    "5349": {
      "op": "DUP2"
    },
    "5350": {
      "op": "MLOAD"
    },
    "5351": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5353": {
      "op": "SWAP4"
    },
    "5354": {
      "op": "DUP5"
    },
    "5355": {
      "op": "SUB"
    },
    "5356": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "5359": {
      "op": "EXP"
    },
    "5360": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5362": {
      "op": "NOT"
    },
    "5363": {
      "op": "ADD"
    },
    "5364": {
      "op": "DUP1"
    },
    "5365": {
      "op": "NOT"
    },
    "5366": {
      "op": "SWAP1"
    },
    "5367": {
      "op": "SWAP3"
    },
    "5368": {
      "op": "AND"
    },
    "5369": {
      "op": "SWAP2"
    },
    "5370": {
      "op": "AND"
    },
    "5371": {
      "op": "OR"
    },
    "5372": {
      "op": "SWAP1"
    },
    "5373": {
      "op": "MSTORE"
    },
    "5374": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "5376": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5377": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "5378": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5379": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "5380": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "ADD",
      "path": "11"
    },
    "5381": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "5382": {
      "op": "POP"
    },
    "5383": {
      "op": "SWAP2"
    },
    "5384": {
      "op": "SWAP3"
    },
    "5385": {
      "op": "POP"
    },
    "5386": {
      "op": "POP"
    },
    "5387": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP1",
      "path": "11"
    },
    "5388": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP4",
      "path": "11"
    },
    "5389": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SUB",
      "path": "11"
    },
    "5390": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP2",
      "path": "11"
    },
    "5391": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "DUP6",
      "path": "11"
    },
    "5392": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "GAS",
      "path": "11"
    },
    "5393": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "STATICCALL",
      "path": "11"
    },
    "5394": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "5395": {
      "op": "DUP1"
    },
    "5396": {
      "op": "ISZERO"
    },
    "5397": {
      "op": "PUSH2",
      "value": "0x1522"
    },
    "5400": {
      "op": "JUMPI"
    },
    "5401": {
      "op": "RETURNDATASIZE"
    },
    "5402": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5404": {
      "op": "DUP1"
    },
    "5405": {
      "op": "RETURNDATACOPY"
    },
    "5406": {
      "op": "RETURNDATASIZE"
    },
    "5407": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5409": {
      "op": "REVERT"
    },
    "5410": {
      "op": "JUMPDEST"
    },
    "5411": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "POP",
      "path": "11"
    },
    "5412": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "POP",
      "path": "11"
    },
    "5413": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "POP",
      "path": "11"
    },
    "5414": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "5416": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5417": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "5418": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "5420": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        2000,
        2019
      ],
      "op": "SHL",
      "path": "11"
    },
    "5421": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1991,
        2019
      ],
      "op": "PUSH12",
      "path": "11",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "5434": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1991,
        2019
      ],
      "op": "NOT",
      "path": "11"
    },
    "5435": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1991,
        2019
      ],
      "op": "AND",
      "path": "11"
    },
    "5436": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1991,
        2019
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "5437": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1991,
        2019
      ],
      "op": "POP",
      "path": "11"
    },
    "5438": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1881,
        2030
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "5439": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1639,
        2036
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "5440": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1639,
        2036
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "5441": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1639,
        2036
      ],
      "op": "POP",
      "path": "11"
    },
    "5442": {
      "fn": "SignatureVerifier.hash",
      "offset": [
        1639,
        2036
      ],
      "op": "POP",
      "path": "11"
    },
    "5443": {
      "fn": "SignatureVerifier.hash",
      "jump": "o",
      "offset": [
        1639,
        2036
      ],
      "op": "JUMP",
      "path": "11"
    },
    "5444": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1528,
        9712
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5445": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1698,
        1702
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "5447": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1718,
        1760
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x154E"
    },
    "5450": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1718,
        1760
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x349D"
    },
    "5453": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1718,
        1760
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5454": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1718,
        1760
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5455": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1763,
        1788
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1557"
    },
    "5458": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1763,
        1776
      ],
      "op": "DUP6",
      "path": "10"
    },
    "5459": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1763,
        1786
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x28AE"
    },
    "5462": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1763,
        1788
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5463": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1763,
        1788
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5464": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1718,
        1788
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5465": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1718,
        1788
      ],
      "op": "POP",
      "path": "10"
    },
    "5466": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1798,
        1842
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1561"
    },
    "5469": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1798,
        1842
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3457"
    },
    "5472": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1798,
        1842
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5473": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1798,
        1842
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5474": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1845,
        1872
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x156A"
    },
    "5477": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1845,
        1856
      ],
      "op": "DUP6",
      "path": "10"
    },
    "5478": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1845,
        1870
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x21F7"
    },
    "5481": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1845,
        1872
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5482": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1845,
        1872
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5483": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1798,
        1872
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5484": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1798,
        1872
      ],
      "op": "POP",
      "path": "10"
    },
    "5485": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1882,
        1936
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1574"
    },
    "5488": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1882,
        1936
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3393"
    },
    "5491": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1882,
        1936
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5492": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1882,
        1936
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5493": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1939,
        1976
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x157D"
    },
    "5496": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1939,
        1956
      ],
      "op": "DUP6",
      "path": "10"
    },
    "5497": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1939,
        1974
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1FD1"
    },
    "5500": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1939,
        1976
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5501": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1939,
        1976
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5502": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1882,
        1976
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5503": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1882,
        1976
      ],
      "op": "POP",
      "path": "10"
    },
    "5504": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2072,
        2093
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "5506": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2096,
        2270
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x162F"
    },
    "5509": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2135,
        2147
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5510": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2135,
        2174
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x280"
    },
    "5513": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2135,
        2174
      ],
      "op": "ADD",
      "path": "10"
    },
    "5514": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2135,
        2174
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5515": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2205,
        2211
      ],
      "op": "DUP5",
      "path": "10"
    },
    "5516": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2205,
        2217
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "5518": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2205,
        2217
      ],
      "op": "ADD",
      "path": "10"
    },
    "5519": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2205,
        2217
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5520": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2205,
        2232
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xA0"
    },
    "5522": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2205,
        2232
      ],
      "op": "ADD",
      "path": "10"
    },
    "5523": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2205,
        2232
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5524": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2246
      ],
      "op": "DUP5",
      "path": "10"
    },
    "5525": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2256
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C0"
    },
    "5528": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2256
      ],
      "op": "ADD",
      "path": "10"
    },
    "5529": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2256
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5530": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2257,
        2258
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "5532": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x5"
    },
    "5534": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5535": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "LT",
      "path": "10"
    },
    "5536": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x15A5"
    },
    "5539": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "5540": {
      "dev": "Index out of range",
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "INVALID",
      "path": "10"
    },
    "5541": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5542": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "BYTE",
      "path": "10"
    },
    "5543": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xF8"
    },
    "5545": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2234,
        2259
      ],
      "op": "SHL",
      "path": "10"
    },
    "5546": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5548": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5549": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5551": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "ADD",
      "path": "10"
    },
    "5552": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5553": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP4",
      "path": "10"
    },
    "5554": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5555": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5556": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5557": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5559": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "ADD",
      "path": "10"
    },
    "5560": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5561": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5562": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP4",
      "path": "10"
    },
    "5563": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP4",
      "path": "10"
    },
    "5564": {
      "op": "JUMPDEST"
    },
    "5565": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5567": {
      "op": "DUP4"
    },
    "5568": {
      "op": "LT"
    },
    "5569": {
      "op": "PUSH2",
      "value": "0x15DB"
    },
    "5572": {
      "op": "JUMPI"
    },
    "5573": {
      "op": "DUP1"
    },
    "5574": {
      "op": "MLOAD"
    },
    "5575": {
      "op": "DUP3"
    },
    "5576": {
      "op": "MSTORE"
    },
    "5577": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5579": {
      "op": "NOT"
    },
    "5580": {
      "op": "SWAP1"
    },
    "5581": {
      "op": "SWAP3"
    },
    "5582": {
      "op": "ADD"
    },
    "5583": {
      "op": "SWAP2"
    },
    "5584": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5586": {
      "op": "SWAP2"
    },
    "5587": {
      "op": "DUP3"
    },
    "5588": {
      "op": "ADD"
    },
    "5589": {
      "op": "SWAP2"
    },
    "5590": {
      "op": "ADD"
    },
    "5591": {
      "op": "PUSH2",
      "value": "0x15BC"
    },
    "5594": {
      "op": "JUMP"
    },
    "5595": {
      "op": "JUMPDEST"
    },
    "5596": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5598": {
      "op": "DUP4"
    },
    "5599": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5601": {
      "op": "SUB"
    },
    "5602": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "5605": {
      "op": "EXP"
    },
    "5606": {
      "op": "SUB"
    },
    "5607": {
      "op": "DUP1"
    },
    "5608": {
      "op": "NOT"
    },
    "5609": {
      "op": "DUP3"
    },
    "5610": {
      "op": "MLOAD"
    },
    "5611": {
      "op": "AND"
    },
    "5612": {
      "op": "DUP2"
    },
    "5613": {
      "op": "DUP5"
    },
    "5614": {
      "op": "MLOAD"
    },
    "5615": {
      "op": "AND"
    },
    "5616": {
      "op": "DUP1"
    },
    "5617": {
      "op": "DUP3"
    },
    "5618": {
      "op": "OR"
    },
    "5619": {
      "op": "DUP6"
    },
    "5620": {
      "op": "MSTORE"
    },
    "5621": {
      "op": "POP"
    },
    "5622": {
      "op": "POP"
    },
    "5623": {
      "op": "POP"
    },
    "5624": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "POP",
      "path": "10"
    },
    "5625": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "POP",
      "path": "10"
    },
    "5626": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "POP",
      "path": "10"
    },
    "5627": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5628": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "POP",
      "path": "10"
    },
    "5629": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "ADD",
      "path": "10"
    },
    "5630": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5631": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5633": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5635": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "5637": {
      "op": "SHL"
    },
    "5638": {
      "op": "SUB"
    },
    "5639": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "NOT",
      "path": "10"
    },
    "5640": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "AND",
      "path": "10"
    },
    "5641": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5643": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5645": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "5647": {
      "op": "SHL"
    },
    "5648": {
      "op": "SUB"
    },
    "5649": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "NOT",
      "path": "10"
    },
    "5650": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "AND",
      "path": "10"
    },
    "5651": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5652": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5653": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "5655": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "ADD",
      "path": "10"
    },
    "5656": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "5657": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "POP",
      "path": "10"
    },
    "5658": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "POP",
      "path": "10"
    },
    "5659": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "POP",
      "path": "10"
    },
    "5660": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5662": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5663": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5665": {
      "op": "DUP2"
    },
    "5666": {
      "op": "DUP4"
    },
    "5667": {
      "op": "SUB"
    },
    "5668": {
      "op": "SUB"
    },
    "5669": {
      "op": "DUP2"
    },
    "5670": {
      "op": "MSTORE"
    },
    "5671": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5672": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5674": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2188,
        2260
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5675": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2096,
        2121
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x257F"
    },
    "5678": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        2096,
        2270
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5679": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2096,
        2270
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5680": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2072,
        2270
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5681": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2072,
        2270
      ],
      "op": "POP",
      "path": "10"
    },
    "5682": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2305,
        2317
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 26
    },
    "5683": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2305,
        2336
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2A0"
    },
    "5686": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2305,
        2336
      ],
      "op": "ADD",
      "path": "10"
    },
    "5687": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2305,
        2336
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5688": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5690": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5692": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5694": {
      "op": "SHL"
    },
    "5695": {
      "op": "SUB"
    },
    "5696": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2288,
        2336
      ],
      "op": "AND",
      "path": "10"
    },
    "5697": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2288,
        2301
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5698": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5700": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5702": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5704": {
      "op": "SHL"
    },
    "5705": {
      "op": "SUB"
    },
    "5706": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2288,
        2336
      ],
      "op": "AND",
      "path": "10"
    },
    "5707": {
      "branch": 190,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2288,
        2336
      ],
      "op": "EQ",
      "path": "10"
    },
    "5708": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1692"
    },
    "5711": {
      "branch": 190,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "5712": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5714": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5715": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5716": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5720": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5722": {
      "op": "SHL"
    },
    "5723": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5724": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5725": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5727": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "5729": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5730": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "ADD",
      "path": "10"
    },
    "5731": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5732": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x13"
    },
    "5734": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "5736": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5737": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "ADD",
      "path": "10"
    },
    "5738": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5739": {
      "op": "PUSH19",
      "value": "0x426164204B46726167207369676E6174757265"
    },
    "5759": {
      "op": "PUSH1",
      "value": "0x68"
    },
    "5761": {
      "op": "SHL"
    },
    "5762": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x44"
    },
    "5764": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5765": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "ADD",
      "path": "10"
    },
    "5766": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5767": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5768": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5769": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5770": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5771": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5772": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "SUB",
      "path": "10"
    },
    "5773": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x64"
    },
    "5775": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "ADD",
      "path": "10"
    },
    "5776": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5777": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "REVERT",
      "path": "10"
    },
    "5778": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2280,
        2360
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5779": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2457,
        2466
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "5781": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2469,
        2514
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x169E"
    },
    "5784": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2497,
        2505
      ],
      "op": "DUP6",
      "path": "10"
    },
    "5785": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2507,
        2513
      ],
      "op": "DUP6",
      "path": "10"
    },
    "5786": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2469,
        2496
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2905"
    },
    "5789": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        2469,
        2514
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5790": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2469,
        2514
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5791": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2683,
        2698
      ],
      "op": "DUP6",
      "path": "10",
      "statement": 27
    },
    "5792": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2683,
        2698
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5793": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2683,
        2703
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5794": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2683,
        2703
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5795": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2717,
        2739
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5797": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2717,
        2739
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5798": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2717,
        2739
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "5799": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2717,
        2739
      ],
      "op": "ADD",
      "path": "10"
    },
    "5800": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2717,
        2739
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5801": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2753,
        2778
      ],
      "op": "DUP6",
      "path": "10"
    },
    "5802": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2753,
        2778
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5803": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2457,
        2514
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "5804": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2457,
        2514
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "5805": {
      "op": "POP"
    },
    "5806": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2649,
        2779
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x16B6"
    },
    "5809": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2649,
        2779
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "5810": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2649,
        2669
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "5813": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        2649,
        2779
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5814": {
      "branch": 191,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2649,
        2779
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5815": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x16F1"
    },
    "5818": {
      "branch": 191,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "5819": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5821": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5822": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5826": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5828": {
      "op": "SHL"
    },
    "5829": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5830": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5831": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "5833": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "ADD",
      "path": "10"
    },
    "5834": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5835": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5836": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5838": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "ADD",
      "path": "10"
    },
    "5839": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5840": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5841": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "SUB",
      "path": "10"
    },
    "5842": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5843": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5844": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x46"
    },
    "5846": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5847": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5848": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5850": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "ADD",
      "path": "10"
    },
    "5851": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5852": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x36FD"
    },
    "5855": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x46"
    },
    "5857": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "5858": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "5859": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "5861": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "ADD",
      "path": "10"
    },
    "5862": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "5863": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "POP",
      "path": "10"
    },
    "5864": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "POP",
      "path": "10"
    },
    "5865": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5867": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5868": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5869": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "5870": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "SUB",
      "path": "10"
    },
    "5871": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5872": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "REVERT",
      "path": "10"
    },
    "5873": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2641,
        2875
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5874": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2927,
        2992
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 28,
      "value": "0x1703"
    },
    "5877": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2937,
        2949
      ],
      "op": "DUP4",
      "path": "10"
    },
    "5878": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2937,
        2963
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5880": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2937,
        2963
      ],
      "op": "ADD",
      "path": "10"
    },
    "5881": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2937,
        2963
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5882": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2965,
        2977
      ],
      "op": "DUP5",
      "path": "10"
    },
    "5883": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2965,
        2991
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5885": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2965,
        2991
      ],
      "op": "ADD",
      "path": "10"
    },
    "5886": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2965,
        2991
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5887": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2927,
        2936
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BC1"
    },
    "5890": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        2927,
        2992
      ],
      "op": "JUMP",
      "path": "10"
    },
    "5891": {
      "branch": 192,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2927,
        2992
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5892": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1754"
    },
    "5895": {
      "branch": 192,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "5896": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "5898": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "DUP1",
      "path": "10"
    },
    "5899": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5900": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5904": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5906": {
      "op": "SHL"
    },
    "5907": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5908": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5909": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5911": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "5913": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5914": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "ADD",
      "path": "10"
    },
    "5915": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5916": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5917": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5918": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "5920": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5921": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "ADD",
      "path": "10"
    },
    "5922": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5923": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x506F696E74207A45206973206E6F7420612076616C696420454320706F696E74"
    },
    "5956": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x44"
    },
    "5958": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "DUP3",
      "path": "10"
    },
    "5959": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "ADD",
      "path": "10"
    },
    "5960": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5961": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5962": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5963": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5964": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "DUP2",
      "path": "10"
    },
    "5965": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5966": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "SUB",
      "path": "10"
    },
    "5967": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x64"
    },
    "5969": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "ADD",
      "path": "10"
    },
    "5970": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "5971": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "REVERT",
      "path": "10"
    },
    "5972": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2919,
        3054
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "5973": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3072,
        3327
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 29,
      "value": "0x177D"
    },
    "5976": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3097,
        3105
      ],
      "op": "DUP6",
      "path": "10"
    },
    "5977": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3097,
        3112
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "5979": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3097,
        3112
      ],
      "op": "ADD",
      "path": "10"
    },
    "5980": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3097,
        3112
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5981": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3097,
        3119
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "5983": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3097,
        3119
      ],
      "op": "ADD",
      "path": "10"
    },
    "5984": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3097,
        3119
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5985": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3148,
        3160
      ],
      "op": "DUP5",
      "path": "10"
    },
    "5986": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3148,
        3173
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "5988": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3148,
        3173
      ],
      "op": "ADD",
      "path": "10"
    },
    "5989": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3148,
        3173
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5990": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3199,
        3205
      ],
      "op": "DUP7",
      "path": "10"
    },
    "5991": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3199,
        3211
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "5993": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3199,
        3211
      ],
      "op": "ADD",
      "path": "10"
    },
    "5994": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3199,
        3211
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5995": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3199,
        3217
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "5997": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3199,
        3217
      ],
      "op": "ADD",
      "path": "10"
    },
    "5998": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3199,
        3217
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "5999": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3248,
        3260
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6000": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3248,
        3274
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6002": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3248,
        3274
      ],
      "op": "ADD",
      "path": "10"
    },
    "6003": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3248,
        3274
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6004": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3300,
        3312
      ],
      "op": "DUP8",
      "path": "10"
    },
    "6005": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3300,
        3326
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6007": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3300,
        3326
      ],
      "op": "ADD",
      "path": "10"
    },
    "6008": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3300,
        3326
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6009": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3072,
        3083
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C26"
    },
    "6012": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        3072,
        3327
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6013": {
      "branch": 193,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3072,
        3327
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6014": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x17B8"
    },
    "6017": {
      "branch": 193,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6018": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6020": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6021": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6025": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6027": {
      "op": "SHL"
    },
    "6028": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6029": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6030": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6032": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "ADD",
      "path": "10"
    },
    "6033": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6034": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6035": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6037": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "ADD",
      "path": "10"
    },
    "6038": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6039": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6040": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "SUB",
      "path": "10"
    },
    "6041": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6042": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6043": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6045": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6046": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6047": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6049": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "ADD",
      "path": "10"
    },
    "6050": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6051": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3577"
    },
    "6054": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6056": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6057": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6058": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6060": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "ADD",
      "path": "10"
    },
    "6061": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6062": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "POP",
      "path": "10"
    },
    "6063": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "POP",
      "path": "10"
    },
    "6064": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6066": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6067": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6068": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6069": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "SUB",
      "path": "10"
    },
    "6070": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6071": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6072": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3064,
        3398
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6073": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3483,
        3497
      ],
      "op": "DUP4",
      "path": "10",
      "statement": 30
    },
    "6074": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3483,
        3497
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6075": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3483,
        3502
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6076": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3483,
        3502
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6077": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3536,
        3557
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6079": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3536,
        3557
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6080": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3536,
        3557
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6081": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3536,
        3557
      ],
      "op": "ADD",
      "path": "10"
    },
    "6082": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3536,
        3557
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6083": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3586,
        3612
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "6085": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3586,
        3612
      ],
      "op": "DUP6",
      "path": "10"
    },
    "6086": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3586,
        3612
      ],
      "op": "ADD",
      "path": "10"
    },
    "6087": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3586,
        3612
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6088": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3449,
        3613
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x17D2"
    },
    "6091": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3449,
        3613
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "6092": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3483,
        3502
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6093": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3536,
        3557
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6094": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3449,
        3469
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "6097": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        3449,
        3613
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6098": {
      "branch": 194,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3449,
        3613
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6099": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x180D"
    },
    "6102": {
      "branch": 194,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6103": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6105": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6106": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6110": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6112": {
      "op": "SHL"
    },
    "6113": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6114": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6115": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6117": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "ADD",
      "path": "10"
    },
    "6118": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6119": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6120": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6122": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "ADD",
      "path": "10"
    },
    "6123": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6124": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6125": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "SUB",
      "path": "10"
    },
    "6126": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6127": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6128": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "6130": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6131": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6132": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6134": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "ADD",
      "path": "10"
    },
    "6135": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6136": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x381A"
    },
    "6139": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "6141": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6142": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6143": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "6145": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "ADD",
      "path": "10"
    },
    "6146": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6147": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "POP",
      "path": "10"
    },
    "6148": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "POP",
      "path": "10"
    },
    "6149": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6151": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6152": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6153": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6154": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "SUB",
      "path": "10"
    },
    "6155": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6156": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6157": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3441,
        3720
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6158": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3773,
        3840
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 31,
      "value": "0x181F"
    },
    "6161": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3783,
        3795
      ],
      "op": "DUP4",
      "path": "10"
    },
    "6162": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3783,
        3810
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "6164": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3783,
        3810
      ],
      "op": "ADD",
      "path": "10"
    },
    "6165": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3783,
        3810
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6166": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3812,
        3824
      ],
      "op": "DUP5",
      "path": "10"
    },
    "6167": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3812,
        3839
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xA0"
    },
    "6169": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3812,
        3839
      ],
      "op": "ADD",
      "path": "10"
    },
    "6170": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3812,
        3839
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6171": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3773,
        3782
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BC1"
    },
    "6174": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        3773,
        3840
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6175": {
      "branch": 195,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3773,
        3840
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6176": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x185A"
    },
    "6179": {
      "branch": 195,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6180": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6182": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6183": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6187": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6189": {
      "op": "SHL"
    },
    "6190": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6191": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6192": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6194": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "ADD",
      "path": "10"
    },
    "6195": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6196": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6197": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6199": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "ADD",
      "path": "10"
    },
    "6200": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6201": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6202": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "SUB",
      "path": "10"
    },
    "6203": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6204": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6205": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6207": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6208": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6209": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6211": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "ADD",
      "path": "10"
    },
    "6212": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6213": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3862"
    },
    "6216": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6218": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6219": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6220": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6222": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "ADD",
      "path": "10"
    },
    "6223": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6224": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "POP",
      "path": "10"
    },
    "6225": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "POP",
      "path": "10"
    },
    "6226": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6228": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6229": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6230": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6231": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "SUB",
      "path": "10"
    },
    "6232": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6233": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6234": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3765,
        3904
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6235": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3922,
        4147
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 32,
      "value": "0x187B"
    },
    "6238": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3947,
        3953
      ],
      "op": "DUP5",
      "path": "10"
    },
    "6239": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3947,
        3961
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "6241": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3947,
        3961
      ],
      "op": "ADD",
      "path": "10"
    },
    "6242": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3947,
        3961
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6243": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3947,
        3968
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6245": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3947,
        3968
      ],
      "op": "ADD",
      "path": "10"
    },
    "6246": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3947,
        3968
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6247": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3999,
        4011
      ],
      "op": "DUP5",
      "path": "10"
    },
    "6248": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3999,
        4025
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "6250": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3999,
        4025
      ],
      "op": "ADD",
      "path": "10"
    },
    "6251": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3999,
        4025
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6252": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4051,
        4052
      ],
      "op": "DUP4",
      "path": "10"
    },
    "6253": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4066,
        4078
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6254": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4066,
        4093
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "6256": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4066,
        4093
      ],
      "op": "ADD",
      "path": "10"
    },
    "6257": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4066,
        4093
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6258": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4119,
        4131
      ],
      "op": "DUP8",
      "path": "10"
    },
    "6259": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4119,
        4146
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xA0"
    },
    "6261": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4119,
        4146
      ],
      "op": "ADD",
      "path": "10"
    },
    "6262": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4119,
        4146
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6263": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3922,
        3933
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C26"
    },
    "6266": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        3922,
        4147
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6267": {
      "branch": 196,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3922,
        4147
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6268": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x18B6"
    },
    "6271": {
      "branch": 196,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6272": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6274": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6275": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6279": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6281": {
      "op": "SHL"
    },
    "6282": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6283": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6284": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6286": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "ADD",
      "path": "10"
    },
    "6287": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6288": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6289": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6291": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "ADD",
      "path": "10"
    },
    "6292": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6293": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6294": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "SUB",
      "path": "10"
    },
    "6295": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6296": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6297": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x23"
    },
    "6299": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6300": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6301": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6303": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "ADD",
      "path": "10"
    },
    "6304": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6305": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3978"
    },
    "6308": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x23"
    },
    "6310": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6311": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6312": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6314": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "ADD",
      "path": "10"
    },
    "6315": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6316": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "POP",
      "path": "10"
    },
    "6317": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "POP",
      "path": "10"
    },
    "6318": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6320": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6321": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6322": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6323": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "SUB",
      "path": "10"
    },
    "6324": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6325": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6326": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3914,
        4219
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6327": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4316
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 33,
      "value": "0x80"
    },
    "6329": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4316
      ],
      "op": "DUP5",
      "path": "10"
    },
    "6330": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4316
      ],
      "op": "ADD",
      "path": "10"
    },
    "6331": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4316
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6332": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4324
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6333": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4329
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6334": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4329
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6335": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4361,
        4388
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6337": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4361,
        4388
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6338": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4361,
        4388
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6339": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4361,
        4388
      ],
      "op": "ADD",
      "path": "10"
    },
    "6340": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4361,
        4388
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6341": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4415,
        4441
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xC0"
    },
    "6343": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4415,
        4441
      ],
      "op": "DUP6",
      "path": "10"
    },
    "6344": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4415,
        4441
      ],
      "op": "ADD",
      "path": "10"
    },
    "6345": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4415,
        4441
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6346": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4270,
        4442
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x18D4"
    },
    "6349": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4270,
        4442
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "6350": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4304,
        4329
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6351": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4361,
        4388
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6352": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4270,
        4290
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "6355": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        4270,
        4442
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6356": {
      "branch": 197,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4270,
        4442
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6357": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x190F"
    },
    "6360": {
      "branch": 197,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6361": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6363": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6364": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6368": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6370": {
      "op": "SHL"
    },
    "6371": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6372": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6373": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6375": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "ADD",
      "path": "10"
    },
    "6376": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6377": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6378": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6380": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "ADD",
      "path": "10"
    },
    "6381": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6382": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6383": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "SUB",
      "path": "10"
    },
    "6384": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6385": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6386": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "6388": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6389": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6390": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6392": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "ADD",
      "path": "10"
    },
    "6393": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6394": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3930"
    },
    "6397": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "6399": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6400": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6401": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "6403": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "ADD",
      "path": "10"
    },
    "6404": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6405": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "POP",
      "path": "10"
    },
    "6406": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "POP",
      "path": "10"
    },
    "6407": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6409": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6410": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6411": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6412": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "SUB",
      "path": "10"
    },
    "6413": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6414": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6415": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4262,
        4553
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6416": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4564,
        4583
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "6418": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1980"
    },
    "6421": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6423": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6424": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6425": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6427": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "ADD",
      "path": "10"
    },
    "6428": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6430": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6431": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6432": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4617,
        4629
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6433": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4617,
        4643
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6435": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4617,
        4643
      ],
      "op": "ADD",
      "path": "10"
    },
    "6436": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4617,
        4643
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6437": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6438": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6439": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6441": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "ADD",
      "path": "10"
    },
    "6442": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4646,
        4658
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6443": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4646,
        4672
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6445": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4646,
        4672
      ],
      "op": "ADD",
      "path": "10"
    },
    "6446": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4646,
        4672
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6447": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6448": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6449": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "POP",
      "path": "10"
    },
    "6450": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x197B"
    },
    "6453": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6455": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6456": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6457": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6459": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "ADD",
      "path": "10"
    },
    "6460": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6462": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6463": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6464": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4729
      ],
      "op": "DUP10",
      "path": "10"
    },
    "6465": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4735
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "6467": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4735
      ],
      "op": "ADD",
      "path": "10"
    },
    "6468": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4735
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6469": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "6471": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4743
      ],
      "op": "ADD",
      "path": "10"
    },
    "6472": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4743
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6473": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4750
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6475": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4750
      ],
      "op": "ADD",
      "path": "10"
    },
    "6476": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4723,
        4750
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6477": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6478": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6479": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6481": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "ADD",
      "path": "10"
    },
    "6482": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4752,
        4764
      ],
      "op": "DUP9",
      "path": "10"
    },
    "6483": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4752,
        4778
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xC0"
    },
    "6485": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4752,
        4778
      ],
      "op": "ADD",
      "path": "10"
    },
    "6486": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4752,
        4778
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6487": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6488": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6489": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "POP",
      "path": "10"
    },
    "6490": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6492": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6493": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6494": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6496": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "ADD",
      "path": "10"
    },
    "6497": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6499": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6500": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6501": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4798,
        4810
      ],
      "op": "DUP10",
      "path": "10"
    },
    "6502": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4798,
        4825
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "6504": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4798,
        4825
      ],
      "op": "ADD",
      "path": "10"
    },
    "6505": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4798,
        4825
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6506": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6507": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6508": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6510": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "ADD",
      "path": "10"
    },
    "6511": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4827,
        4839
      ],
      "op": "DUP10",
      "path": "10"
    },
    "6512": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4827,
        4854
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xA0"
    },
    "6514": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4827,
        4854
      ],
      "op": "ADD",
      "path": "10"
    },
    "6515": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4827,
        4854
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6516": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6517": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6518": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "POP",
      "path": "10"
    },
    "6519": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4704
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2CEC"
    },
    "6522": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        4687,
        4869
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6523": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4687,
        4869
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6524": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4602
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2E14"
    },
    "6527": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        4586,
        4879
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6528": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4586,
        4879
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6529": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4564,
        4879
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6530": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4564,
        4879
      ],
      "op": "POP",
      "path": "10"
    },
    "6531": {
      "branch": 198,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4895,
        4909
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6532": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4890,
        4947
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1996"
    },
    "6535": {
      "branch": 198,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4890,
        4947
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6536": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4931,
        4936
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 34,
      "value": "0x0"
    },
    "6538": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "6539": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "POP",
      "path": "10"
    },
    "6540": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "POP",
      "path": "10"
    },
    "6541": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "POP",
      "path": "10"
    },
    "6542": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "POP",
      "path": "10"
    },
    "6543": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "POP",
      "path": "10"
    },
    "6544": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "POP",
      "path": "10"
    },
    "6545": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "POP",
      "path": "10"
    },
    "6546": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1F6A"
    },
    "6549": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4924,
        4936
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6550": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4890,
        4947
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6551": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5130
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 35,
      "value": "0x20"
    },
    "6553": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5130
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6554": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5130
      ],
      "op": "DUP8",
      "path": "10"
    },
    "6555": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5130
      ],
      "op": "ADD",
      "path": "10"
    },
    "6556": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5130
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6557": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5135
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6558": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5135
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6559": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5149,
        5171
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6560": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5149,
        5171
      ],
      "op": "ADD",
      "path": "10"
    },
    "6561": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5149,
        5171
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6562": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5185,
        5210
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xE0"
    },
    "6564": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5185,
        5210
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6565": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5185,
        5210
      ],
      "op": "ADD",
      "path": "10"
    },
    "6566": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5185,
        5210
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6567": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5081,
        5211
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x19B1"
    },
    "6570": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5081,
        5211
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "6571": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5115,
        5135
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6572": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5149,
        5171
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6573": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5081,
        5101
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "6576": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        5081,
        5211
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6577": {
      "branch": 199,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5081,
        5211
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6578": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x19EC"
    },
    "6581": {
      "branch": 199,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6582": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6584": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6585": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6589": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6591": {
      "op": "SHL"
    },
    "6592": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6593": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6594": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6596": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "ADD",
      "path": "10"
    },
    "6597": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6598": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6599": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6601": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "ADD",
      "path": "10"
    },
    "6602": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6603": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6604": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "SUB",
      "path": "10"
    },
    "6605": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6606": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6607": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x46"
    },
    "6609": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6610": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6611": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6613": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "ADD",
      "path": "10"
    },
    "6614": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6615": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3743"
    },
    "6618": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x46"
    },
    "6620": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6621": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6622": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "6624": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "ADD",
      "path": "10"
    },
    "6625": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6626": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "POP",
      "path": "10"
    },
    "6627": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "POP",
      "path": "10"
    },
    "6628": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6630": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6631": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6632": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6633": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "SUB",
      "path": "10"
    },
    "6634": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6635": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6636": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5073,
        5307
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6637": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5359,
        5424
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 36,
      "value": "0x1A00"
    },
    "6640": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5369,
        5381
      ],
      "op": "DUP5",
      "path": "10"
    },
    "6641": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5369,
        5395
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "6644": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5369,
        5395
      ],
      "op": "ADD",
      "path": "10"
    },
    "6645": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5369,
        5395
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6646": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5397,
        5409
      ],
      "op": "DUP6",
      "path": "10"
    },
    "6647": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5397,
        5423
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x120"
    },
    "6650": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5397,
        5423
      ],
      "op": "ADD",
      "path": "10"
    },
    "6651": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5397,
        5423
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6652": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5359,
        5368
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BC1"
    },
    "6655": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        5359,
        5424
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6656": {
      "branch": 200,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5359,
        5424
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6657": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1A51"
    },
    "6660": {
      "branch": 200,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6661": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6663": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6664": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6665": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6669": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6671": {
      "op": "SHL"
    },
    "6672": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6673": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6674": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6676": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6678": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6679": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "ADD",
      "path": "10"
    },
    "6680": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6681": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6682": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6683": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "6685": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6686": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "ADD",
      "path": "10"
    },
    "6687": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6688": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x506F696E74207A56206973206E6F7420612076616C696420454320706F696E74"
    },
    "6721": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x44"
    },
    "6723": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6724": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "ADD",
      "path": "10"
    },
    "6725": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6726": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6727": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6728": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6729": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6730": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6731": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "SUB",
      "path": "10"
    },
    "6732": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x64"
    },
    "6734": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "ADD",
      "path": "10"
    },
    "6735": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6736": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6737": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5351,
        5486
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6738": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5504,
        5759
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 37,
      "value": "0x1A7C"
    },
    "6741": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5529,
        5537
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6742": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5529,
        5544
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6744": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5529,
        5544
      ],
      "op": "ADD",
      "path": "10"
    },
    "6745": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5529,
        5544
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6746": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5529,
        5551
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6748": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5529,
        5551
      ],
      "op": "ADD",
      "path": "10"
    },
    "6749": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5529,
        5551
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6750": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5580,
        5592
      ],
      "op": "DUP6",
      "path": "10"
    },
    "6751": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5580,
        5605
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xE0"
    },
    "6753": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5580,
        5605
      ],
      "op": "ADD",
      "path": "10"
    },
    "6754": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5580,
        5605
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6755": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5631,
        5637
      ],
      "op": "DUP8",
      "path": "10"
    },
    "6756": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5631,
        5643
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "6758": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5631,
        5643
      ],
      "op": "ADD",
      "path": "10"
    },
    "6759": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5631,
        5643
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6760": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5631,
        5649
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "6762": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5631,
        5649
      ],
      "op": "ADD",
      "path": "10"
    },
    "6763": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5631,
        5649
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6764": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5680,
        5692
      ],
      "op": "DUP8",
      "path": "10"
    },
    "6765": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5680,
        5706
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "6768": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5680,
        5706
      ],
      "op": "ADD",
      "path": "10"
    },
    "6769": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5680,
        5706
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6770": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5732,
        5744
      ],
      "op": "DUP9",
      "path": "10"
    },
    "6771": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5732,
        5758
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x120"
    },
    "6774": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5732,
        5758
      ],
      "op": "ADD",
      "path": "10"
    },
    "6775": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5732,
        5758
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6776": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5504,
        5515
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C26"
    },
    "6779": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        5504,
        5759
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6780": {
      "branch": 201,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5504,
        5759
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6781": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1AB7"
    },
    "6784": {
      "branch": 201,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6785": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6787": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6788": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6792": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6794": {
      "op": "SHL"
    },
    "6795": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6796": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6797": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6799": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "ADD",
      "path": "10"
    },
    "6800": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6801": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6802": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6804": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "ADD",
      "path": "10"
    },
    "6805": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6806": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6807": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "SUB",
      "path": "10"
    },
    "6808": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6809": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6810": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6812": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6813": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6814": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6816": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "ADD",
      "path": "10"
    },
    "6817": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6818": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3671"
    },
    "6821": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6823": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6824": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6825": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6827": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "ADD",
      "path": "10"
    },
    "6828": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6829": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "POP",
      "path": "10"
    },
    "6830": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "POP",
      "path": "10"
    },
    "6831": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6833": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6834": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6835": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6836": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "SUB",
      "path": "10"
    },
    "6837": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6838": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6839": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5496,
        5830
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6840": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5929
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 38,
      "value": "0x20"
    },
    "6842": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5929
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6843": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5929
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6844": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5929
      ],
      "op": "ADD",
      "path": "10"
    },
    "6845": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5929
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6846": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5934
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6847": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5934
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6848": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5967,
        5988
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6849": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5967,
        5988
      ],
      "op": "ADD",
      "path": "10"
    },
    "6850": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5967,
        5988
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6851": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6016,
        6042
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x140"
    },
    "6854": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6016,
        6042
      ],
      "op": "DUP7",
      "path": "10"
    },
    "6855": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6016,
        6042
      ],
      "op": "ADD",
      "path": "10"
    },
    "6856": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6016,
        6042
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6857": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5881,
        6043
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1AD3"
    },
    "6860": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5881,
        6043
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "6861": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5915,
        5934
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6862": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5967,
        5988
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6863": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5881,
        5901
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "6866": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        5881,
        6043
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6867": {
      "branch": 202,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5881,
        6043
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6868": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1B0E"
    },
    "6871": {
      "branch": 202,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6872": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6874": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6875": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6879": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6881": {
      "op": "SHL"
    },
    "6882": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6883": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6884": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6886": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "ADD",
      "path": "10"
    },
    "6887": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6888": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6889": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6891": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "ADD",
      "path": "10"
    },
    "6892": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6893": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6894": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "SUB",
      "path": "10"
    },
    "6895": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6896": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6897": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "6899": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6900": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6901": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6903": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "ADD",
      "path": "10"
    },
    "6904": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6905": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x37AB"
    },
    "6908": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "6910": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6911": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6912": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "6914": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "ADD",
      "path": "10"
    },
    "6915": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6916": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "POP",
      "path": "10"
    },
    "6917": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "POP",
      "path": "10"
    },
    "6918": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6920": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6921": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6922": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6923": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "SUB",
      "path": "10"
    },
    "6924": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "6925": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "REVERT",
      "path": "10"
    },
    "6926": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5873,
        6149
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6927": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6202,
        6269
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 39,
      "value": "0x1B22"
    },
    "6930": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6212,
        6224
      ],
      "op": "DUP5",
      "path": "10"
    },
    "6931": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6212,
        6239
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x160"
    },
    "6934": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6212,
        6239
      ],
      "op": "ADD",
      "path": "10"
    },
    "6935": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6212,
        6239
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6936": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6241,
        6253
      ],
      "op": "DUP6",
      "path": "10"
    },
    "6937": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6241,
        6268
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x180"
    },
    "6940": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6241,
        6268
      ],
      "op": "ADD",
      "path": "10"
    },
    "6941": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6241,
        6268
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6942": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6202,
        6211
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BC1"
    },
    "6945": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        6202,
        6269
      ],
      "op": "JUMP",
      "path": "10"
    },
    "6946": {
      "branch": 203,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6202,
        6269
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "6947": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1B5D"
    },
    "6950": {
      "branch": 203,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "6951": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6953": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "6954": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6958": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6960": {
      "op": "SHL"
    },
    "6961": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6962": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6963": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "6965": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "ADD",
      "path": "10"
    },
    "6966": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6967": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6968": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6970": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "ADD",
      "path": "10"
    },
    "6971": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6972": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6973": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "SUB",
      "path": "10"
    },
    "6974": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP3",
      "path": "10"
    },
    "6975": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6976": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6978": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP2",
      "path": "10"
    },
    "6979": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "6980": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "6982": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "ADD",
      "path": "10"
    },
    "6983": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP1",
      "path": "10"
    },
    "6984": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x38EB"
    },
    "6987": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "6989": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6990": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "6991": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6993": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "ADD",
      "path": "10"
    },
    "6994": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "6995": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "POP",
      "path": "10"
    },
    "6996": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "POP",
      "path": "10"
    },
    "6997": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "6999": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7000": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7001": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7002": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "SUB",
      "path": "10"
    },
    "7003": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7004": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7005": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6194,
        6329
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7006": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6347,
        6573
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 40,
      "value": "0x1B81"
    },
    "7009": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6372,
        6378
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7010": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6372,
        6386
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7012": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6372,
        6386
      ],
      "op": "ADD",
      "path": "10"
    },
    "7013": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6372,
        6386
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7014": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6372,
        6393
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7016": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6372,
        6393
      ],
      "op": "ADD",
      "path": "10"
    },
    "7017": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6372,
        6393
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7018": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6424,
        6436
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7019": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6424,
        6450
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x140"
    },
    "7022": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6424,
        6450
      ],
      "op": "ADD",
      "path": "10"
    },
    "7023": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6424,
        6450
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7024": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6476,
        6477
      ],
      "op": "DUP5",
      "path": "10"
    },
    "7025": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6491,
        6503
      ],
      "op": "DUP8",
      "path": "10"
    },
    "7026": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6491,
        6518
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x160"
    },
    "7029": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6491,
        6518
      ],
      "op": "ADD",
      "path": "10"
    },
    "7030": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6491,
        6518
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7031": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6545,
        6557
      ],
      "op": "DUP9",
      "path": "10"
    },
    "7032": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6545,
        6572
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x180"
    },
    "7035": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6545,
        6572
      ],
      "op": "ADD",
      "path": "10"
    },
    "7036": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6545,
        6572
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7037": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6347,
        6358
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C26"
    },
    "7040": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        6347,
        6573
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7041": {
      "branch": 204,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6347,
        6573
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7042": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1BBC"
    },
    "7045": {
      "branch": 204,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7046": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7048": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7049": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7053": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7055": {
      "op": "SHL"
    },
    "7056": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7057": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7058": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7060": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "ADD",
      "path": "10"
    },
    "7061": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7062": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7063": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7065": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "ADD",
      "path": "10"
    },
    "7066": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7067": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7068": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "SUB",
      "path": "10"
    },
    "7069": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7070": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7071": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x23"
    },
    "7073": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7074": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7075": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7077": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "ADD",
      "path": "10"
    },
    "7078": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7079": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x390D"
    },
    "7082": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x23"
    },
    "7084": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7085": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7086": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7088": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "ADD",
      "path": "10"
    },
    "7089": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7090": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "POP",
      "path": "10"
    },
    "7091": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "POP",
      "path": "10"
    },
    "7092": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7094": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7095": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7096": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7097": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "SUB",
      "path": "10"
    },
    "7098": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7099": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7100": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6339,
        6646
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7101": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6743
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 41,
      "value": "0x80"
    },
    "7103": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6743
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7104": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6743
      ],
      "op": "ADD",
      "path": "10"
    },
    "7105": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6743
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7106": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6751
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7108": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6751
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7109": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6751
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7110": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6751
      ],
      "op": "ADD",
      "path": "10"
    },
    "7111": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6751
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7112": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6756
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7113": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6756
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7114": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6788,
        6815
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7115": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6788,
        6815
      ],
      "op": "ADD",
      "path": "10"
    },
    "7116": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6788,
        6815
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7117": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6842,
        6868
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1A0"
    },
    "7120": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6842,
        6868
      ],
      "op": "DUP7",
      "path": "10"
    },
    "7121": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6842,
        6868
      ],
      "op": "ADD",
      "path": "10"
    },
    "7122": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6842,
        6868
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7123": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6697,
        6869
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1BDD"
    },
    "7126": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6697,
        6869
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "7127": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6731,
        6756
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7128": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6788,
        6815
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7129": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6697,
        6717
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "7132": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        6697,
        6869
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7133": {
      "branch": 205,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6697,
        6869
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7134": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1C18"
    },
    "7137": {
      "branch": 205,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7138": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7140": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7141": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7145": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7147": {
      "op": "SHL"
    },
    "7148": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7149": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7150": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7152": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "ADD",
      "path": "10"
    },
    "7153": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7154": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7155": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7157": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "ADD",
      "path": "10"
    },
    "7158": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7159": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7160": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "SUB",
      "path": "10"
    },
    "7161": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7162": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7163": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "7165": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7166": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7167": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7169": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "ADD",
      "path": "10"
    },
    "7170": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7171": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3693"
    },
    "7174": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "7176": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7177": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7178": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "7180": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "ADD",
      "path": "10"
    },
    "7181": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7182": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "POP",
      "path": "10"
    },
    "7183": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "POP",
      "path": "10"
    },
    "7184": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7186": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7187": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7188": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7189": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "SUB",
      "path": "10"
    },
    "7190": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7191": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7192": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6689,
        6980
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7193": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 42,
      "value": "0x1C87"
    },
    "7196": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7198": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7199": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7200": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7202": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "ADD",
      "path": "10"
    },
    "7203": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7205": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7206": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7207": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7039,
        7051
      ],
      "op": "DUP7",
      "path": "10"
    },
    "7208": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7039,
        7065
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "7211": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7039,
        7065
      ],
      "op": "ADD",
      "path": "10"
    },
    "7212": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7039,
        7065
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7213": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7214": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7215": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7217": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "ADD",
      "path": "10"
    },
    "7218": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7068,
        7080
      ],
      "op": "DUP7",
      "path": "10"
    },
    "7219": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7068,
        7094
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x120"
    },
    "7222": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7068,
        7094
      ],
      "op": "ADD",
      "path": "10"
    },
    "7223": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7068,
        7094
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7224": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7225": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7226": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "POP",
      "path": "10"
    },
    "7227": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x197B"
    },
    "7230": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7232": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7233": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7234": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7236": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "ADD",
      "path": "10"
    },
    "7237": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7239": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7240": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7241": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7151
      ],
      "op": "DUP10",
      "path": "10"
    },
    "7242": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7157
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "7244": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7157
      ],
      "op": "ADD",
      "path": "10"
    },
    "7245": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7157
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7246": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7165
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7248": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7165
      ],
      "op": "ADD",
      "path": "10"
    },
    "7249": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7165
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7250": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7172
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7252": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7172
      ],
      "op": "ADD",
      "path": "10"
    },
    "7253": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7145,
        7172
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7254": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7255": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7256": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7258": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "ADD",
      "path": "10"
    },
    "7259": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7174,
        7186
      ],
      "op": "DUP9",
      "path": "10"
    },
    "7260": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7174,
        7200
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1A0"
    },
    "7263": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7174,
        7200
      ],
      "op": "ADD",
      "path": "10"
    },
    "7264": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7174,
        7200
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7265": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7266": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7267": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "POP",
      "path": "10"
    },
    "7268": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7270": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7271": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7272": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7274": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "ADD",
      "path": "10"
    },
    "7275": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7277": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7278": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7279": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7220,
        7232
      ],
      "op": "DUP10",
      "path": "10"
    },
    "7280": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7220,
        7247
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x160"
    },
    "7283": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7220,
        7247
      ],
      "op": "ADD",
      "path": "10"
    },
    "7284": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7220,
        7247
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7285": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7286": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7287": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7289": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "ADD",
      "path": "10"
    },
    "7290": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7249,
        7261
      ],
      "op": "DUP10",
      "path": "10"
    },
    "7291": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7249,
        7276
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x180"
    },
    "7294": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7249,
        7276
      ],
      "op": "ADD",
      "path": "10"
    },
    "7295": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7249,
        7276
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7296": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7297": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7298": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7291
      ],
      "op": "POP",
      "path": "10"
    },
    "7299": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7109,
        7126
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2CEC"
    },
    "7302": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        7109,
        7291
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7303": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7008,
        7301
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7304": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6991,
        7301
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7305": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6991,
        7301
      ],
      "op": "POP",
      "path": "10"
    },
    "7306": {
      "branch": 206,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7317,
        7331
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7307": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7312,
        7369
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1C9D"
    },
    "7310": {
      "branch": 206,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7312,
        7369
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7311": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7353,
        7358
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 43,
      "value": "0x0"
    },
    "7313": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "7314": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "POP",
      "path": "10"
    },
    "7315": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "POP",
      "path": "10"
    },
    "7316": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "POP",
      "path": "10"
    },
    "7317": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "POP",
      "path": "10"
    },
    "7318": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "POP",
      "path": "10"
    },
    "7319": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "POP",
      "path": "10"
    },
    "7320": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "POP",
      "path": "10"
    },
    "7321": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1F6A"
    },
    "7324": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7346,
        7358
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7325": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7312,
        7369
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7326": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7577,
        7642
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 44,
      "value": "0x1CB1"
    },
    "7329": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7587,
        7599
      ],
      "op": "DUP5",
      "path": "10"
    },
    "7330": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7587,
        7613
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1C0"
    },
    "7333": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7587,
        7613
      ],
      "op": "ADD",
      "path": "10"
    },
    "7334": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7587,
        7613
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7335": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7615,
        7627
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7336": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7615,
        7641
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1E0"
    },
    "7339": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7615,
        7641
      ],
      "op": "ADD",
      "path": "10"
    },
    "7340": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7615,
        7641
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7341": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7577,
        7586
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BC1"
    },
    "7344": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        7577,
        7642
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7345": {
      "branch": 207,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7577,
        7642
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7346": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1CEC"
    },
    "7349": {
      "branch": 207,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7350": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7352": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7353": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7357": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7359": {
      "op": "SHL"
    },
    "7360": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7361": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7362": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7364": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "ADD",
      "path": "10"
    },
    "7365": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7366": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7367": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7369": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "ADD",
      "path": "10"
    },
    "7370": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7371": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7372": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "SUB",
      "path": "10"
    },
    "7373": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7374": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7375": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x21"
    },
    "7377": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7378": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7379": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7381": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "ADD",
      "path": "10"
    },
    "7382": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7383": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x38A9"
    },
    "7386": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x21"
    },
    "7388": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7389": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7390": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7392": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "ADD",
      "path": "10"
    },
    "7393": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7394": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "POP",
      "path": "10"
    },
    "7395": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "POP",
      "path": "10"
    },
    "7396": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7398": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7399": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7400": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7401": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "SUB",
      "path": "10"
    },
    "7402": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7403": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7404": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7569,
        7705
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7405": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7723,
        7978
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 45,
      "value": "0x1D4B"
    },
    "7408": {
      "offset": [
        616,
        682
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F"
    },
    "7441": {
      "offset": [
        740,
        806
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x7880ED56962D7C0AE44D6F14BB53B5FE64B31EA44A41D0316F3A598778F0F936"
    },
    "7474": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7850,
        7856
      ],
      "op": "DUP8",
      "path": "10"
    },
    "7475": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7850,
        7862
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "7477": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7850,
        7862
      ],
      "op": "ADD",
      "path": "10"
    },
    "7478": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7850,
        7862
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7479": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7850,
        7868
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "7481": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7850,
        7868
      ],
      "op": "ADD",
      "path": "10"
    },
    "7482": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7850,
        7868
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7483": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7899,
        7911
      ],
      "op": "DUP8",
      "path": "10"
    },
    "7484": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7899,
        7925
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1C0"
    },
    "7487": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7899,
        7925
      ],
      "op": "ADD",
      "path": "10"
    },
    "7488": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7899,
        7925
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7489": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7951,
        7963
      ],
      "op": "DUP9",
      "path": "10"
    },
    "7490": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7951,
        7977
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1E0"
    },
    "7493": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7951,
        7977
      ],
      "op": "ADD",
      "path": "10"
    },
    "7494": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7951,
        7977
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7495": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7723,
        7734
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C26"
    },
    "7498": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        7723,
        7978
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7499": {
      "branch": 208,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7723,
        7978
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7500": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1D86"
    },
    "7503": {
      "branch": 208,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7504": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7506": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7507": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7511": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7513": {
      "op": "SHL"
    },
    "7514": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7515": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7516": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7518": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "ADD",
      "path": "10"
    },
    "7519": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7520": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7521": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7523": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "ADD",
      "path": "10"
    },
    "7524": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7525": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7526": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "SUB",
      "path": "10"
    },
    "7527": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7528": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7529": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "7531": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7532": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7533": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7535": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "ADD",
      "path": "10"
    },
    "7536": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7537": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x36DB"
    },
    "7540": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "7542": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7543": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7544": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7546": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "ADD",
      "path": "10"
    },
    "7547": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7548": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "POP",
      "path": "10"
    },
    "7549": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "POP",
      "path": "10"
    },
    "7550": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7552": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7553": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7554": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7555": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "SUB",
      "path": "10"
    },
    "7556": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7557": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7558": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7715,
        8049
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7559": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8172
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 46,
      "value": "0x80"
    },
    "7561": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8172
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7562": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8172
      ],
      "op": "ADD",
      "path": "10"
    },
    "7563": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8172
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7564": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8193
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7566": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8193
      ],
      "op": "ADD",
      "path": "10"
    },
    "7567": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8193
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7568": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8198
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7569": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8198
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7570": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8227,
        8267
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7572": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8227,
        8267
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7573": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8227,
        8267
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7574": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8227,
        8267
      ],
      "op": "ADD",
      "path": "10"
    },
    "7575": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8227,
        8267
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7576": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8291,
        8317
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x200"
    },
    "7579": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8291,
        8317
      ],
      "op": "DUP7",
      "path": "10"
    },
    "7580": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8291,
        8317
      ],
      "op": "ADD",
      "path": "10"
    },
    "7581": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8291,
        8317
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7582": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8126,
        8318
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1DA8"
    },
    "7585": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8126,
        8318
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "7586": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8160,
        8198
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7587": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8227,
        8267
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7588": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8126,
        8146
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "7591": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        8126,
        8318
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7592": {
      "branch": 209,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8126,
        8318
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7593": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1DE3"
    },
    "7596": {
      "branch": 209,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7597": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7599": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7600": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7604": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7606": {
      "op": "SHL"
    },
    "7607": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7608": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7609": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7611": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "ADD",
      "path": "10"
    },
    "7612": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7613": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7614": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7616": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "ADD",
      "path": "10"
    },
    "7617": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7618": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7619": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "SUB",
      "path": "10"
    },
    "7620": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7621": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7622": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "7624": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7625": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7626": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7628": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "ADD",
      "path": "10"
    },
    "7629": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7630": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3629"
    },
    "7633": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "7635": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7636": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7637": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "7639": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "ADD",
      "path": "10"
    },
    "7640": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7641": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "POP",
      "path": "10"
    },
    "7642": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "POP",
      "path": "10"
    },
    "7643": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7645": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7646": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7647": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7648": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "SUB",
      "path": "10"
    },
    "7649": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7650": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7651": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8118,
        8439
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7652": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8492,
        8559
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 47,
      "value": "0x1DF7"
    },
    "7655": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8502,
        8514
      ],
      "op": "DUP5",
      "path": "10"
    },
    "7656": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8502,
        8529
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x220"
    },
    "7659": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8502,
        8529
      ],
      "op": "ADD",
      "path": "10"
    },
    "7660": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8502,
        8529
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7661": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8531,
        8543
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7662": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8531,
        8558
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x240"
    },
    "7665": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8531,
        8558
      ],
      "op": "ADD",
      "path": "10"
    },
    "7666": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8531,
        8558
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7667": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8492,
        8501
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BC1"
    },
    "7670": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        8492,
        8559
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7671": {
      "branch": 210,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8492,
        8559
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7672": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1E32"
    },
    "7675": {
      "branch": 210,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7676": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7678": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7679": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7683": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7685": {
      "op": "SHL"
    },
    "7686": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7687": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7688": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7690": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "ADD",
      "path": "10"
    },
    "7691": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7692": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7693": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7695": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "ADD",
      "path": "10"
    },
    "7696": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7697": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7698": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "SUB",
      "path": "10"
    },
    "7699": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7700": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7701": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "7703": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7704": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7705": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7707": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "ADD",
      "path": "10"
    },
    "7708": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7709": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3555"
    },
    "7712": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "7714": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7715": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7716": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7718": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "ADD",
      "path": "10"
    },
    "7719": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7720": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "POP",
      "path": "10"
    },
    "7721": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "POP",
      "path": "10"
    },
    "7722": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7724": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7725": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7726": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7727": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "SUB",
      "path": "10"
    },
    "7728": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7729": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7730": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8484,
        8623
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7731": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8641,
        8891
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 48,
      "value": "0x1E5A"
    },
    "7734": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8672
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7735": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8678
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "7737": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8678
      ],
      "op": "ADD",
      "path": "10"
    },
    "7738": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8678
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7739": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8699
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7741": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8699
      ],
      "op": "ADD",
      "path": "10"
    },
    "7742": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8699
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7743": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8706
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7745": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8706
      ],
      "op": "ADD",
      "path": "10"
    },
    "7746": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8666,
        8706
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7747": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8730,
        8742
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7748": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8730,
        8756
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x200"
    },
    "7751": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8730,
        8756
      ],
      "op": "ADD",
      "path": "10"
    },
    "7752": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8730,
        8756
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7753": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8794,
        8795
      ],
      "op": "DUP5",
      "path": "10"
    },
    "7754": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8809,
        8821
      ],
      "op": "DUP8",
      "path": "10"
    },
    "7755": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8809,
        8836
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x220"
    },
    "7758": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8809,
        8836
      ],
      "op": "ADD",
      "path": "10"
    },
    "7759": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8809,
        8836
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7760": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8863,
        8875
      ],
      "op": "DUP9",
      "path": "10"
    },
    "7761": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8863,
        8890
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x240"
    },
    "7764": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8863,
        8890
      ],
      "op": "ADD",
      "path": "10"
    },
    "7765": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8863,
        8890
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7766": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8641,
        8652
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C26"
    },
    "7769": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        8641,
        8891
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7770": {
      "branch": 211,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8641,
        8891
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7771": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1E95"
    },
    "7774": {
      "branch": 211,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7775": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7777": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7778": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7782": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7784": {
      "op": "SHL"
    },
    "7785": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7786": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7787": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7789": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "ADD",
      "path": "10"
    },
    "7790": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7791": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7792": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7794": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "ADD",
      "path": "10"
    },
    "7795": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7796": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7797": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "SUB",
      "path": "10"
    },
    "7798": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7799": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7800": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x23"
    },
    "7802": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7803": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7804": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7806": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "ADD",
      "path": "10"
    },
    "7807": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7808": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x390D"
    },
    "7811": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x23"
    },
    "7813": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7814": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7815": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7817": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "ADD",
      "path": "10"
    },
    "7818": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7819": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "POP",
      "path": "10"
    },
    "7820": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "POP",
      "path": "10"
    },
    "7821": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7823": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7824": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7825": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7826": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "SUB",
      "path": "10"
    },
    "7827": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7828": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7829": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8633,
        8964
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7830": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9103
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 49,
      "value": "0x80"
    },
    "7832": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9103
      ],
      "op": "DUP6",
      "path": "10"
    },
    "7833": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9103
      ],
      "op": "ADD",
      "path": "10"
    },
    "7834": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9103
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7835": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9117
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "7837": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9117
      ],
      "op": "ADD",
      "path": "10"
    },
    "7838": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9117
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7839": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9122
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7840": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9122
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7841": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9150,
        9183
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7843": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9150,
        9183
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7844": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9150,
        9183
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7845": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9150,
        9183
      ],
      "op": "ADD",
      "path": "10"
    },
    "7846": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9150,
        9183
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7847": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9206,
        9232
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x260"
    },
    "7850": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9206,
        9232
      ],
      "op": "DUP7",
      "path": "10"
    },
    "7851": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9206,
        9232
      ],
      "op": "ADD",
      "path": "10"
    },
    "7852": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9206,
        9232
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7853": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9057,
        9233
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1EB7"
    },
    "7856": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9057,
        9233
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "7857": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9091,
        9122
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7858": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9150,
        9183
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7859": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9057,
        9077
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BA4"
    },
    "7862": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        9057,
        9233
      ],
      "op": "JUMP",
      "path": "10"
    },
    "7863": {
      "branch": 212,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9057,
        9233
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7864": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1EF2"
    },
    "7867": {
      "branch": 212,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "7868": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7870": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7871": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7875": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7877": {
      "op": "SHL"
    },
    "7878": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7879": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7880": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "7882": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "ADD",
      "path": "10"
    },
    "7883": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7884": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7885": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7887": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "ADD",
      "path": "10"
    },
    "7888": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7889": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7890": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "SUB",
      "path": "10"
    },
    "7891": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP3",
      "path": "10"
    },
    "7892": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7893": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "7895": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7896": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7897": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7899": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "ADD",
      "path": "10"
    },
    "7900": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7901": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3599"
    },
    "7904": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x48"
    },
    "7906": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7907": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "7908": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "7910": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "ADD",
      "path": "10"
    },
    "7911": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7912": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "POP",
      "path": "10"
    },
    "7913": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "POP",
      "path": "10"
    },
    "7914": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7916": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7917": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7918": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "7919": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "SUB",
      "path": "10"
    },
    "7920": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "7921": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "REVERT",
      "path": "10"
    },
    "7922": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9049,
        9346
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "7923": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 50,
      "value": "0x1F61"
    },
    "7926": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7928": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7929": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7930": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7932": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "ADD",
      "path": "10"
    },
    "7933": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7935": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7936": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7937": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9405,
        9417
      ],
      "op": "DUP7",
      "path": "10"
    },
    "7938": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9405,
        9431
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1C0"
    },
    "7941": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9405,
        9431
      ],
      "op": "ADD",
      "path": "10"
    },
    "7942": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9405,
        9431
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7943": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7944": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7945": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7947": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "ADD",
      "path": "10"
    },
    "7948": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9434,
        9446
      ],
      "op": "DUP7",
      "path": "10"
    },
    "7949": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9434,
        9460
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1E0"
    },
    "7952": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9434,
        9460
      ],
      "op": "ADD",
      "path": "10"
    },
    "7953": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9434,
        9460
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7954": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7955": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7956": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "POP",
      "path": "10"
    },
    "7957": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x197B"
    },
    "7960": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7962": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7963": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7964": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7966": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "ADD",
      "path": "10"
    },
    "7967": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "7969": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7970": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7971": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9517
      ],
      "op": "DUP10",
      "path": "10"
    },
    "7972": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9523
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "7974": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9523
      ],
      "op": "ADD",
      "path": "10"
    },
    "7975": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9523
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7976": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9537
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "7978": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9537
      ],
      "op": "ADD",
      "path": "10"
    },
    "7979": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9537
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7980": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9544
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7982": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9544
      ],
      "op": "ADD",
      "path": "10"
    },
    "7983": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9511,
        9544
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7984": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7985": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7986": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "7988": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "ADD",
      "path": "10"
    },
    "7989": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9546,
        9558
      ],
      "op": "DUP9",
      "path": "10"
    },
    "7990": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9546,
        9572
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x260"
    },
    "7993": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9546,
        9572
      ],
      "op": "ADD",
      "path": "10"
    },
    "7994": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9546,
        9572
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "7995": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP2",
      "path": "10"
    },
    "7996": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "7997": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "POP",
      "path": "10"
    },
    "7998": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8000": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8001": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP1",
      "path": "10"
    },
    "8002": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8004": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "ADD",
      "path": "10"
    },
    "8005": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8007": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "8008": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP1",
      "path": "10"
    },
    "8009": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9592,
        9604
      ],
      "op": "DUP10",
      "path": "10"
    },
    "8010": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9592,
        9619
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x220"
    },
    "8013": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9592,
        9619
      ],
      "op": "ADD",
      "path": "10"
    },
    "8014": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9592,
        9619
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8015": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP2",
      "path": "10"
    },
    "8016": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "8017": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "8019": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "ADD",
      "path": "10"
    },
    "8020": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9621,
        9633
      ],
      "op": "DUP10",
      "path": "10"
    },
    "8021": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9621,
        9648
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x240"
    },
    "8024": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9621,
        9648
      ],
      "op": "ADD",
      "path": "10"
    },
    "8025": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9621,
        9648
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8026": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "DUP2",
      "path": "10"
    },
    "8027": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "8028": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9663
      ],
      "op": "POP",
      "path": "10"
    },
    "8029": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9475,
        9492
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2CEC"
    },
    "8032": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        9475,
        9663
      ],
      "op": "JUMP",
      "path": "10"
    },
    "8033": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9374,
        9673
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8034": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9357,
        9673
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "8035": {
      "op": "POP"
    },
    "8036": {
      "op": "POP"
    },
    "8037": {
      "op": "POP"
    },
    "8038": {
      "op": "POP"
    },
    "8039": {
      "op": "POP"
    },
    "8040": {
      "op": "POP"
    },
    "8041": {
      "op": "POP"
    },
    "8042": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1528,
        9712
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8043": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1528,
        9712
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "8044": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1528,
        9712
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "8045": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1528,
        9712
      ],
      "op": "POP",
      "path": "10"
    },
    "8046": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1528,
        9712
      ],
      "op": "POP",
      "path": "10"
    },
    "8047": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1528,
        9712
      ],
      "op": "POP",
      "path": "10"
    },
    "8048": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "o",
      "offset": [
        1528,
        9712
      ],
      "op": "JUMP",
      "path": "10"
    },
    "8049": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13200,
        13575
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8050": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13280,
        13284
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "8052": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13304,
        13311
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 51
    },
    "8053": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13304,
        13318
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8054": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13322,
        13324
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8056": {
      "branch": 213,
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13304,
        13324
      ],
      "op": "EQ",
      "path": "10"
    },
    "8057": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1FB3"
    },
    "8060": {
      "branch": 213,
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "8061": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8063": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8064": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8068": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8070": {
      "op": "SHL"
    },
    "8071": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP2",
      "path": "10"
    },
    "8072": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "8073": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "8075": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "ADD",
      "path": "10"
    },
    "8076": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP1",
      "path": "10"
    },
    "8077": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP1",
      "path": "10"
    },
    "8078": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "8080": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "ADD",
      "path": "10"
    },
    "8081": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP3",
      "path": "10"
    },
    "8082": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP2",
      "path": "10"
    },
    "8083": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "SUB",
      "path": "10"
    },
    "8084": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP3",
      "path": "10"
    },
    "8085": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "8086": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x25"
    },
    "8088": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP2",
      "path": "10"
    },
    "8089": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "8090": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "8092": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "ADD",
      "path": "10"
    },
    "8093": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP1",
      "path": "10"
    },
    "8094": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3884"
    },
    "8097": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x25"
    },
    "8099": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "8100": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "CODECOPY",
      "path": "10"
    },
    "8101": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8103": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "ADD",
      "path": "10"
    },
    "8104": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "8105": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "POP",
      "path": "10"
    },
    "8106": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "POP",
      "path": "10"
    },
    "8107": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8109": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8110": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "DUP1",
      "path": "10"
    },
    "8111": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "8112": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "SUB",
      "path": "10"
    },
    "8113": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "8114": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "REVERT",
      "path": "10"
    },
    "8115": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13296,
        13366
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8116": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13476,
        13478
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "8118": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13463,
        13479
      ],
      "op": "DUP3",
      "path": "10"
    },
    "8119": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13463,
        13479
      ],
      "op": "ADD",
      "path": "10"
    },
    "8120": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13457,
        13480
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8121": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13522,
        13524
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "8123": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13509,
        13525
      ],
      "op": "DUP4",
      "path": "10"
    },
    "8124": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13509,
        13525
      ],
      "op": "ADD",
      "path": "10"
    },
    "8125": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13503,
        13526
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "8126": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13546,
        13571
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 52,
      "value": "0x1FC7"
    },
    "8129": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13457,
        13480
      ],
      "op": "DUP3",
      "path": "10"
    },
    "8130": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13503,
        13526
      ],
      "op": "DUP3",
      "path": "10"
    },
    "8131": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13546,
        13555
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BC1"
    },
    "8134": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "jump": "i",
      "offset": [
        13546,
        13571
      ],
      "op": "JUMP",
      "path": "10"
    },
    "8135": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13546,
        13571
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8136": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13539,
        13571
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "8137": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13539,
        13571
      ],
      "op": "POP",
      "path": "10"
    },
    "8138": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13539,
        13571
      ],
      "op": "POP",
      "path": "10"
    },
    "8139": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13539,
        13571
      ],
      "op": "POP",
      "path": "10"
    },
    "8140": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13200,
        13575
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8141": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13200,
        13575
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "8142": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13200,
        13575
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "8143": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "offset": [
        13200,
        13575
      ],
      "op": "POP",
      "path": "10"
    },
    "8144": {
      "fn": "ReEncryptionValidator.checkSerializedCoordinates",
      "jump": "o",
      "offset": [
        13200,
        13575
      ],
      "op": "JUMP",
      "path": "10"
    },
    "8145": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4614,
        7425
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8146": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4703,
        4730
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1FD9"
    },
    "8149": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4703,
        4730
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x3393"
    },
    "8152": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        4703,
        4730
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8153": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4703,
        4730
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8154": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4754,
        4777
      ],
      "op": "DUP2",
      "path": "13",
      "statement": 53
    },
    "8155": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4754,
        4777
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "8156": {
      "offset": [
        1948,
        1980
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2B9"
    },
    "8159": {
      "branch": 230,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4754,
        4802
      ],
      "op": "EQ",
      "path": "13"
    },
    "8160": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4746,
        4803
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1FE8"
    },
    "8163": {
      "branch": 230,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4746,
        4803
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "8164": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8166": {
      "op": "DUP1"
    },
    "8167": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4746,
        4803
      ],
      "op": "REVERT",
      "path": "13"
    },
    "8168": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4746,
        4803
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8169": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4813,
        4836
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "8171": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4839,
        4867
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1FF3"
    },
    "8174": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4850,
        4866
      ],
      "op": "DUP4",
      "path": "13"
    },
    "8175": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4839,
        4849
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E7C"
    },
    "8178": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        4839,
        4867
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8179": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4839,
        4867
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8180": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4813,
        4867
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8181": {
      "op": "POP"
    },
    "8182": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4813,
        4867
      ],
      "op": "DUP1",
      "path": "13"
    },
    "8183": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4949,
        4968
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 54,
      "value": "0x1FFF"
    },
    "8186": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4813,
        4867
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8187": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4949,
        4959
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8190": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        4949,
        4968
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8191": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4949,
        4968
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8192": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4921,
        4969
      ],
      "op": "DUP4",
      "path": "13"
    },
    "8193": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4921,
        4969
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8194": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8196": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4979,
        5001
      ],
      "op": "ADD",
      "path": "13",
      "statement": 55
    },
    "8197": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5041,
        5060
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 56,
      "value": "0x200D"
    },
    "8200": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4979,
        5001
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8201": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5041,
        5051
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8204": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5041,
        5060
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8205": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5041,
        5060
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8206": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5030
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8208": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5030
      ],
      "op": "DUP1",
      "path": "13"
    },
    "8209": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5030
      ],
      "op": "DUP6",
      "path": "13"
    },
    "8210": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5030
      ],
      "op": "ADD",
      "path": "13"
    },
    "8211": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5061
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "8212": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5061
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8213": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5061
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "8214": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5012,
        5061
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8215": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5071,
        5093
      ],
      "op": "ADD",
      "path": "13",
      "statement": 57
    },
    "8216": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5133,
        5152
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 58,
      "value": "0x2020"
    },
    "8219": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5071,
        5093
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8220": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5133,
        5143
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8223": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5133,
        5152
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8224": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5133,
        5152
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8225": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5104,
        5122
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "8227": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5104,
        5122
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8228": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5104,
        5122
      ],
      "op": "ADD",
      "path": "13"
    },
    "8229": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5104,
        5153
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8230": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8232": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5163,
        5185
      ],
      "op": "ADD",
      "path": "13",
      "statement": 59
    },
    "8233": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5225,
        5244
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 60,
      "value": "0x2031"
    },
    "8236": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5163,
        5185
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8237": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5225,
        5235
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8240": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5225,
        5244
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8241": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5225,
        5244
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8242": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5196,
        5214
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "8244": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5196,
        5214
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8245": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5196,
        5214
      ],
      "op": "ADD",
      "path": "13"
    },
    "8246": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5196,
        5245
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8247": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8249": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5255,
        5277
      ],
      "op": "ADD",
      "path": "13",
      "statement": 61
    },
    "8250": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5318,
        5337
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 62,
      "value": "0x2042"
    },
    "8253": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5255,
        5277
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8254": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5318,
        5328
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8257": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5318,
        5337
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8258": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5318,
        5337
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8259": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5288,
        5307
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x80"
    },
    "8261": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5288,
        5307
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8262": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5288,
        5307
      ],
      "op": "ADD",
      "path": "13"
    },
    "8263": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5288,
        5338
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8264": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8266": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5348,
        5370
      ],
      "op": "ADD",
      "path": "13",
      "statement": 63
    },
    "8267": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5411,
        5430
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 64,
      "value": "0x2053"
    },
    "8270": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5348,
        5370
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8271": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5411,
        5421
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8274": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5411,
        5430
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8275": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5411,
        5430
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8276": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5381,
        5400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xA0"
    },
    "8278": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5381,
        5400
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8279": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5381,
        5400
      ],
      "op": "ADD",
      "path": "13"
    },
    "8280": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5381,
        5431
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8281": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8283": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5441,
        5463
      ],
      "op": "ADD",
      "path": "13",
      "statement": 65
    },
    "8284": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5503,
        5522
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 66,
      "value": "0x2064"
    },
    "8287": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5441,
        5463
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8288": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5503,
        5513
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8291": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5503,
        5522
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8292": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5503,
        5522
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8293": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5474,
        5492
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xC0"
    },
    "8295": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5474,
        5492
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8296": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5474,
        5492
      ],
      "op": "ADD",
      "path": "13"
    },
    "8297": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5474,
        5523
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8298": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8300": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5533,
        5555
      ],
      "op": "ADD",
      "path": "13",
      "statement": 67
    },
    "8301": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5594,
        5613
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 68,
      "value": "0x2075"
    },
    "8304": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5533,
        5555
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8305": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5594,
        5604
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8308": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5594,
        5613
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8309": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5594,
        5613
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8310": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5566,
        5583
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xE0"
    },
    "8312": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5566,
        5583
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8313": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5566,
        5583
      ],
      "op": "ADD",
      "path": "13"
    },
    "8314": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5566,
        5614
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8315": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8317": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5624,
        5646
      ],
      "op": "ADD",
      "path": "13",
      "statement": 69
    },
    "8318": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5686,
        5705
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 70,
      "value": "0x2086"
    },
    "8321": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5624,
        5646
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8322": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5686,
        5696
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8325": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5686,
        5705
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8326": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5686,
        5705
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8327": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5657,
        5675
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x100"
    },
    "8330": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5657,
        5675
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8331": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5657,
        5675
      ],
      "op": "ADD",
      "path": "13"
    },
    "8332": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5657,
        5706
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8333": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8335": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5716,
        5738
      ],
      "op": "ADD",
      "path": "13",
      "statement": 71
    },
    "8336": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5778,
        5797
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 72,
      "value": "0x2098"
    },
    "8339": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5716,
        5738
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8340": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5778,
        5788
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8343": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5778,
        5797
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8344": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5778,
        5797
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8345": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5749,
        5767
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x120"
    },
    "8348": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5749,
        5767
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8349": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5749,
        5767
      ],
      "op": "ADD",
      "path": "13"
    },
    "8350": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5749,
        5798
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8351": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8353": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5808,
        5830
      ],
      "op": "ADD",
      "path": "13",
      "statement": 73
    },
    "8354": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5870,
        5889
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 74,
      "value": "0x20AA"
    },
    "8357": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5808,
        5830
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8358": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5870,
        5880
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8361": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5870,
        5889
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8362": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5870,
        5889
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8363": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5841,
        5859
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x140"
    },
    "8366": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5841,
        5859
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8367": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5841,
        5859
      ],
      "op": "ADD",
      "path": "13"
    },
    "8368": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5841,
        5890
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8369": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8371": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5900,
        5922
      ],
      "op": "ADD",
      "path": "13",
      "statement": 75
    },
    "8372": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5963,
        5982
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 76,
      "value": "0x20BC"
    },
    "8375": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5900,
        5922
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8376": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5963,
        5973
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8379": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5963,
        5982
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8380": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5963,
        5982
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8381": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5933,
        5952
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x160"
    },
    "8384": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5933,
        5952
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8385": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5933,
        5952
      ],
      "op": "ADD",
      "path": "13"
    },
    "8386": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5933,
        5983
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8387": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8389": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5993,
        6015
      ],
      "op": "ADD",
      "path": "13",
      "statement": 77
    },
    "8390": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6056,
        6075
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 78,
      "value": "0x20CE"
    },
    "8393": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5993,
        6015
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8394": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6056,
        6066
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8397": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6056,
        6075
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8398": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6056,
        6075
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8399": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6026,
        6045
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x180"
    },
    "8402": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6026,
        6045
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8403": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6026,
        6045
      ],
      "op": "ADD",
      "path": "13"
    },
    "8404": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6026,
        6076
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8405": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8407": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6086,
        6108
      ],
      "op": "ADD",
      "path": "13",
      "statement": 79
    },
    "8408": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6148,
        6167
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 80,
      "value": "0x20E0"
    },
    "8411": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6086,
        6108
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8412": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6148,
        6158
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8415": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6148,
        6167
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8416": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6148,
        6167
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8417": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6119,
        6137
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1A0"
    },
    "8420": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6119,
        6137
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8421": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6119,
        6137
      ],
      "op": "ADD",
      "path": "13"
    },
    "8422": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6119,
        6168
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8423": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8425": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6178,
        6200
      ],
      "op": "ADD",
      "path": "13",
      "statement": 81
    },
    "8426": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6240,
        6259
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 82,
      "value": "0x20F2"
    },
    "8429": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6178,
        6200
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8430": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6240,
        6250
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8433": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6240,
        6259
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8434": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6240,
        6259
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8435": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6211,
        6229
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1C0"
    },
    "8438": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6211,
        6229
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8439": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6211,
        6229
      ],
      "op": "ADD",
      "path": "13"
    },
    "8440": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6211,
        6260
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8441": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8443": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6270,
        6292
      ],
      "op": "ADD",
      "path": "13",
      "statement": 83
    },
    "8444": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6332,
        6351
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 84,
      "value": "0x2104"
    },
    "8447": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6270,
        6292
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8448": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6332,
        6342
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8451": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6332,
        6351
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8452": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6332,
        6351
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8453": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6303,
        6321
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1E0"
    },
    "8456": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6303,
        6321
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8457": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6303,
        6321
      ],
      "op": "ADD",
      "path": "13"
    },
    "8458": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6303,
        6352
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8459": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8461": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6362,
        6384
      ],
      "op": "ADD",
      "path": "13",
      "statement": 85
    },
    "8462": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6424,
        6443
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 86,
      "value": "0x2116"
    },
    "8465": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6362,
        6384
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8466": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6424,
        6434
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8469": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6424,
        6443
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8470": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6424,
        6443
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8471": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6395,
        6413
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x200"
    },
    "8474": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6395,
        6413
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8475": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6395,
        6413
      ],
      "op": "ADD",
      "path": "13"
    },
    "8476": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6395,
        6444
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8477": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8479": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6454,
        6476
      ],
      "op": "ADD",
      "path": "13",
      "statement": 87
    },
    "8480": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6517,
        6536
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 88,
      "value": "0x2128"
    },
    "8483": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6454,
        6476
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8484": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6517,
        6527
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8487": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6517,
        6536
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8488": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6517,
        6536
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8489": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6487,
        6506
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x220"
    },
    "8492": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6487,
        6506
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8493": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6487,
        6506
      ],
      "op": "ADD",
      "path": "13"
    },
    "8494": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6487,
        6537
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8495": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8497": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6547,
        6569
      ],
      "op": "ADD",
      "path": "13",
      "statement": 89
    },
    "8498": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6610,
        6629
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 90,
      "value": "0x213A"
    },
    "8501": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6547,
        6569
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8502": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6610,
        6620
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8505": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6610,
        6629
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8506": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6610,
        6629
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8507": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6580,
        6599
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x240"
    },
    "8510": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6580,
        6599
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8511": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6580,
        6599
      ],
      "op": "ADD",
      "path": "13"
    },
    "8512": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6580,
        6630
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8513": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8515": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6640,
        6662
      ],
      "op": "ADD",
      "path": "13",
      "statement": 91
    },
    "8516": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6702,
        6721
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 92,
      "value": "0x214C"
    },
    "8519": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6640,
        6662
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8520": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6702,
        6712
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8523": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6702,
        6721
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8524": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6702,
        6721
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8525": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6673,
        6691
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x260"
    },
    "8528": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6673,
        6691
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8529": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6673,
        6691
      ],
      "op": "ADD",
      "path": "13"
    },
    "8530": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6673,
        6722
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8531": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8533": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6732,
        6754
      ],
      "op": "ADD",
      "path": "13",
      "statement": 93
    },
    "8534": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6799,
        6818
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 94,
      "value": "0x215E"
    },
    "8537": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6732,
        6754
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8538": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6799,
        6809
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8541": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6799,
        6818
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8542": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6799,
        6818
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8543": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6765,
        6796
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x280"
    },
    "8546": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6765,
        6796
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8547": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6765,
        6796
      ],
      "op": "ADD",
      "path": "13"
    },
    "8548": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6765,
        6818
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8549": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6839,
        6841
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 95,
      "value": "0x20"
    },
    "8551": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6828,
        6841
      ],
      "op": "ADD",
      "path": "13"
    },
    "8552": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6894,
        6913
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 96,
      "value": "0x2170"
    },
    "8555": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6828,
        6841
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8556": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6894,
        6904
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8559": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6894,
        6913
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8560": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6894,
        6913
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8561": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6878,
        6915
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "8563": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6878,
        6915
      ],
      "op": "SHR",
      "path": "13"
    },
    "8564": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6852,
        6875
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2A0"
    },
    "8567": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6852,
        6875
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8568": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6852,
        6875
      ],
      "op": "ADD",
      "path": "13"
    },
    "8569": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6852,
        6915
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8570": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6936,
        6938
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 97,
      "value": "0x14"
    },
    "8572": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6925,
        6938
      ],
      "op": "ADD",
      "path": "13"
    },
    "8573": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7306,
        7325
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 98,
      "value": "0x2185"
    },
    "8576": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6925,
        6938
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8577": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7306,
        7316
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8580": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        7306,
        7325
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8581": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7306,
        7325
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8582": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8584": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8586": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "8588": {
      "op": "SHL"
    },
    "8589": {
      "op": "SUB"
    },
    "8590": {
      "op": "NOT"
    },
    "8591": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7282,
        7326
      ],
      "op": "AND",
      "path": "13"
    },
    "8592": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7282,
        7296
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2C0"
    },
    "8595": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7282,
        7296
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8596": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7282,
        7296
      ],
      "op": "ADD",
      "path": "13"
    },
    "8597": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7282,
        7326
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8598": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7347,
        7348
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 99,
      "value": "0x5"
    },
    "8600": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7336,
        7348
      ],
      "op": "ADD",
      "path": "13"
    },
    "8601": {
      "offset": [
        1948,
        1980
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2B9"
    },
    "8604": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7378,
        7417
      ],
      "op": "DUP3",
      "path": "13",
      "statement": 100
    },
    "8605": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7378,
        7417
      ],
      "op": "ADD",
      "path": "13"
    },
    "8606": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7367,
        7417
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8607": {
      "branch": 231,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7367,
        7417
      ],
      "op": "EQ",
      "path": "13"
    },
    "8608": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7359,
        7418
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x21A8"
    },
    "8611": {
      "branch": 231,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7359,
        7418
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "8612": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8614": {
      "op": "DUP1"
    },
    "8615": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7359,
        7418
      ],
      "op": "REVERT",
      "path": "13"
    },
    "8616": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7359,
        7418
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8617": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4614,
        7425
      ],
      "op": "POP",
      "path": "13"
    },
    "8618": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4614,
        7425
      ],
      "op": "POP",
      "path": "13"
    },
    "8619": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4614,
        7425
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "8620": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4614,
        7425
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8621": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4614,
        7425
      ],
      "op": "POP",
      "path": "13"
    },
    "8622": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "o",
      "offset": [
        4614,
        7425
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8623": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2373,
        2721
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "8624": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2573,
        2577
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "8626": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2601,
        2611
      ],
      "op": "DUP3",
      "path": "11",
      "statement": 101
    },
    "8627": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2601,
        2618
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "8628": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2622,
        2624
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "8630": {
      "branch": 222,
      "fn": "SignatureVerifier.verify",
      "offset": [
        2601,
        2624
      ],
      "op": "EQ",
      "path": "11"
    },
    "8631": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2593,
        2625
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x21BF"
    },
    "8634": {
      "branch": 222,
      "fn": "SignatureVerifier.verify",
      "offset": [
        2593,
        2625
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "8635": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8637": {
      "op": "DUP1"
    },
    "8638": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2593,
        2625
      ],
      "op": "REVERT",
      "path": "11"
    },
    "8639": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2593,
        2625
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "8640": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2667,
        2714
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 102,
      "value": "0x21D2"
    },
    "8643": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2675,
        2701
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x21CC"
    },
    "8646": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2680,
        2688
      ],
      "op": "DUP7",
      "path": "11"
    },
    "8647": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2690,
        2700
      ],
      "op": "DUP5",
      "path": "11"
    },
    "8648": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2675,
        2679
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x13EC"
    },
    "8651": {
      "fn": "SignatureVerifier.verify",
      "jump": "i",
      "offset": [
        2675,
        2701
      ],
      "op": "JUMP",
      "path": "11"
    },
    "8652": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2675,
        2701
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "8653": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2703,
        2713
      ],
      "op": "DUP6",
      "path": "11"
    },
    "8654": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2667,
        2674
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x257F"
    },
    "8657": {
      "fn": "SignatureVerifier.verify",
      "jump": "i",
      "offset": [
        2667,
        2714
      ],
      "op": "JUMP",
      "path": "11"
    },
    "8658": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2667,
        2714
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "8659": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8661": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8663": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8665": {
      "op": "SHL"
    },
    "8666": {
      "op": "SUB"
    },
    "8667": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2642,
        2714
      ],
      "op": "AND",
      "path": "11"
    },
    "8668": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2642,
        2663
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x21E4"
    },
    "8671": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2652,
        2662
      ],
      "op": "DUP5",
      "path": "11"
    },
    "8672": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2642,
        2651
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x2E86"
    },
    "8675": {
      "fn": "SignatureVerifier.verify",
      "jump": "i",
      "offset": [
        2642,
        2663
      ],
      "op": "JUMP",
      "path": "11"
    },
    "8676": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2642,
        2663
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "8677": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8679": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8681": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8683": {
      "op": "SHL"
    },
    "8684": {
      "op": "SUB"
    },
    "8685": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2642,
        2714
      ],
      "op": "AND",
      "path": "11"
    },
    "8686": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2642,
        2714
      ],
      "op": "EQ",
      "path": "11"
    },
    "8687": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2642,
        2714
      ],
      "op": "SWAP6",
      "path": "11"
    },
    "8688": {
      "fn": "SignatureVerifier.verify",
      "offset": [
        2373,
        2721
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "8689": {
      "op": "POP"
    },
    "8690": {
      "op": "POP"
    },
    "8691": {
      "op": "POP"
    },
    "8692": {
      "op": "POP"
    },
    "8693": {
      "op": "POP"
    },
    "8694": {
      "fn": "SignatureVerifier.verify",
      "jump": "o",
      "offset": [
        2373,
        2721
      ],
      "op": "JUMP",
      "path": "11"
    },
    "8695": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        3929,
        4547
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8696": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4009,
        4033
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x21FF"
    },
    "8699": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4009,
        4033
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x3457"
    },
    "8702": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4009,
        4033
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8703": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4009,
        4033
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8704": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4076,
        4094
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8705": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4076,
        4094
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "8706": {
      "offset": [
        1859,
        1901
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x167"
    },
    "8709": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4112,
        4154
      ],
      "op": "DUP2",
      "path": "13",
      "statement": 103
    },
    "8710": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4112,
        4154
      ],
      "op": "LT",
      "path": "13"
    },
    "8711": {
      "branch": 232,
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4112,
        4154
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "8712": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4104,
        4155
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2210"
    },
    "8715": {
      "branch": 232,
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4104,
        4155
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "8716": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8718": {
      "op": "DUP1"
    },
    "8719": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4104,
        4155
      ],
      "op": "REVERT",
      "path": "13"
    },
    "8720": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4104,
        4155
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8721": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4166,
        4181
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "8723": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4184,
        4207
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x221B"
    },
    "8726": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4195,
        4206
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8727": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4184,
        4194
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E7C"
    },
    "8730": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4184,
        4207
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8731": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4184,
        4207
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8732": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4166,
        4207
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8733": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4166,
        4207
      ],
      "op": "POP",
      "path": "13"
    },
    "8734": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4227,
        4260
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 104,
      "value": "0x222B"
    },
    "8737": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4237,
        4244
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8738": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4246,
        4251
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8739": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4246,
        4259
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "8741": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4246,
        4259
      ],
      "op": "ADD",
      "path": "13"
    },
    "8742": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4246,
        4259
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "8743": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4227,
        4236
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "8746": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4227,
        4260
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8747": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4227,
        4260
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8748": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4217,
        4260
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8749": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4217,
        4260
      ],
      "op": "POP",
      "path": "13"
    },
    "8750": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4280,
        4313
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 105,
      "value": "0x223B"
    },
    "8753": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4290,
        4297
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8754": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4299,
        4304
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8755": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4299,
        4312
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8757": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4299,
        4312
      ],
      "op": "ADD",
      "path": "13"
    },
    "8758": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4299,
        4312
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "8759": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4280,
        4289
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "8762": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4280,
        4313
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8763": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4280,
        4313
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8764": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4270,
        4313
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8765": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4270,
        4313
      ],
      "op": "POP",
      "path": "13"
    },
    "8766": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4339,
        4358
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 106,
      "value": "0x2246"
    },
    "8769": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4350,
        4357
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8770": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4339,
        4349
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "8773": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4339,
        4358
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8774": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4339,
        4358
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8775": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4323,
        4336
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "8777": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4323,
        4336
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8778": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4323,
        4336
      ],
      "op": "ADD",
      "path": "13"
    },
    "8779": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4323,
        4358
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8780": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4429,
        4449
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 107,
      "value": "0x60"
    },
    "8782": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4429,
        4449
      ],
      "op": "DUP4",
      "path": "13"
    },
    "8783": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4429,
        4449
      ],
      "op": "ADD",
      "path": "13"
    },
    "8784": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4429,
        4449
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "8785": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "8787": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4368,
        4390
      ],
      "op": "SWAP2",
      "path": "13",
      "statement": 108
    },
    "8788": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4368,
        4390
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8789": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4368,
        4390
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "8790": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4368,
        4390
      ],
      "op": "ADD",
      "path": "13"
    },
    "8791": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4368,
        4390
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8792": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4410,
        4450
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2262"
    },
    "8795": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4410,
        4450
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8796": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4368,
        4390
      ],
      "op": "DUP3",
      "path": "13"
    },
    "8797": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4368,
        4390
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8798": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4410,
        4419
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "8801": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4410,
        4450
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8802": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4410,
        4450
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8803": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4400,
        4450
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8804": {
      "op": "POP"
    },
    "8805": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4475,
        4540
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 109,
      "value": "0x2272"
    },
    "8808": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4400,
        4450
      ],
      "op": "DUP2",
      "path": "13"
    },
    "8809": {
      "op": "PUSH1",
      "value": "0x82"
    },
    "8811": {
      "op": "NOT"
    },
    "8812": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4503,
        4539
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8813": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4503,
        4539
      ],
      "op": "ADD",
      "path": "13"
    },
    "8814": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4475,
        4493
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2EAC"
    },
    "8817": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4475,
        4540
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8818": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4475,
        4540
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "8819": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4461,
        4472
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x80"
    },
    "8821": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4461,
        4472
      ],
      "op": "DUP5",
      "path": "13"
    },
    "8822": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4461,
        4472
      ],
      "op": "ADD",
      "path": "13"
    },
    "8823": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4461,
        4540
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "8824": {
      "op": "POP"
    },
    "8825": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4461,
        4466
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "8826": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4461,
        4466
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "8827": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        3929,
        4547
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "8828": {
      "op": "POP"
    },
    "8829": {
      "op": "POP"
    },
    "8830": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "o",
      "offset": [
        3929,
        4547
      ],
      "op": "JUMP",
      "path": "13"
    },
    "8831": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3019,
        4261
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "8832": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3146,
        3160
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "8834": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8836": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8838": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "8840": {
      "op": "SHL"
    },
    "8841": {
      "op": "SUB"
    },
    "8842": {
      "op": "NOT"
    },
    "8843": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3179,
        3201
      ],
      "op": "DUP3",
      "path": "11"
    },
    "8844": {
      "branch": 223,
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3179,
        3201
      ],
      "op": "AND",
      "path": "11"
    },
    "8845": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3176,
        4255
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x2332"
    },
    "8848": {
      "branch": 223,
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3176,
        4255
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "8849": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 110,
      "value": "0x40"
    },
    "8851": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "8852": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "8854": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "8856": {
      "op": "SHL"
    },
    "8857": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "8859": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP1",
      "path": "11"
    },
    "8860": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP4",
      "path": "11"
    },
    "8861": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "ADD",
      "path": "11"
    },
    "8862": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP3",
      "path": "11"
    },
    "8863": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP2",
      "path": "11"
    },
    "8864": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "8865": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3260,
        3277
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "8867": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x21"
    },
    "8869": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP6",
      "path": "11"
    },
    "8870": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "ADD",
      "path": "11"
    },
    "8871": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP2",
      "path": "11"
    },
    "8872": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8873": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "8874": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3288,
        3292
      ],
      "op": "ADDRESS",
      "path": "11"
    },
    "8875": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "8877": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP2",
      "path": "11"
    },
    "8878": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8879": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SHL",
      "path": "11"
    },
    "8880": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x22"
    },
    "8882": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP8",
      "path": "11"
    },
    "8883": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "ADD",
      "path": "11"
    },
    "8884": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "8885": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP9",
      "path": "11"
    },
    "8886": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "8887": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3288,
        3292
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8888": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3288,
        3292
      ],
      "op": "SWAP6",
      "path": "11"
    },
    "8889": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3260,
        3277
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "8890": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3260,
        3277
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "8891": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3288,
        3292
      ],
      "op": "DUP7",
      "path": "11"
    },
    "8892": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3288,
        3292
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "8893": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3376,
        3384
      ],
      "op": "DUP11",
      "path": "11"
    },
    "8894": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3376,
        3384
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "8895": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8896": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "8897": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x36"
    },
    "8899": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8900": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "8901": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "ADD",
      "path": "11"
    },
    "8902": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "8903": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP5",
      "path": "11"
    },
    "8904": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "ADD",
      "path": "11"
    },
    "8905": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8906": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP1",
      "path": "11"
    },
    "8907": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP4",
      "path": "11"
    },
    "8908": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "DUP4",
      "path": "11"
    },
    "8909": {
      "op": "JUMPDEST"
    },
    "8910": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8912": {
      "op": "DUP4"
    },
    "8913": {
      "op": "LT"
    },
    "8914": {
      "op": "PUSH2",
      "value": "0x22EC"
    },
    "8917": {
      "op": "JUMPI"
    },
    "8918": {
      "op": "DUP1"
    },
    "8919": {
      "op": "MLOAD"
    },
    "8920": {
      "op": "DUP3"
    },
    "8921": {
      "op": "MSTORE"
    },
    "8922": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "8924": {
      "op": "NOT"
    },
    "8925": {
      "op": "SWAP1"
    },
    "8926": {
      "op": "SWAP3"
    },
    "8927": {
      "op": "ADD"
    },
    "8928": {
      "op": "SWAP2"
    },
    "8929": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8931": {
      "op": "SWAP2"
    },
    "8932": {
      "op": "DUP3"
    },
    "8933": {
      "op": "ADD"
    },
    "8934": {
      "op": "SWAP2"
    },
    "8935": {
      "op": "ADD"
    },
    "8936": {
      "op": "PUSH2",
      "value": "0x22CD"
    },
    "8939": {
      "op": "JUMP"
    },
    "8940": {
      "op": "JUMPDEST"
    },
    "8941": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8943": {
      "op": "DUP4"
    },
    "8944": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8946": {
      "op": "SUB"
    },
    "8947": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "8950": {
      "op": "EXP"
    },
    "8951": {
      "op": "SUB"
    },
    "8952": {
      "op": "DUP1"
    },
    "8953": {
      "op": "NOT"
    },
    "8954": {
      "op": "DUP3"
    },
    "8955": {
      "op": "MLOAD"
    },
    "8956": {
      "op": "AND"
    },
    "8957": {
      "op": "DUP2"
    },
    "8958": {
      "op": "DUP5"
    },
    "8959": {
      "op": "MLOAD"
    },
    "8960": {
      "op": "AND"
    },
    "8961": {
      "op": "DUP1"
    },
    "8962": {
      "op": "DUP3"
    },
    "8963": {
      "op": "OR"
    },
    "8964": {
      "op": "DUP6"
    },
    "8965": {
      "op": "MSTORE"
    },
    "8966": {
      "op": "POP"
    },
    "8967": {
      "op": "POP"
    },
    "8968": {
      "op": "POP"
    },
    "8969": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8970": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8971": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8972": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8973": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8974": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "ADD",
      "path": "11"
    },
    "8975": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "8976": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8977": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8978": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8979": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8980": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "POP",
      "path": "11"
    },
    "8981": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "8983": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "8984": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8986": {
      "op": "DUP2"
    },
    "8987": {
      "op": "DUP4"
    },
    "8988": {
      "op": "SUB"
    },
    "8989": {
      "op": "SUB"
    },
    "8990": {
      "op": "DUP2"
    },
    "8991": {
      "op": "MSTORE"
    },
    "8992": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8993": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "8995": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3324,
        3385
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "8996": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3314,
        3386
      ],
      "op": "DUP1",
      "path": "11"
    },
    "8997": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3314,
        3386
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "8998": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3314,
        3386
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "8999": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3314,
        3386
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9001": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3314,
        3386
      ],
      "op": "ADD",
      "path": "11"
    },
    "9002": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3314,
        3386
      ],
      "op": "KECCAK256",
      "path": "11"
    },
    "9003": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3307,
        3386
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9004": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3307,
        3386
      ],
      "op": "POP",
      "path": "11"
    },
    "9005": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3307,
        3386
      ],
      "op": "POP",
      "path": "11"
    },
    "9006": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3307,
        3386
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x153E"
    },
    "9009": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3307,
        3386
      ],
      "op": "JUMP",
      "path": "11"
    },
    "9010": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3176,
        4255
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9011": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9015": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "9017": {
      "op": "SHL"
    },
    "9018": {
      "op": "SUB"
    },
    "9019": {
      "op": "NOT"
    },
    "9020": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3407,
        3429
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9021": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3407,
        3429
      ],
      "op": "AND",
      "path": "11"
    },
    "9022": {
      "op": "PUSH1",
      "value": "0x45"
    },
    "9024": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "9026": {
      "op": "SHL"
    },
    "9027": {
      "branch": 224,
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3407,
        3429
      ],
      "op": "EQ",
      "path": "11"
    },
    "9028": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3403,
        4255
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "9029": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3403,
        4255
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x2532"
    },
    "9032": {
      "branch": 224,
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3403,
        4255
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9033": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3499,
        3514
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9034": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3499,
        3514
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9035": {
      "branch": 225,
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3536,
        3546
      ],
      "op": "DUP1",
      "path": "11",
      "statement": 111
    },
    "9036": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x2386"
    },
    "9039": {
      "branch": 225,
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9040": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9042": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9043": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9047": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9049": {
      "op": "SHL"
    },
    "9050": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9051": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9052": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x4"
    },
    "9054": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "ADD",
      "path": "11"
    },
    "9055": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9056": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9057": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9059": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "ADD",
      "path": "11"
    },
    "9060": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9061": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9062": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "SUB",
      "path": "11"
    },
    "9063": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9064": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9065": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x27"
    },
    "9067": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9068": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9069": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9071": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "ADD",
      "path": "11"
    },
    "9072": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9073": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x37F3"
    },
    "9076": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x27"
    },
    "9078": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9079": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "CODECOPY",
      "path": "11"
    },
    "9080": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9082": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "ADD",
      "path": "11"
    },
    "9083": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9084": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "POP",
      "path": "11"
    },
    "9085": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "POP",
      "path": "11"
    },
    "9086": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9088": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9089": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9090": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9091": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "SUB",
      "path": "11"
    },
    "9092": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9093": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "REVERT",
      "path": "11"
    },
    "9094": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3528,
        3590
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9095": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3659,
        3673
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "9097": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3691,
        3782
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9098": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3698,
        3709
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9099": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3698,
        3709
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "9100": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3691,
        3782
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x239D"
    },
    "9103": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3691,
        3782
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9104": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3729,
        3737
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 112,
      "value": "0x1"
    },
    "9106": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3729,
        3737
      ],
      "op": "ADD",
      "path": "11"
    },
    "9107": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3765,
        3767
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 113,
      "value": "0xA"
    },
    "9109": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3755,
        3767
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9110": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3755,
        3767
      ],
      "op": "DIV",
      "path": "11"
    },
    "9111": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3755,
        3767
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9112": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3755,
        3767
      ],
      "op": "POP",
      "path": "11"
    },
    "9113": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3691,
        3782
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x2389"
    },
    "9116": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3691,
        3782
      ],
      "op": "JUMP",
      "path": "11"
    },
    "9117": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3691,
        3782
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9118": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3795,
        3820
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "9120": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3833,
        3839
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9121": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH8",
      "path": "11",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "9130": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9131": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "GT",
      "path": "11"
    },
    "9132": {
      "op": "DUP1"
    },
    "9133": {
      "op": "ISZERO"
    },
    "9134": {
      "op": "PUSH2",
      "value": "0x23B6"
    },
    "9137": {
      "op": "JUMPI"
    },
    "9138": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9140": {
      "op": "DUP1"
    },
    "9141": {
      "op": "REVERT"
    },
    "9142": {
      "op": "JUMPDEST"
    },
    "9143": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "POP",
      "path": "11"
    },
    "9144": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9146": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9147": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9148": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9149": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9150": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9151": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9152": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1F"
    },
    "9154": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "ADD",
      "path": "11"
    },
    "9155": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1F"
    },
    "9157": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "NOT",
      "path": "11"
    },
    "9158": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "AND",
      "path": "11"
    },
    "9159": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9161": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "ADD",
      "path": "11"
    },
    "9162": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9163": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "ADD",
      "path": "11"
    },
    "9164": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9166": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9167": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9168": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "9169": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x23E1"
    },
    "9172": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9173": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9175": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9176": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "ADD",
      "path": "11"
    },
    "9177": {
      "op": "DUP2"
    },
    "9178": {
      "op": "DUP1"
    },
    "9179": {
      "op": "CALLDATASIZE"
    },
    "9180": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9181": {
      "op": "CALLDATACOPY"
    },
    "9182": {
      "op": "ADD"
    },
    "9183": {
      "op": "SWAP1"
    },
    "9184": {
      "op": "POP"
    },
    "9185": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3823,
        3840
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9186": {
      "op": "POP"
    },
    "9187": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3863,
        3878
      ],
      "op": "DUP7",
      "path": "11",
      "statement": 114
    },
    "9188": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3863,
        3878
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9189": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3863,
        3878
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9190": {
      "op": "POP"
    },
    "9191": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3795,
        3840
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9192": {
      "op": "POP"
    },
    "9193": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9195": {
      "op": "NOT"
    },
    "9196": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3908,
        3918
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9197": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3908,
        3918
      ],
      "op": "ADD",
      "path": "11"
    },
    "9198": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3932,
        4068
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9199": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3939,
        3950
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9200": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3939,
        3950
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "9201": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3932,
        4068
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x2433"
    },
    "9204": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3932,
        4068
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9205": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4019,
        4021
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 115,
      "value": "0xA"
    },
    "9207": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4010,
        4016
      ],
      "op": "DUP5",
      "path": "11"
    },
    "9208": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4010,
        4021
      ],
      "op": "MOD",
      "path": "11"
    },
    "9209": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4005,
        4007
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x30"
    },
    "9211": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4005,
        4021
      ],
      "op": "ADD",
      "path": "11"
    },
    "9212": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3994,
        4023
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0xF8"
    },
    "9214": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3994,
        4023
      ],
      "op": "SHL",
      "path": "11"
    },
    "9215": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3982
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9216": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3983,
        3990
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9217": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3983,
        3990
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9218": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3983,
        3990
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1"
    },
    "9220": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3983,
        3990
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9221": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3983,
        3990
      ],
      "op": "SUB",
      "path": "11"
    },
    "9222": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3983,
        3990
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9223": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3983,
        3990
      ],
      "op": "POP",
      "path": "11"
    },
    "9224": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9225": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9226": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9227": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "LT",
      "path": "11"
    },
    "9228": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x2411"
    },
    "9231": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9232": {
      "dev": "Index out of range",
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "INVALID",
      "path": "11"
    },
    "9233": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9234": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9236": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "ADD",
      "path": "11"
    },
    "9237": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        3991
      ],
      "op": "ADD",
      "path": "11"
    },
    "9238": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9243": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "9245": {
      "op": "SHL"
    },
    "9246": {
      "op": "SUB"
    },
    "9247": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "NOT",
      "path": "11"
    },
    "9248": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "AND",
      "path": "11"
    },
    "9249": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9250": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9251": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "9253": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "BYTE",
      "path": "11"
    },
    "9254": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9255": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3970,
        4023
      ],
      "op": "MSTORE8",
      "path": "11"
    },
    "9256": {
      "op": "POP"
    },
    "9257": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4051,
        4053
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 116,
      "value": "0xA"
    },
    "9259": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4041,
        4053
      ],
      "op": "DUP5",
      "path": "11"
    },
    "9260": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4041,
        4053
      ],
      "op": "DIV",
      "path": "11"
    },
    "9261": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4041,
        4053
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9262": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4041,
        4053
      ],
      "op": "POP",
      "path": "11"
    },
    "9263": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3932,
        4068
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x23EE"
    },
    "9266": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3932,
        4068
      ],
      "op": "JUMP",
      "path": "11"
    },
    "9267": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3932,
        4068
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9268": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 117,
      "value": "0x40"
    },
    "9270": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9271": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "9273": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "9275": {
      "op": "SHL"
    },
    "9276": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9278": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9279": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9280": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "ADD",
      "path": "11"
    },
    "9281": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9282": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9283": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9284": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4128,
        4151
      ],
      "op": "PUSH32",
      "path": "11",
      "value": "0x457468657265756D205369676E6564204D6573736167653A0A00000000000000"
    },
    "9317": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x21"
    },
    "9319": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP6",
      "path": "11"
    },
    "9320": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "ADD",
      "path": "11"
    },
    "9321": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9322": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9323": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9324": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP7",
      "path": "11"
    },
    "9325": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9326": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4116,
        4126
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9327": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4116,
        4126
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "9328": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4128,
        4151
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9329": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4128,
        4151
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9330": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4153,
        4165
      ],
      "op": "DUP8",
      "path": "11"
    },
    "9331": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4153,
        4165
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9332": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4167,
        4175
      ],
      "op": "DUP14",
      "path": "11"
    },
    "9333": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4167,
        4175
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9334": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "9335": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x3A"
    },
    "9337": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "ADD",
      "path": "11"
    },
    "9338": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9339": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9340": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP6",
      "path": "11"
    },
    "9341": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "ADD",
      "path": "11"
    },
    "9342": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9343": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9344": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9345": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9346": {
      "op": "JUMPDEST"
    },
    "9347": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9349": {
      "op": "DUP4"
    },
    "9350": {
      "op": "LT"
    },
    "9351": {
      "op": "PUSH2",
      "value": "0x24A1"
    },
    "9354": {
      "op": "JUMPI"
    },
    "9355": {
      "op": "DUP1"
    },
    "9356": {
      "op": "MLOAD"
    },
    "9357": {
      "op": "DUP3"
    },
    "9358": {
      "op": "MSTORE"
    },
    "9359": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "9361": {
      "op": "NOT"
    },
    "9362": {
      "op": "SWAP1"
    },
    "9363": {
      "op": "SWAP3"
    },
    "9364": {
      "op": "ADD"
    },
    "9365": {
      "op": "SWAP2"
    },
    "9366": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9368": {
      "op": "SWAP2"
    },
    "9369": {
      "op": "DUP3"
    },
    "9370": {
      "op": "ADD"
    },
    "9371": {
      "op": "SWAP2"
    },
    "9372": {
      "op": "ADD"
    },
    "9373": {
      "op": "PUSH2",
      "value": "0x2482"
    },
    "9376": {
      "op": "JUMP"
    },
    "9377": {
      "op": "JUMPDEST"
    },
    "9378": {
      "op": "MLOAD"
    },
    "9379": {
      "op": "DUP2"
    },
    "9380": {
      "op": "MLOAD"
    },
    "9381": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9383": {
      "op": "SWAP4"
    },
    "9384": {
      "op": "DUP5"
    },
    "9385": {
      "op": "SUB"
    },
    "9386": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "9389": {
      "op": "EXP"
    },
    "9390": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9392": {
      "op": "NOT"
    },
    "9393": {
      "op": "ADD"
    },
    "9394": {
      "op": "DUP1"
    },
    "9395": {
      "op": "NOT"
    },
    "9396": {
      "op": "SWAP1"
    },
    "9397": {
      "op": "SWAP3"
    },
    "9398": {
      "op": "AND"
    },
    "9399": {
      "op": "SWAP2"
    },
    "9400": {
      "op": "AND"
    },
    "9401": {
      "op": "OR"
    },
    "9402": {
      "op": "SWAP1"
    },
    "9403": {
      "op": "MSTORE"
    },
    "9404": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP6",
      "path": "11"
    },
    "9405": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9406": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9407": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9408": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9409": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "ADD",
      "path": "11"
    },
    "9410": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "9411": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP6",
      "path": "11"
    },
    "9412": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "ADD",
      "path": "11"
    },
    "9413": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9414": {
      "op": "POP"
    },
    "9415": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9416": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9417": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9418": {
      "op": "JUMPDEST"
    },
    "9419": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9421": {
      "op": "DUP4"
    },
    "9422": {
      "op": "LT"
    },
    "9423": {
      "op": "PUSH2",
      "value": "0x24E9"
    },
    "9426": {
      "op": "JUMPI"
    },
    "9427": {
      "op": "DUP1"
    },
    "9428": {
      "op": "MLOAD"
    },
    "9429": {
      "op": "DUP3"
    },
    "9430": {
      "op": "MSTORE"
    },
    "9431": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "9433": {
      "op": "NOT"
    },
    "9434": {
      "op": "SWAP1"
    },
    "9435": {
      "op": "SWAP3"
    },
    "9436": {
      "op": "ADD"
    },
    "9437": {
      "op": "SWAP2"
    },
    "9438": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9440": {
      "op": "SWAP2"
    },
    "9441": {
      "op": "DUP3"
    },
    "9442": {
      "op": "ADD"
    },
    "9443": {
      "op": "SWAP2"
    },
    "9444": {
      "op": "ADD"
    },
    "9445": {
      "op": "PUSH2",
      "value": "0x24CA"
    },
    "9448": {
      "op": "JUMP"
    },
    "9449": {
      "op": "JUMPDEST"
    },
    "9450": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9452": {
      "op": "DUP4"
    },
    "9453": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9455": {
      "op": "SUB"
    },
    "9456": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "9459": {
      "op": "EXP"
    },
    "9460": {
      "op": "SUB"
    },
    "9461": {
      "op": "DUP1"
    },
    "9462": {
      "op": "NOT"
    },
    "9463": {
      "op": "DUP3"
    },
    "9464": {
      "op": "MLOAD"
    },
    "9465": {
      "op": "AND"
    },
    "9466": {
      "op": "DUP2"
    },
    "9467": {
      "op": "DUP5"
    },
    "9468": {
      "op": "MLOAD"
    },
    "9469": {
      "op": "AND"
    },
    "9470": {
      "op": "DUP1"
    },
    "9471": {
      "op": "DUP3"
    },
    "9472": {
      "op": "OR"
    },
    "9473": {
      "op": "DUP6"
    },
    "9474": {
      "op": "MSTORE"
    },
    "9475": {
      "op": "POP"
    },
    "9476": {
      "op": "POP"
    },
    "9477": {
      "op": "POP"
    },
    "9478": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9479": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9480": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9481": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9482": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9483": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "ADD",
      "path": "11"
    },
    "9484": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "9485": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9486": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9487": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9488": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9489": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "POP",
      "path": "11"
    },
    "9490": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9492": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9493": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9495": {
      "op": "DUP2"
    },
    "9496": {
      "op": "DUP4"
    },
    "9497": {
      "op": "SUB"
    },
    "9498": {
      "op": "SUB"
    },
    "9499": {
      "op": "DUP2"
    },
    "9500": {
      "op": "MSTORE"
    },
    "9501": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9502": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9504": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4099,
        4176
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9505": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4089,
        4177
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9506": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4089,
        4177
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9507": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4089,
        4177
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9508": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4089,
        4177
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9510": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4089,
        4177
      ],
      "op": "ADD",
      "path": "11"
    },
    "9511": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4089,
        4177
      ],
      "op": "KECCAK256",
      "path": "11"
    },
    "9512": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "9513": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "POP",
      "path": "11"
    },
    "9514": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "POP",
      "path": "11"
    },
    "9515": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "POP",
      "path": "11"
    },
    "9516": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "POP",
      "path": "11"
    },
    "9517": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "POP",
      "path": "11"
    },
    "9518": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x153E"
    },
    "9521": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4082,
        4177
      ],
      "op": "JUMP",
      "path": "11"
    },
    "9522": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        3403,
        4255
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9523": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 118,
      "value": "0x40"
    },
    "9525": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9526": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9527": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9531": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9533": {
      "op": "SHL"
    },
    "9534": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9535": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9536": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9538": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x4"
    },
    "9540": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9541": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "ADD",
      "path": "11"
    },
    "9542": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9543": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1A"
    },
    "9545": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x24"
    },
    "9547": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9548": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "ADD",
      "path": "11"
    },
    "9549": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9550": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH32",
      "path": "11",
      "value": "0x556E737570706F72746564204549503139312076657273696F6E000000000000"
    },
    "9583": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x44"
    },
    "9585": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9586": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "ADD",
      "path": "11"
    },
    "9587": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9588": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9589": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9590": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9591": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9592": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9593": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "SUB",
      "path": "11"
    },
    "9594": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x64"
    },
    "9596": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "ADD",
      "path": "11"
    },
    "9597": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9598": {
      "fn": "SignatureVerifier.hashEIP191",
      "offset": [
        4208,
        4244
      ],
      "op": "REVERT",
      "path": "11"
    },
    "9599": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        603,
        1219
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9600": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        707,
        714
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "9602": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        738,
        748
      ],
      "op": "DUP2",
      "path": "11",
      "statement": 119
    },
    "9603": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        738,
        755
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9604": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        759,
        761
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x41"
    },
    "9606": {
      "branch": 226,
      "fn": "SignatureVerifier.recover",
      "offset": [
        738,
        761
      ],
      "op": "EQ",
      "path": "11"
    },
    "9607": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        730,
        762
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x258F"
    },
    "9610": {
      "branch": 226,
      "fn": "SignatureVerifier.recover",
      "offset": [
        730,
        762
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9611": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9613": {
      "op": "DUP1"
    },
    "9614": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        730,
        762
      ],
      "op": "REVERT",
      "path": "11"
    },
    "9615": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        730,
        762
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9616": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        878,
        880
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9618": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        862,
        881
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9619": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        862,
        881
      ],
      "op": "ADD",
      "path": "11"
    },
    "9620": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        856,
        882
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9621": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        922,
        924
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9623": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        906,
        925
      ],
      "op": "DUP4",
      "path": "11"
    },
    "9624": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        906,
        925
      ],
      "op": "ADD",
      "path": "11"
    },
    "9625": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        900,
        926
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9626": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        974,
        976
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "9628": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        958,
        977
      ],
      "op": "DUP5",
      "path": "11"
    },
    "9629": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        958,
        977
      ],
      "op": "ADD",
      "path": "11"
    },
    "9630": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        952,
        978
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9631": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        773,
        782
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "9633": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        944,
        979
      ],
      "op": "BYTE",
      "path": "11"
    },
    "9634": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1098,
        1100
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1B"
    },
    "9636": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1094,
        1100
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9637": {
      "branch": 227,
      "fn": "SignatureVerifier.recover",
      "offset": [
        1094,
        1100
      ],
      "op": "LT",
      "path": "11"
    },
    "9638": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1090,
        1134
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "9639": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1090,
        1134
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x25AE"
    },
    "9642": {
      "branch": 227,
      "fn": "SignatureVerifier.recover",
      "offset": [
        1090,
        1134
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9643": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1121,
        1123
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 120,
      "value": "0x1B"
    },
    "9645": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1116,
        1123
      ],
      "op": "ADD",
      "path": "11"
    },
    "9646": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1090,
        1134
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9647": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1152
      ],
      "op": "DUP1",
      "path": "11",
      "statement": 121
    },
    "9648": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1158
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0xFF"
    },
    "9650": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1158
      ],
      "op": "AND",
      "path": "11"
    },
    "9651": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1156,
        1158
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1B"
    },
    "9653": {
      "branch": 228,
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1158
      ],
      "op": "EQ",
      "path": "11"
    },
    "9654": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1169
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9655": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1169
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x25C3"
    },
    "9658": {
      "branch": 228,
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1169
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9659": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1169
      ],
      "op": "POP",
      "path": "11"
    },
    "9660": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1162,
        1163
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9661": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1162,
        1169
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0xFF"
    },
    "9663": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1162,
        1169
      ],
      "op": "AND",
      "path": "11"
    },
    "9664": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1167,
        1169
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1C"
    },
    "9666": {
      "branch": 229,
      "fn": "SignatureVerifier.recover",
      "offset": [
        1162,
        1169
      ],
      "op": "EQ",
      "path": "11"
    },
    "9667": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1151,
        1169
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9668": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1143,
        1170
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x25CC"
    },
    "9671": {
      "branch": 229,
      "fn": "SignatureVerifier.recover",
      "offset": [
        1143,
        1170
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "9672": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9674": {
      "op": "DUP1"
    },
    "9675": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1143,
        1170
      ],
      "op": "REVERT",
      "path": "11"
    },
    "9676": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1143,
        1170
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "9677": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "statement": 122,
      "value": "0x40"
    },
    "9679": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9680": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9681": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "9683": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9684": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9685": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "9687": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9688": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9689": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9690": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9691": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP5",
      "path": "11"
    },
    "9692": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9693": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP10",
      "path": "11"
    },
    "9694": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9695": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9696": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0xFF"
    },
    "9698": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP5",
      "path": "11"
    },
    "9699": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "AND",
      "path": "11"
    },
    "9700": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9701": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP5",
      "path": "11"
    },
    "9702": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9703": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9704": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "9706": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9707": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9708": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP7",
      "path": "11"
    },
    "9709": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9710": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9711": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x80"
    },
    "9713": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP3",
      "path": "11"
    },
    "9714": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9715": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP6",
      "path": "11"
    },
    "9716": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9717": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "9718": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9719": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9720": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1"
    },
    "9722": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "9723": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0xA0"
    },
    "9725": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP1",
      "path": "11"
    },
    "9726": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP5",
      "path": "11"
    },
    "9727": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9728": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "9729": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9730": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "9731": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "9733": {
      "op": "NOT"
    },
    "9734": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9735": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9736": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "9737": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP2",
      "path": "11"
    },
    "9738": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9739": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SUB",
      "path": "11"
    },
    "9740": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9741": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "9742": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9743": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "9744": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP6",
      "path": "11"
    },
    "9745": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "GAS",
      "path": "11"
    },
    "9746": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "STATICCALL",
      "path": "11"
    },
    "9747": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "9748": {
      "op": "DUP1"
    },
    "9749": {
      "op": "ISZERO"
    },
    "9750": {
      "op": "PUSH2",
      "value": "0x2623"
    },
    "9753": {
      "op": "JUMPI"
    },
    "9754": {
      "op": "RETURNDATASIZE"
    },
    "9755": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9757": {
      "op": "DUP1"
    },
    "9758": {
      "op": "RETURNDATACOPY"
    },
    "9759": {
      "op": "RETURNDATASIZE"
    },
    "9760": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9762": {
      "op": "REVERT"
    },
    "9763": {
      "op": "JUMPDEST"
    },
    "9764": {
      "op": "POP"
    },
    "9765": {
      "op": "POP"
    },
    "9766": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "9768": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9769": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "9771": {
      "op": "NOT"
    },
    "9772": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "ADD",
      "path": "11"
    },
    "9773": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "9774": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP8",
      "path": "11"
    },
    "9775": {
      "fn": "SignatureVerifier.recover",
      "offset": [
        603,
        1219
      ],
      "op": "SWAP7",
      "path": "11"
    },
    "9776": {
      "op": "POP"
    },
    "9777": {
      "op": "POP"
    },
    "9778": {
      "op": "POP"
    },
    "9779": {
      "op": "POP"
    },
    "9780": {
      "op": "POP"
    },
    "9781": {
      "op": "POP"
    },
    "9782": {
      "op": "POP"
    },
    "9783": {
      "fn": "SignatureVerifier.recover",
      "jump": "o",
      "offset": [
        603,
        1219
      ],
      "op": "JUMP",
      "path": "11"
    },
    "9784": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7406,
        7943
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "9785": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9787": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9789": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9791": {
      "op": "SHL"
    },
    "9792": {
      "op": "SUB"
    },
    "9793": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 123
    },
    "9794": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "AND",
      "path": "1"
    },
    "9795": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7506,
        7521
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "9797": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9798": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "DUP2",
      "path": "1"
    },
    "9799": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "9800": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7623
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "9802": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "9804": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "9805": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "9807": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "DUP2",
      "path": "1"
    },
    "9808": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "9809": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7609,
        7632
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "9810": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7506,
        7521
      ],
      "op": "DUP2",
      "path": "1"
    },
    "9811": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7506,
        7521
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9812": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x26B5"
    },
    "9815": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7634
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9816": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7633
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2688"
    },
    "9819": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7633
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9820": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7604
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "9853": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7604
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9854": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7633
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "9859": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7608
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2FB2"
    },
    "9862": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7633
      ],
      "op": "AND",
      "path": "1"
    },
    "9863": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "jump": "i",
      "offset": [
        7579,
        7633
      ],
      "op": "JUMP",
      "path": "1"
    },
    "9864": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7579,
        7633
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "9865": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7574
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "9898": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7574
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9899": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "9904": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7578
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2FD9"
    },
    "9907": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7634
      ],
      "op": "AND",
      "path": "1"
    },
    "9908": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "jump": "i",
      "offset": [
        7563,
        7634
      ],
      "op": "JUMP",
      "path": "1"
    },
    "9909": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7563,
        7634
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "9910": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7553,
        7634
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "9911": {
      "op": "POP"
    },
    "9912": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7654,
        7719
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 124,
      "value": "0x26F0"
    },
    "9915": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7553,
        7634
      ],
      "op": "DUP3",
      "path": "1"
    },
    "9916": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7672,
        7718
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x26EB"
    },
    "9919": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7672,
        7684
      ],
      "op": "DUP6",
      "path": "1"
    },
    "9920": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7689,
        7717
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "9953": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7672,
        7718
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "9958": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7672,
        7688
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2FEB"
    },
    "9961": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7672,
        7718
      ],
      "op": "AND",
      "path": "1"
    },
    "9962": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "jump": "i",
      "offset": [
        7672,
        7718
      ],
      "op": "JUMP",
      "path": "1"
    },
    "9963": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7672,
        7718
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "9964": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7654,
        7662
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x300D"
    },
    "9967": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "jump": "i",
      "offset": [
        7654,
        7719
      ],
      "op": "JUMP",
      "path": "1"
    },
    "9968": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7654,
        7719
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "9969": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7644,
        7719
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "9970": {
      "op": "POP"
    },
    "9971": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7738,
        7768
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 125,
      "value": "0x2722"
    },
    "9974": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7644,
        7719
      ],
      "op": "DUP3",
      "path": "1"
    },
    "9975": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7750,
        7767
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "10008": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7738,
        7768
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "10013": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7738,
        7749
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2FEB"
    },
    "10016": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7738,
        7768
      ],
      "op": "AND",
      "path": "1"
    },
    "10017": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "jump": "i",
      "offset": [
        7738,
        7768
      ],
      "op": "JUMP",
      "path": "1"
    },
    "10018": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7738,
        7768
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "10019": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10021": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10023": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10025": {
      "op": "SHL"
    },
    "10026": {
      "op": "SUB"
    },
    "10027": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "DUP6",
      "path": "1",
      "statement": 126
    },
    "10028": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "AND",
      "path": "1"
    },
    "10029": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "10031": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10032": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "DUP2",
      "path": "1"
    },
    "10033": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "10034": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7920
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "10036": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "10038": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "10039": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "10041": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10042": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "10043": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7929
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "10044": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7729,
        7768
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10045": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7729,
        7768
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "10046": {
      "op": "POP"
    },
    "10047": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7936
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x274F"
    },
    "10050": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7936
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10051": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7934,
        7935
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "10053": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7936
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "10058": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7933
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2FD9"
    },
    "10061": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7936
      ],
      "op": "AND",
      "path": "1"
    },
    "10062": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "jump": "i",
      "offset": [
        7906,
        7936
      ],
      "op": "JUMP",
      "path": "1"
    },
    "10063": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7906,
        7936
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "10064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10066": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10068": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10070": {
      "op": "SHL"
    },
    "10071": {
      "op": "SUB"
    },
    "10072": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10073": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "10074": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "AND",
      "path": "1"
    },
    "10075": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "10077": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10078": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "DUP2",
      "path": "1"
    },
    "10079": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "10080": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7894
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "10082": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "10084": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "10085": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "10087": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10088": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7903
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "10089": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7936
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "10090": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7936
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10091": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7936
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "10092": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7880,
        7936
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "10093": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7406,
        7943
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "10094": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "offset": [
        7406,
        7943
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "10095": {
      "op": "POP"
    },
    "10096": {
      "fn": "Adjudicator.calculatePenaltyAndReward",
      "jump": "o",
      "offset": [
        7406,
        7943
      ],
      "op": "JUMP",
      "path": "1"
    },
    "10097": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1770,
        1906
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "10098": {
      "offset": [
        1384,
        1385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x2"
    },
    "10100": {
      "offset": [
        1586,
        1595
      ],
      "op": "DUP1",
      "path": "15"
    },
    "10101": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1586,
        1595
      ],
      "op": "SLOAD",
      "path": "15"
    },
    "10102": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10104": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10106": {
      "op": "SHL"
    },
    "10107": {
      "offset": [
        1586,
        1595
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10108": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1586,
        1595
      ],
      "op": "DIV",
      "path": "15"
    },
    "10109": {
      "offset": [
        1586,
        1611
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0xFF"
    },
    "10111": {
      "offset": [
        1586,
        1595
      ],
      "op": "AND",
      "path": "15"
    },
    "10112": {
      "offset": [
        1586,
        1611
      ],
      "op": "EQ",
      "path": "15"
    },
    "10113": {
      "offset": [
        1578,
        1612
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2789"
    },
    "10116": {
      "offset": [
        1578,
        1612
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "10117": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10119": {
      "op": "DUP1"
    },
    "10120": {
      "op": "REVERT"
    },
    "10121": {
      "offset": [
        1578,
        1612
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "10122": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "PUSH1",
      "path": "15",
      "statement": 127,
      "value": "0x40"
    },
    "10124": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "DUP1",
      "path": "15"
    },
    "10125": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "10126": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1888,
        1898
      ],
      "op": "CALLER",
      "path": "15"
    },
    "10127": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "DUP2",
      "path": "15"
    },
    "10128": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "10129": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10130": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "10131": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10133": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10135": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10137": {
      "op": "SHL"
    },
    "10138": {
      "op": "SUB"
    },
    "10139": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "DUP4",
      "path": "15"
    },
    "10140": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "AND",
      "path": "15"
    },
    "10141": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "10142": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "PUSH32",
      "path": "15",
      "value": "0x1E8D98C1B4A0D9BD2E2371026B632EB2773FCCE41742E41F02F574AB69868D4C"
    },
    "10175": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "10176": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10177": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "DUP2",
      "path": "15"
    },
    "10178": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10179": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "SUB",
      "path": "15"
    },
    "10180": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "10182": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "ADD",
      "path": "15"
    },
    "10183": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10184": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1861,
        1899
      ],
      "op": "LOG2",
      "path": "15"
    },
    "10185": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1770,
        1906
      ],
      "op": "POP",
      "path": "15"
    },
    "10186": {
      "fn": "Upgradeable.verifyState",
      "jump": "o",
      "offset": [
        1770,
        1906
      ],
      "op": "JUMP",
      "path": "15"
    },
    "10187": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3897,
        4183
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "10188": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3998,
        4012
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "10190": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3998,
        4012
      ],
      "op": "DUP1",
      "path": "15"
    },
    "10191": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4052,
        4104
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x27DC"
    },
    "10194": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4068,
        4075
      ],
      "op": "DUP6",
      "path": "15"
    },
    "10195": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4077,
        4086
      ],
      "op": "DUP6",
      "path": "15"
    },
    "10196": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4088,
        4089
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "10198": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4091,
        4100
      ],
      "op": "DUP7",
      "path": "15"
    },
    "10199": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3998,
        4012
      ],
      "op": "DUP6",
      "path": "15"
    },
    "10200": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4052,
        4067
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x3023"
    },
    "10203": {
      "fn": "Upgradeable.delegateGet",
      "jump": "i",
      "offset": [
        4052,
        4104
      ],
      "op": "JUMP",
      "path": "15"
    },
    "10204": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4052,
        4104
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "10205": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4147,
        4167
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "10206": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4147,
        4167
      ],
      "op": "SWAP6",
      "path": "15"
    },
    "10207": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4123,
        4177
      ],
      "op": "SWAP5",
      "path": "15"
    },
    "10208": {
      "op": "POP"
    },
    "10209": {
      "op": "POP"
    },
    "10210": {
      "op": "POP"
    },
    "10211": {
      "op": "POP"
    },
    "10212": {
      "op": "POP"
    },
    "10213": {
      "fn": "Upgradeable.delegateGet",
      "jump": "o",
      "offset": [
        4123,
        4177
      ],
      "op": "JUMP",
      "path": "15"
    },
    "10214": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2042,
        2174
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "10215": {
      "offset": [
        1384,
        1385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x2"
    },
    "10217": {
      "offset": [
        1586,
        1595
      ],
      "op": "DUP1",
      "path": "15"
    },
    "10218": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1586,
        1595
      ],
      "op": "SLOAD",
      "path": "15"
    },
    "10219": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10221": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10223": {
      "op": "SHL"
    },
    "10224": {
      "offset": [
        1586,
        1595
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10225": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1586,
        1595
      ],
      "op": "DIV",
      "path": "15"
    },
    "10226": {
      "offset": [
        1586,
        1611
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0xFF"
    },
    "10228": {
      "offset": [
        1586,
        1595
      ],
      "op": "AND",
      "path": "15"
    },
    "10229": {
      "offset": [
        1586,
        1611
      ],
      "op": "EQ",
      "path": "15"
    },
    "10230": {
      "offset": [
        1578,
        1612
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x27FE"
    },
    "10233": {
      "offset": [
        1578,
        1612
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "10234": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10236": {
      "op": "DUP1"
    },
    "10237": {
      "op": "REVERT"
    },
    "10238": {
      "offset": [
        1578,
        1612
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "10239": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "PUSH1",
      "path": "15",
      "statement": 128,
      "value": "0x40"
    },
    "10241": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "DUP1",
      "path": "15"
    },
    "10242": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "10243": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2156,
        2166
      ],
      "op": "CALLER",
      "path": "15"
    },
    "10244": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "DUP2",
      "path": "15"
    },
    "10245": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "10246": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10247": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "10248": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10252": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10254": {
      "op": "SHL"
    },
    "10255": {
      "op": "SUB"
    },
    "10256": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "DUP4",
      "path": "15"
    },
    "10257": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "AND",
      "path": "15"
    },
    "10258": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "10259": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "PUSH32",
      "path": "15",
      "value": "0xD55EC27C5C6316913ED8803C18CFD1BFEFEA953DB909DCBA6140744A9D8B0D1F"
    },
    "10292": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "10293": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10294": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "DUP2",
      "path": "15"
    },
    "10295": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10296": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "SUB",
      "path": "15"
    },
    "10297": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "10299": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "ADD",
      "path": "15"
    },
    "10300": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "10301": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2131,
        2167
      ],
      "op": "LOG2",
      "path": "15"
    },
    "10302": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2042,
        2174
      ],
      "op": "POP",
      "path": "15"
    },
    "10303": {
      "fn": "Upgradeable.finishUpgrade",
      "jump": "o",
      "offset": [
        2042,
        2174
      ],
      "op": "JUMP",
      "path": "15"
    },
    "10304": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        1907,
        2090
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "10305": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10309": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10311": {
      "op": "SHL"
    },
    "10312": {
      "op": "SUB"
    },
    "10313": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        1980,
        2002
      ],
      "op": "DUP2",
      "path": "21",
      "statement": 129
    },
    "10314": {
      "branch": 189,
      "fn": "Ownable._transferOwnership",
      "offset": [
        1980,
        2002
      ],
      "op": "AND",
      "path": "21"
    },
    "10315": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        1972,
        2003
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x2853"
    },
    "10318": {
      "branch": 189,
      "fn": "Ownable._transferOwnership",
      "offset": [
        1972,
        2003
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "10319": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10321": {
      "op": "DUP1"
    },
    "10322": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        1972,
        2003
      ],
      "op": "REVERT",
      "path": "21"
    },
    "10323": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        1972,
        2003
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "10324": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2039,
        2045
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 130,
      "value": "0x0"
    },
    "10326": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2039,
        2045
      ],
      "op": "DUP1",
      "path": "21"
    },
    "10327": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2039,
        2045
      ],
      "op": "SLOAD",
      "path": "21"
    },
    "10328": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "10330": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "10331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10333": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10335": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10337": {
      "op": "SHL"
    },
    "10338": {
      "op": "SUB"
    },
    "10339": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "DUP1",
      "path": "21"
    },
    "10340": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "DUP6",
      "path": "21"
    },
    "10341": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "AND",
      "path": "21"
    },
    "10342": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "SWAP4",
      "path": "21"
    },
    "10343": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2039,
        2045
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "10344": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2039,
        2045
      ],
      "op": "AND",
      "path": "21"
    },
    "10345": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2039,
        2045
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "10346": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "PUSH32",
      "path": "21",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "10379": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "10380": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2018,
        2056
      ],
      "op": "LOG3",
      "path": "21"
    },
    "10381": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2072
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 131,
      "value": "0x0"
    },
    "10383": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "DUP1",
      "path": "21"
    },
    "10384": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SLOAD",
      "path": "21"
    },
    "10385": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10389": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10391": {
      "op": "SHL"
    },
    "10392": {
      "op": "SUB"
    },
    "10393": {
      "op": "NOT"
    },
    "10394": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "AND",
      "path": "21"
    },
    "10395": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10397": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10399": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10401": {
      "op": "SHL"
    },
    "10402": {
      "op": "SUB"
    },
    "10403": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "10404": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "10405": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "10406": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "AND",
      "path": "21"
    },
    "10407": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "10408": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "10409": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "10410": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "OR",
      "path": "21"
    },
    "10411": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "10412": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2066,
        2083
      ],
      "op": "SSTORE",
      "path": "21"
    },
    "10413": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        1907,
        2090
      ],
      "op": "JUMP",
      "path": "21"
    },
    "10414": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2055,
        2438
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "10415": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2133,
        2155
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x28B6"
    },
    "10418": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2133,
        2155
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x349D"
    },
    "10421": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2133,
        2155
      ],
      "op": "JUMP",
      "path": "13"
    },
    "10422": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2133,
        2155
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "10423": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2179,
        2199
      ],
      "op": "DUP2",
      "path": "13",
      "statement": 132
    },
    "10424": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2179,
        2199
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "10425": {
      "offset": [
        1619,
        1647
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x62"
    },
    "10427": {
      "branch": 233,
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2179,
        2215
      ],
      "op": "EQ",
      "path": "13"
    },
    "10428": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2171,
        2216
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x28C4"
    },
    "10431": {
      "branch": 233,
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2171,
        2216
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "10432": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10434": {
      "op": "DUP1"
    },
    "10435": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2171,
        2216
      ],
      "op": "REVERT",
      "path": "13"
    },
    "10436": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2171,
        2216
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "10437": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2226,
        2241
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "10439": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2244,
        2269
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x28CF"
    },
    "10442": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2255,
        2268
      ],
      "op": "DUP4",
      "path": "13"
    },
    "10443": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2244,
        2254
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E7C"
    },
    "10446": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2244,
        2269
      ],
      "op": "JUMP",
      "path": "13"
    },
    "10447": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2244,
        2269
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "10448": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2226,
        2269
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "10449": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2226,
        2269
      ],
      "op": "POP",
      "path": "13"
    },
    "10450": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2289,
        2323
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 133,
      "value": "0x28DF"
    },
    "10453": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2299,
        2306
      ],
      "op": "DUP2",
      "path": "13"
    },
    "10454": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2308,
        2315
      ],
      "op": "DUP4",
      "path": "13"
    },
    "10455": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2308,
        2322
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "10457": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2308,
        2322
      ],
      "op": "ADD",
      "path": "13"
    },
    "10458": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2308,
        2322
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "10459": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2289,
        2298
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "10462": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2289,
        2323
      ],
      "op": "JUMP",
      "path": "13"
    },
    "10463": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2289,
        2323
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "10464": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2279,
        2323
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "10465": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2279,
        2323
      ],
      "op": "POP",
      "path": "13"
    },
    "10466": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2343,
        2377
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 134,
      "value": "0x28EF"
    },
    "10469": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2353,
        2360
      ],
      "op": "DUP2",
      "path": "13"
    },
    "10470": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2362,
        2369
      ],
      "op": "DUP4",
      "path": "13"
    },
    "10471": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2362,
        2376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "10473": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2362,
        2376
      ],
      "op": "ADD",
      "path": "13"
    },
    "10474": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2362,
        2376
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "10475": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2343,
        2352
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "10478": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2343,
        2377
      ],
      "op": "JUMP",
      "path": "13"
    },
    "10479": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2343,
        2377
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "10480": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2333,
        2377
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "10481": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2333,
        2377
      ],
      "op": "POP",
      "path": "13"
    },
    "10482": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2411,
        2430
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 135,
      "value": "0x28FA"
    },
    "10485": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2422,
        2429
      ],
      "op": "DUP2",
      "path": "13"
    },
    "10486": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2411,
        2421
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "10489": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2411,
        2430
      ],
      "op": "JUMP",
      "path": "13"
    },
    "10490": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2411,
        2430
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "10491": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2387,
        2400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "10493": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2387,
        2400
      ],
      "op": "DUP4",
      "path": "13"
    },
    "10494": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2387,
        2400
      ],
      "op": "ADD",
      "path": "13"
    },
    "10495": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2387,
        2431
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "10496": {
      "op": "POP"
    },
    "10497": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2387,
        2394
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "10498": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2055,
        2438
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "10499": {
      "op": "POP"
    },
    "10500": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "o",
      "offset": [
        2055,
        2438
      ],
      "op": "JUMP",
      "path": "13"
    },
    "10501": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9718,
        11277
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "10502": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10069,
        10084
      ],
      "op": "DUP2",
      "path": "10"
    },
    "10503": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10069,
        10084
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10504": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10069,
        10089
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10505": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10069,
        10089
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10506": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10103,
        10125
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "10508": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10103,
        10125
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10509": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10103,
        10125
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10510": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10103,
        10125
      ],
      "op": "ADD",
      "path": "10"
    },
    "10511": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10103,
        10125
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10512": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10163,
        10177
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10513": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10163,
        10177
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10514": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10163,
        10182
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10515": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10163,
        10182
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10516": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10196,
        10217
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10517": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10196,
        10217
      ],
      "op": "DUP5",
      "path": "10"
    },
    "10518": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10196,
        10217
      ],
      "op": "ADD",
      "path": "10"
    },
    "10519": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10196,
        10217
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10520": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10267
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "10522": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10267
      ],
      "op": "DUP7",
      "path": "10"
    },
    "10523": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10267
      ],
      "op": "ADD",
      "path": "10"
    },
    "10524": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10267
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10525": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10267
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10526": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10275
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10527": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10280
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10528": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10255,
        10280
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10529": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10294,
        10321
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10530": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10294,
        10321
      ],
      "op": "DUP8",
      "path": "10"
    },
    "10531": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10294,
        10321
      ],
      "op": "ADD",
      "path": "10"
    },
    "10532": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10294,
        10321
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10533": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "10535": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10536": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10537": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10539": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10541": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "10543": {
      "op": "SHL"
    },
    "10544": {
      "op": "SUB"
    },
    "10545": {
      "op": "NOT"
    },
    "10546": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xF8"
    },
    "10548": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP10",
      "path": "10"
    },
    "10549": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP11",
      "path": "10"
    },
    "10550": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SHL",
      "path": "10"
    },
    "10551": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP2",
      "path": "10"
    },
    "10552": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "AND",
      "path": "10"
    },
    "10553": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10554": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP13",
      "path": "10"
    },
    "10555": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "ADD",
      "path": "10"
    },
    "10556": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10557": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x21"
    },
    "10559": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10560": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "ADD",
      "path": "10"
    },
    "10561": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "10562": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10563": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "10564": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10565": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "10566": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP9",
      "path": "10"
    },
    "10567": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SHL",
      "path": "10"
    },
    "10568": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP8",
      "path": "10"
    },
    "10569": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "AND",
      "path": "10"
    },
    "10570": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x41"
    },
    "10572": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP8",
      "path": "10"
    },
    "10573": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "ADD",
      "path": "10"
    },
    "10574": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10575": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x42"
    },
    "10577": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP7",
      "path": "10"
    },
    "10578": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "ADD",
      "path": "10"
    },
    "10579": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10580": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10581": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10582": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10583": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "10584": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SHL",
      "path": "10"
    },
    "10585": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10586": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "10587": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "AND",
      "path": "10"
    },
    "10588": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x62"
    },
    "10590": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10591": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "ADD",
      "path": "10"
    },
    "10592": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10593": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x63"
    },
    "10595": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10596": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10597": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "ADD",
      "path": "10"
    },
    "10598": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10599": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10600": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10601": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10602": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10603": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10604": {
      "op": "DUP1"
    },
    "10605": {
      "op": "DUP4"
    },
    "10606": {
      "op": "SUB"
    },
    "10607": {
      "op": "SWAP1"
    },
    "10608": {
      "op": "SWAP5"
    },
    "10609": {
      "op": "ADD"
    },
    "10610": {
      "op": "DUP5"
    },
    "10611": {
      "op": "MSTORE"
    },
    "10612": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x83"
    },
    "10614": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10615": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "ADD",
      "path": "10"
    },
    "10616": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10617": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10618": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10445
      ],
      "op": "DUP4",
      "path": "10",
      "statement": 136
    },
    "10619": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10445
      ],
      "op": "DUP7",
      "path": "10"
    },
    "10620": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10445
      ],
      "op": "ADD",
      "path": "10"
    },
    "10621": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10445
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10622": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10450
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10623": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10450
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10624": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10464,
        10486
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10625": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10464,
        10486
      ],
      "op": "DUP6",
      "path": "10"
    },
    "10626": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10464,
        10486
      ],
      "op": "ADD",
      "path": "10"
    },
    "10627": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10464,
        10486
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10628": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10538
      ],
      "op": "DUP7",
      "path": "10"
    },
    "10629": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10538
      ],
      "op": "DUP7",
      "path": "10"
    },
    "10630": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10538
      ],
      "op": "ADD",
      "path": "10"
    },
    "10631": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10538
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10632": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10543
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10633": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10543
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10634": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10557,
        10578
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10635": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10557,
        10578
      ],
      "op": "DUP8",
      "path": "10"
    },
    "10636": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10557,
        10578
      ],
      "op": "ADD",
      "path": "10"
    },
    "10637": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10557,
        10578
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10638": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10616,
        10628
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10639": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10616,
        10628
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10640": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10616,
        10636
      ],
      "op": "DUP8",
      "path": "10"
    },
    "10641": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10616,
        10636
      ],
      "op": "ADD",
      "path": "10"
    },
    "10642": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10616,
        10636
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10643": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10616,
        10641
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10644": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10616,
        10641
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10645": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10655,
        10682
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10646": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10655,
        10682
      ],
      "op": "DUP9",
      "path": "10"
    },
    "10647": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10655,
        10682
      ],
      "op": "ADD",
      "path": "10"
    },
    "10648": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10655,
        10682
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10649": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP8",
      "path": "10"
    },
    "10650": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10651": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9890,
        9897
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "10653": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9890,
        9897
      ],
      "op": "SWAP10",
      "path": "10"
    },
    "10654": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "DUP10",
      "path": "10"
    },
    "10655": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10016,
        10331
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "10656": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10450
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "10657": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10430,
        10450
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "10658": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10464,
        10486
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "10659": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10464,
        10486
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "10660": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10543
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10661": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10524,
        10543
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "10662": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xA3"
    },
    "10664": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10665": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10666": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10667": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10668": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP11",
      "path": "10"
    },
    "10669": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10670": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10671": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10672": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10673": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10674": {
      "op": "JUMPDEST"
    },
    "10675": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10677": {
      "op": "DUP4"
    },
    "10678": {
      "op": "LT"
    },
    "10679": {
      "op": "PUSH2",
      "value": "0x29D1"
    },
    "10682": {
      "op": "JUMPI"
    },
    "10683": {
      "op": "DUP1"
    },
    "10684": {
      "op": "MLOAD"
    },
    "10685": {
      "op": "DUP3"
    },
    "10686": {
      "op": "MSTORE"
    },
    "10687": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "10689": {
      "op": "NOT"
    },
    "10690": {
      "op": "SWAP1"
    },
    "10691": {
      "op": "SWAP3"
    },
    "10692": {
      "op": "ADD"
    },
    "10693": {
      "op": "SWAP2"
    },
    "10694": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10696": {
      "op": "SWAP2"
    },
    "10697": {
      "op": "DUP3"
    },
    "10698": {
      "op": "ADD"
    },
    "10699": {
      "op": "SWAP2"
    },
    "10700": {
      "op": "ADD"
    },
    "10701": {
      "op": "PUSH2",
      "value": "0x29B2"
    },
    "10704": {
      "op": "JUMP"
    },
    "10705": {
      "op": "JUMPDEST"
    },
    "10706": {
      "op": "MLOAD"
    },
    "10707": {
      "op": "DUP2"
    },
    "10708": {
      "op": "MLOAD"
    },
    "10709": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10711": {
      "op": "SWAP4"
    },
    "10712": {
      "op": "DUP5"
    },
    "10713": {
      "op": "SUB"
    },
    "10714": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "10717": {
      "op": "EXP"
    },
    "10718": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10720": {
      "op": "NOT"
    },
    "10721": {
      "op": "ADD"
    },
    "10722": {
      "op": "DUP1"
    },
    "10723": {
      "op": "NOT"
    },
    "10724": {
      "op": "SWAP1"
    },
    "10725": {
      "op": "SWAP3"
    },
    "10726": {
      "op": "AND"
    },
    "10727": {
      "op": "SWAP2"
    },
    "10728": {
      "op": "AND"
    },
    "10729": {
      "op": "OR"
    },
    "10730": {
      "op": "SWAP1"
    },
    "10731": {
      "op": "MSTORE"
    },
    "10732": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xF8"
    },
    "10734": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP11",
      "path": "10"
    },
    "10735": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP12",
      "path": "10"
    },
    "10736": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SHL",
      "path": "10"
    },
    "10737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10739": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10741": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "10743": {
      "op": "SHL"
    },
    "10744": {
      "op": "SUB"
    },
    "10745": {
      "op": "NOT"
    },
    "10746": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10747": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP2",
      "path": "10"
    },
    "10748": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "AND",
      "path": "10"
    },
    "10749": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "10750": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10751": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10752": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10753": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10754": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10755": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10756": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10758": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10759": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10760": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP10",
      "path": "10"
    },
    "10761": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10762": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP10",
      "path": "10"
    },
    "10763": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10764": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "10765": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP10",
      "path": "10"
    },
    "10766": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SHL",
      "path": "10"
    },
    "10767": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10768": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "AND",
      "path": "10"
    },
    "10769": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x21"
    },
    "10771": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP9",
      "path": "10"
    },
    "10772": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10773": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10774": {
      "op": "POP"
    },
    "10775": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "10777": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP7",
      "path": "10"
    },
    "10778": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10779": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10780": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10781": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10782": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10783": {
      "op": "POP"
    },
    "10784": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10785": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SHL",
      "path": "10"
    },
    "10786": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "AND",
      "path": "10"
    },
    "10787": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x42"
    },
    "10789": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10790": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10791": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10792": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x43"
    },
    "10794": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10795": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10796": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10797": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "10798": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10799": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "10800": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10801": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "10803": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10804": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10805": {
      "op": "DUP1"
    },
    "10806": {
      "op": "DUP4"
    },
    "10807": {
      "op": "SUB"
    },
    "10808": {
      "op": "SWAP1"
    },
    "10809": {
      "op": "SWAP5"
    },
    "10810": {
      "op": "ADD"
    },
    "10811": {
      "op": "DUP5"
    },
    "10812": {
      "op": "MSTORE"
    },
    "10813": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x63"
    },
    "10815": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10816": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "ADD",
      "path": "10"
    },
    "10817": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP2",
      "path": "10"
    },
    "10818": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "10819": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10920
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 137,
      "value": "0x80"
    },
    "10821": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10920
      ],
      "op": "DUP9",
      "path": "10"
    },
    "10822": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10920
      ],
      "op": "ADD",
      "path": "10"
    },
    "10823": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10920
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10824": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10941
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10825": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10941
      ],
      "op": "DUP2",
      "path": "10"
    },
    "10826": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10941
      ],
      "op": "ADD",
      "path": "10"
    },
    "10827": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10941
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10828": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10946
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10829": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10946
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10830": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10960,
        11000
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10831": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10960,
        11000
      ],
      "op": "DUP5",
      "path": "10"
    },
    "10832": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10960,
        11000
      ],
      "op": "ADD",
      "path": "10"
    },
    "10833": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10960,
        11000
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10834": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11064
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "10836": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11064
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10837": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11064
      ],
      "op": "ADD",
      "path": "10"
    },
    "10838": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11064
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10839": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11069
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10840": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11069
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10841": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11083,
        11116
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10842": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11083,
        11116
      ],
      "op": "DUP7",
      "path": "10"
    },
    "10843": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11083,
        11116
      ],
      "op": "ADD",
      "path": "10"
    },
    "10844": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11083,
        11116
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10845": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11168,
        11189
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xC0"
    },
    "10847": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11168,
        11189
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10848": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11168,
        11189
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10849": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11168,
        11189
      ],
      "op": "ADD",
      "path": "10"
    },
    "10850": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11168,
        11189
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10851": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP8",
      "path": "10"
    },
    "10852": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "10853": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "10854": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP10",
      "path": "10"
    },
    "10855": {
      "op": "POP"
    },
    "10856": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "DUP10",
      "path": "10"
    },
    "10857": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10354,
        10692
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "10858": {
      "op": "POP"
    },
    "10859": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10861": {
      "op": "PUSH1",
      "value": "0xF9"
    },
    "10863": {
      "op": "SHL"
    },
    "10864": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10791,
        10822
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "10865": {
      "offset": [
        616,
        682
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F"
    },
    "10898": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        616,
        682
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "10899": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10946
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10900": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10908,
        10946
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "10901": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10960,
        11000
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "10902": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10960,
        11000
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "10903": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11069
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "10904": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11038,
        11069
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10905": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11083,
        11116
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "10906": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11083,
        11116
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "10907": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11168,
        11189
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10908": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11168,
        11189
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "10909": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x83"
    },
    "10911": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10912": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "10913": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "10914": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10915": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP3",
      "path": "10"
    },
    "10916": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10917": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10918": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP12",
      "path": "10"
    },
    "10919": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "10920": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10921": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP1",
      "path": "10"
    },
    "10922": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10923": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP4",
      "path": "10"
    },
    "10924": {
      "op": "JUMPDEST"
    },
    "10925": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10927": {
      "op": "DUP4"
    },
    "10928": {
      "op": "LT"
    },
    "10929": {
      "op": "PUSH2",
      "value": "0x2ACB"
    },
    "10932": {
      "op": "JUMPI"
    },
    "10933": {
      "op": "DUP1"
    },
    "10934": {
      "op": "MLOAD"
    },
    "10935": {
      "op": "DUP3"
    },
    "10936": {
      "op": "MSTORE"
    },
    "10937": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "10939": {
      "op": "NOT"
    },
    "10940": {
      "op": "SWAP1"
    },
    "10941": {
      "op": "SWAP3"
    },
    "10942": {
      "op": "ADD"
    },
    "10943": {
      "op": "SWAP2"
    },
    "10944": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10946": {
      "op": "SWAP2"
    },
    "10947": {
      "op": "DUP3"
    },
    "10948": {
      "op": "ADD"
    },
    "10949": {
      "op": "SWAP2"
    },
    "10950": {
      "op": "ADD"
    },
    "10951": {
      "op": "PUSH2",
      "value": "0x2AAC"
    },
    "10954": {
      "op": "JUMP"
    },
    "10955": {
      "op": "JUMPDEST"
    },
    "10956": {
      "op": "MLOAD"
    },
    "10957": {
      "op": "DUP2"
    },
    "10958": {
      "op": "MLOAD"
    },
    "10959": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10961": {
      "op": "SWAP4"
    },
    "10962": {
      "op": "DUP5"
    },
    "10963": {
      "op": "SUB"
    },
    "10964": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "10967": {
      "op": "EXP"
    },
    "10968": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10970": {
      "op": "NOT"
    },
    "10971": {
      "op": "ADD"
    },
    "10972": {
      "op": "DUP1"
    },
    "10973": {
      "op": "NOT"
    },
    "10974": {
      "op": "SWAP1"
    },
    "10975": {
      "op": "SWAP3"
    },
    "10976": {
      "op": "AND"
    },
    "10977": {
      "op": "SWAP2"
    },
    "10978": {
      "op": "AND"
    },
    "10979": {
      "op": "OR"
    },
    "10980": {
      "op": "SWAP1"
    },
    "10981": {
      "op": "MSTORE"
    },
    "10982": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10984": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10986": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "10988": {
      "op": "SHL"
    },
    "10989": {
      "op": "SUB"
    },
    "10990": {
      "op": "NOT"
    },
    "10991": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP13",
      "path": "10"
    },
    "10992": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP2",
      "path": "10"
    },
    "10993": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "AND",
      "path": "10"
    },
    "10994": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "10995": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "10996": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "10997": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "10998": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "10999": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11000": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11001": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11003": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11004": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11005": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11006": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11007": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11008": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xF8"
    },
    "11010": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11011": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11012": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SHL",
      "path": "10"
    },
    "11013": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11014": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "AND",
      "path": "10"
    },
    "11015": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x21"
    },
    "11017": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11018": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11019": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11020": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x22"
    },
    "11022": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11023": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11024": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11025": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11026": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11027": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP9",
      "path": "10"
    },
    "11028": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11029": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SHL",
      "path": "10"
    },
    "11030": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11031": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "11032": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "AND",
      "path": "10"
    },
    "11033": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x42"
    },
    "11035": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11036": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11037": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11038": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x43"
    },
    "11040": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11041": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11042": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP7",
      "path": "10"
    },
    "11043": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11044": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11045": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11046": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11047": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x63"
    },
    "11049": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11050": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11051": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11052": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "11053": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11054": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11055": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11056": {
      "op": "POP"
    },
    "11057": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11058": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11059": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11060": {
      "op": "JUMPDEST"
    },
    "11061": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11063": {
      "op": "DUP4"
    },
    "11064": {
      "op": "LT"
    },
    "11065": {
      "op": "PUSH2",
      "value": "0x2B53"
    },
    "11068": {
      "op": "JUMPI"
    },
    "11069": {
      "op": "DUP1"
    },
    "11070": {
      "op": "MLOAD"
    },
    "11071": {
      "op": "DUP3"
    },
    "11072": {
      "op": "MSTORE"
    },
    "11073": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11075": {
      "op": "NOT"
    },
    "11076": {
      "op": "SWAP1"
    },
    "11077": {
      "op": "SWAP3"
    },
    "11078": {
      "op": "ADD"
    },
    "11079": {
      "op": "SWAP2"
    },
    "11080": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11082": {
      "op": "SWAP2"
    },
    "11083": {
      "op": "DUP3"
    },
    "11084": {
      "op": "ADD"
    },
    "11085": {
      "op": "SWAP2"
    },
    "11086": {
      "op": "ADD"
    },
    "11087": {
      "op": "PUSH2",
      "value": "0x2B34"
    },
    "11090": {
      "op": "JUMP"
    },
    "11091": {
      "op": "JUMPDEST"
    },
    "11092": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11094": {
      "op": "DUP4"
    },
    "11095": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11097": {
      "op": "SUB"
    },
    "11098": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "11101": {
      "op": "EXP"
    },
    "11102": {
      "op": "SUB"
    },
    "11103": {
      "op": "DUP1"
    },
    "11104": {
      "op": "NOT"
    },
    "11105": {
      "op": "DUP3"
    },
    "11106": {
      "op": "MLOAD"
    },
    "11107": {
      "op": "AND"
    },
    "11108": {
      "op": "DUP2"
    },
    "11109": {
      "op": "DUP5"
    },
    "11110": {
      "op": "MLOAD"
    },
    "11111": {
      "op": "AND"
    },
    "11112": {
      "op": "DUP1"
    },
    "11113": {
      "op": "DUP3"
    },
    "11114": {
      "op": "OR"
    },
    "11115": {
      "op": "DUP6"
    },
    "11116": {
      "op": "MSTORE"
    },
    "11117": {
      "op": "POP"
    },
    "11118": {
      "op": "POP"
    },
    "11119": {
      "op": "POP"
    },
    "11120": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11121": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11122": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11123": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11124": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11125": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "ADD",
      "path": "10"
    },
    "11126": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "11127": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11128": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11129": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11130": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11131": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11132": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11133": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11134": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11135": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11136": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "11138": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11139": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11141": {
      "op": "DUP2"
    },
    "11142": {
      "op": "DUP4"
    },
    "11143": {
      "op": "SUB"
    },
    "11144": {
      "op": "SUB"
    },
    "11145": {
      "op": "DUP2"
    },
    "11146": {
      "op": "MSTORE"
    },
    "11147": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11148": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "11150": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10715,
        11199
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11151": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10703,
        11199
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11152": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10703,
        11199
      ],
      "op": "POP",
      "path": "10"
    },
    "11153": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11210,
        11219
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11155": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11222,
        11251
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2B9B"
    },
    "11158": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11241,
        11250
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11159": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11222,
        11240
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3073"
    },
    "11162": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "jump": "i",
      "offset": [
        11222,
        11251
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11163": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11222,
        11251
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11164": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11210,
        11251
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "11165": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9718,
        11277
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "11166": {
      "op": "POP"
    },
    "11167": {
      "op": "POP"
    },
    "11168": {
      "op": "POP"
    },
    "11169": {
      "op": "POP"
    },
    "11170": {
      "op": "POP"
    },
    "11171": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "jump": "o",
      "offset": [
        9718,
        11277
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11172": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12741,
        12971
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11173": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12854,
        12858
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11175": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12884,
        12895
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "11177": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12884,
        12895
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11178": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12884,
        12895
      ],
      "op": "AND",
      "path": "10"
    },
    "11179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11181": {
      "op": "NOT"
    },
    "11182": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12899,
        12913
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11183": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12899,
        12913
      ],
      "op": "ADD",
      "path": "10"
    },
    "11184": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12884,
        12913
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "11186": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12884,
        12913
      ],
      "op": "AND",
      "path": "10"
    },
    "11187": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12884,
        12913
      ],
      "op": "EQ",
      "path": "10"
    },
    "11188": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12884,
        12913
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11189": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12924,
        12967
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 138
    },
    "11190": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12924,
        12967
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11191": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12924,
        12967
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2B9B"
    },
    "11194": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12924,
        12967
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11195": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12924,
        12967
      ],
      "op": "POP",
      "path": "10"
    },
    "11196": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12940,
        12967
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2B9B"
    },
    "11199": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12950,
        12957
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11200": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12959,
        12966
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11201": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13867,
        14198
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11202": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13933,
        13937
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11204": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "11210": {
      "op": "NOT"
    },
    "11211": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        13994
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11212": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        13994
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11213": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        13994
      ],
      "op": "LT",
      "path": "10"
    },
    "11214": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        13994
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11215": {
      "branch": 214,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        13994
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11216": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        14005
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BD9"
    },
    "11219": {
      "branch": 214,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        14005
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11220": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        14005
      ],
      "op": "POP",
      "path": "10"
    },
    "11221": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14004,
        14005
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11222": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13998,
        14000
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11223": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13998,
        14005
      ],
      "op": "LT",
      "path": "10"
    },
    "11224": {
      "branch": 215,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13998,
        14005
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11225": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13987,
        14005
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11226": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13983,
        14043
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11227": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13983,
        14043
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BE8"
    },
    "11230": {
      "branch": 215,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13983,
        14043
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11231": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14027,
        14032
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 139,
      "value": "0x0"
    },
    "11233": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14020,
        14032
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11234": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14020,
        14032
      ],
      "op": "POP",
      "path": "10"
    },
    "11235": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14020,
        14032
      ],
      "op": "POP",
      "path": "10"
    },
    "11236": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14020,
        14032
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x153E"
    },
    "11239": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14020,
        14032
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11240": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13983,
        14043
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11241": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14053,
        14063
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11243": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14081,
        14082
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11244": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14066,
        14083
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11245": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14066,
        14083
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BF2"
    },
    "11248": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14066,
        14083
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11249": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14066,
        14083
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11250": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14066,
        14083
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11251": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14077,
        14079
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11252": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14073,
        14075
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11253": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14066,
        14083
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11254": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14053,
        14083
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11255": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14053,
        14083
      ],
      "op": "POP",
      "path": "10"
    },
    "11256": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14093,
        14110
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11258": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14157,
        14158
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11259": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14113,
        14159
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11260": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14113,
        14159
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C01"
    },
    "11263": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14113,
        14159
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11264": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14113,
        14159
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11265": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14113,
        14159
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11266": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14154,
        14155
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x7"
    },
    "11268": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14150,
        14151
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11269": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14152
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11270": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14152
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C0B"
    },
    "11273": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14152
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11274": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14152
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11275": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14152
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11276": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14146,
        14148
      ],
      "op": "DUP9",
      "path": "10"
    },
    "11277": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14142,
        14143
      ],
      "op": "DUP7",
      "path": "10"
    },
    "11278": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14127,
        14144
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11279": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14127,
        14144
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C14"
    },
    "11282": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14127,
        14144
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11283": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14127,
        14144
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11284": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14127,
        14144
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11285": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14138,
        14140
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11286": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14134,
        14136
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11287": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14127,
        14144
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11288": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14152
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11289": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14113,
        14159
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "11290": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14176,
        14191
      ],
      "op": "SWAP2",
      "path": "10",
      "statement": 140
    },
    "11291": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14176,
        14191
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11292": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14176,
        14191
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11293": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14176,
        14191
      ],
      "op": "EQ",
      "path": "10"
    },
    "11294": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14176,
        14191
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "11295": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13867,
        14198
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "11296": {
      "op": "POP"
    },
    "11297": {
      "op": "POP"
    },
    "11298": {
      "op": "POP"
    },
    "11299": {
      "op": "POP"
    },
    "11300": {
      "op": "POP"
    },
    "11301": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "jump": "o",
      "offset": [
        13867,
        14198
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11302": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11303": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14440,
        14444
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11305": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBE"
    },
    "11323": {
      "op": "NOT"
    },
    "11324": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14440,
        14444
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11325": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "11327": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14440,
        14444
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11328": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14584,
        14586
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1B"
    },
    "11330": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14590,
        14596
      ],
      "op": "DUP10",
      "path": "10"
    },
    "11331": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14590,
        14596
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11332": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14590,
        14596
      ],
      "op": "AND",
      "path": "10"
    },
    "11333": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14584,
        14597
      ],
      "op": "ADD",
      "path": "10"
    },
    "11334": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14608,
        14610
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11335": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14475,
        14541
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11336": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14636,
        14638
      ],
      "op": "DUP13",
      "path": "10"
    },
    "11337": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14628,
        14634
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11338": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14621,
        14652
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11339": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "11341": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11342": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11343": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14613,
        14653
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11345": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11346": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11347": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11349": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11350": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11351": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11352": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11353": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11354": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11355": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "11356": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11357": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "11358": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11359": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "11361": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11362": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "11363": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "AND",
      "path": "10"
    },
    "11364": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11365": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11366": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11367": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11368": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "11370": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11371": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11372": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "11373": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11374": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "11375": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11376": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "11378": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11379": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11380": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11381": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11382": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xA0"
    },
    "11384": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11385": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11386": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11387": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "11388": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "11389": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11391": {
      "op": "NOT"
    },
    "11392": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11393": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11394": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "11395": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11396": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11397": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11398": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SUB",
      "path": "10"
    },
    "11399": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11400": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11401": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11402": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11403": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11404": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "GAS",
      "path": "10"
    },
    "11405": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "STATICCALL",
      "path": "10"
    },
    "11406": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11407": {
      "op": "DUP1"
    },
    "11408": {
      "op": "ISZERO"
    },
    "11409": {
      "op": "PUSH2",
      "value": "0x2C9E"
    },
    "11412": {
      "op": "JUMPI"
    },
    "11413": {
      "op": "RETURNDATASIZE"
    },
    "11414": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11416": {
      "op": "DUP1"
    },
    "11417": {
      "op": "RETURNDATACOPY"
    },
    "11418": {
      "op": "RETURNDATASIZE"
    },
    "11419": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11421": {
      "op": "REVERT"
    },
    "11422": {
      "op": "JUMPDEST"
    },
    "11423": {
      "op": "POP"
    },
    "11424": {
      "op": "POP"
    },
    "11425": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "11427": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11428": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11429": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11431": {
      "op": "NOT"
    },
    "11432": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11433": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "ADD",
      "path": "10"
    },
    "11434": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11435": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14565,
        14654
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11437": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11438": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11439": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "ADD",
      "path": "10"
    },
    "11440": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11441": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11442": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11443": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11444": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11445": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "ADD",
      "path": "10"
    },
    "11446": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "DUP10",
      "path": "10"
    },
    "11447": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11448": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11449": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11450": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11451": {
      "op": "DUP1"
    },
    "11452": {
      "op": "DUP5"
    },
    "11453": {
      "op": "SUB"
    },
    "11454": {
      "op": "DUP6"
    },
    "11455": {
      "op": "ADD"
    },
    "11456": {
      "op": "DUP2"
    },
    "11457": {
      "op": "MSTORE"
    },
    "11458": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "11460": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11461": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "11462": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "ADD",
      "path": "10"
    },
    "11463": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11464": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "11465": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14707,
        14731
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11466": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14697,
        14732
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11467": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14697,
        14732
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11468": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14697,
        14732
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11469": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14697,
        14732
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11470": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14697,
        14732
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "11471": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14697,
        14732
      ],
      "op": "ADD",
      "path": "10"
    },
    "11472": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14697,
        14732
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "11473": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11475": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11477": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "11479": {
      "op": "SHL"
    },
    "11480": {
      "op": "SUB"
    },
    "11481": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14795,
        14814
      ],
      "op": "SWAP2",
      "path": "10",
      "statement": 141
    },
    "11482": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14795,
        14814
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11483": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14795,
        14814
      ],
      "op": "AND",
      "path": "10"
    },
    "11484": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14689,
        14780
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11485": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14689,
        14780
      ],
      "op": "AND",
      "path": "10"
    },
    "11486": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14795,
        14814
      ],
      "op": "EQ",
      "path": "10"
    },
    "11487": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14795,
        14814
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "11488": {
      "op": "POP"
    },
    "11489": {
      "op": "POP"
    },
    "11490": {
      "op": "POP"
    },
    "11491": {
      "op": "POP"
    },
    "11492": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "11493": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "11494": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "POP",
      "path": "10"
    },
    "11495": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "POP",
      "path": "10"
    },
    "11496": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "POP",
      "path": "10"
    },
    "11497": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "POP",
      "path": "10"
    },
    "11498": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14302,
        14818
      ],
      "op": "POP",
      "path": "10"
    },
    "11499": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "jump": "o",
      "offset": [
        14302,
        14818
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11500": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        15977,
        16761
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11501": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16079,
        16095
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2CF4"
    },
    "11504": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16079,
        16095
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x34CA"
    },
    "11507": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "jump": "i",
      "offset": [
        16079,
        16095
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11508": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16079,
        16095
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11509": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16155,
        16159
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11510": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16155,
        16159
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11511": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16155,
        16159
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11513": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16183,
        16187
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11514": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16183,
        16187
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11515": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16183,
        16187
      ],
      "op": "ADD",
      "path": "10"
    },
    "11516": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16183,
        16187
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11517": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16211,
        16215
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11518": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16211,
        16215
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11519": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16239,
        16243
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11520": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16239,
        16243
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11521": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16239,
        16243
      ],
      "op": "ADD",
      "path": "10"
    },
    "11522": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16239,
        16243
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11523": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "11529": {
      "op": "NOT"
    },
    "11530": {
      "offset": [
        987,
        1053
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "11531": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16155,
        16159
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "11532": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16211,
        16215
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11533": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16259,
        16266
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11534": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16259,
        16266
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11535": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16259,
        16266
      ],
      "op": "EQ",
      "path": "10"
    },
    "11536": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16258,
        16280
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11537": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16258,
        16280
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11538": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16258,
        16280
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D1A"
    },
    "11541": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16258,
        16280
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11542": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16258,
        16280
      ],
      "op": "POP",
      "path": "10"
    },
    "11543": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16277,
        16279
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11544": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16272,
        16273
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11545": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16272,
        16279
      ],
      "op": "EQ",
      "path": "10"
    },
    "11546": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16258,
        16280
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11547": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16254,
        16338
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11548": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16254,
        16338
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D4F"
    },
    "11551": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16254,
        16338
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11552": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 142,
      "value": "0x2D43"
    },
    "11555": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "11557": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11558": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11559": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "11561": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "ADD",
      "path": "10"
    },
    "11562": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "11564": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11565": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11566": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16318,
        16319
      ],
      "op": "DUP7",
      "path": "10"
    },
    "11567": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11568": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11569": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11571": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "ADD",
      "path": "10"
    },
    "11572": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16321,
        16322
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11573": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11574": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11575": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11577": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "ADD",
      "path": "10"
    },
    "11578": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16324,
        16325
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "11580": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11581": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11582": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "POP",
      "path": "10"
    },
    "11583": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16316
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3257"
    },
    "11586": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "jump": "i",
      "offset": [
        16302,
        16327
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11587": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16302,
        16327
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11588": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "11589": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "POP",
      "path": "10"
    },
    "11590": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "POP",
      "path": "10"
    },
    "11591": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "POP",
      "path": "10"
    },
    "11592": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "POP",
      "path": "10"
    },
    "11593": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "POP",
      "path": "10"
    },
    "11594": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "POP",
      "path": "10"
    },
    "11595": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x153E"
    },
    "11598": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16295,
        16327
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11599": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16254,
        16338
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11600": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16347,
        16356
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11602": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16375,
        16376
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11603": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16359,
        16377
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11604": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16359,
        16377
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D59"
    },
    "11607": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16359,
        16377
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11608": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16359,
        16377
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11609": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16359,
        16377
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11610": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16372,
        16373
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11611": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16370,
        16371
      ],
      "op": "DUP8",
      "path": "10"
    },
    "11612": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16370,
        16373
      ],
      "op": "SUB",
      "path": "10"
    },
    "11613": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16366,
        16368
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11614": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16359,
        16377
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "11615": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16347,
        16377
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11616": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16347,
        16377
      ],
      "op": "POP",
      "path": "10"
    },
    "11617": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16401,
        16410
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11619": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16429,
        16430
      ],
      "op": "DUP7",
      "path": "10"
    },
    "11620": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16413,
        16431
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11621": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16413,
        16431
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D6A"
    },
    "11624": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16413,
        16431
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11625": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16413,
        16431
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11626": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16413,
        16431
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11627": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16426,
        16427
      ],
      "op": "DUP7",
      "path": "10"
    },
    "11628": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16425
      ],
      "op": "DUP9",
      "path": "10"
    },
    "11629": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16427
      ],
      "op": "SUB",
      "path": "10"
    },
    "11630": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16420,
        16422
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11631": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16413,
        16431
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "11632": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16401,
        16431
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11633": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16401,
        16431
      ],
      "op": "POP",
      "path": "10"
    },
    "11634": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16455,
        16464
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11636": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16480,
        16481
      ],
      "op": "DUP8",
      "path": "10"
    },
    "11637": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16467,
        16482
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11638": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16467,
        16482
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D7B"
    },
    "11641": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16467,
        16482
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11642": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16467,
        16482
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11643": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16467,
        16482
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11644": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16477,
        16478
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11645": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16474,
        16475
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11646": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16467,
        16482
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11647": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16455,
        16482
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11648": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16455,
        16482
      ],
      "op": "POP",
      "path": "10"
    },
    "11649": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16503,
        16512
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11651": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16528,
        16529
      ],
      "op": "DUP9",
      "path": "10"
    },
    "11652": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16515,
        16530
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11653": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16515,
        16530
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D8A"
    },
    "11656": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16515,
        16530
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11657": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16515,
        16530
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11658": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16515,
        16530
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11659": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16525,
        16526
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11660": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16522,
        16523
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11661": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16515,
        16530
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11662": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16503,
        16530
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11663": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16503,
        16530
      ],
      "op": "POP",
      "path": "10"
    },
    "11664": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16552,
        16561
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11666": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16577,
        16578
      ],
      "op": "DUP10",
      "path": "10"
    },
    "11667": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16564,
        16579
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11668": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16564,
        16579
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D99"
    },
    "11671": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16564,
        16579
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11672": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16564,
        16579
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11673": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16564,
        16579
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11674": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16574,
        16575
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11675": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16571,
        16572
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11676": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16564,
        16579
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11677": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16552,
        16579
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11678": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16552,
        16579
      ],
      "op": "POP",
      "path": "10"
    },
    "11679": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16653,
        16654
      ],
      "op": "DUP10",
      "path": "10",
      "statement": 143
    },
    "11680": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16596,
        16655
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11681": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16596,
        16655
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DA6"
    },
    "11684": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16596,
        16655
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11685": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16596,
        16655
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11686": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16596,
        16655
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11687": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16649,
        16650
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11688": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16622,
        16651
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11689": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16622,
        16651
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DAE"
    },
    "11692": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16622,
        16651
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11693": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16622,
        16651
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11694": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16622,
        16651
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11695": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16646,
        16647
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11696": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16642,
        16643
      ],
      "op": "DUP13",
      "path": "10"
    },
    "11697": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16629,
        16644
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11698": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16629,
        16644
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DB7"
    },
    "11701": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16629,
        16644
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11702": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16629,
        16644
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11703": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16629,
        16644
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11704": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16639,
        16640
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11705": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16636,
        16637
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x2"
    },
    "11707": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16629,
        16644
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11708": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16622,
        16651
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "11709": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16620,
        16621
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11710": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16620,
        16651
      ],
      "op": "SUB",
      "path": "10"
    },
    "11711": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16616,
        16617
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11712": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16603,
        16618
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11713": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16603,
        16618
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DC6"
    },
    "11716": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16603,
        16618
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11717": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16603,
        16618
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11718": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16603,
        16618
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11719": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16613,
        16614
      ],
      "op": "DUP8",
      "path": "10"
    },
    "11720": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16610,
        16611
      ],
      "op": "DUP9",
      "path": "10"
    },
    "11721": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16603,
        16618
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11722": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16596,
        16655
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "11723": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16655
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11724": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16655
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11725": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16734,
        16735
      ],
      "op": "DUP10",
      "path": "10",
      "statement": 144
    },
    "11726": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16734,
        16735
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11727": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16672,
        16736
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DD4"
    },
    "11730": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16672,
        16736
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11731": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16672,
        16736
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11732": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16672,
        16736
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11733": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16730,
        16731
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11734": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16717,
        16732
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11735": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16717,
        16732
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DDC"
    },
    "11738": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16717,
        16732
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11739": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16717,
        16732
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11740": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16717,
        16732
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11741": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16727,
        16728
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11742": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16724,
        16725
      ],
      "op": "DUP11",
      "path": "10"
    },
    "11743": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16717,
        16732
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11744": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16715,
        16716
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11745": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16715,
        16732
      ],
      "op": "SUB",
      "path": "10"
    },
    "11746": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16711,
        16712
      ],
      "op": "DUP12",
      "path": "10"
    },
    "11747": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16679,
        16713
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11748": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16679,
        16713
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DE9"
    },
    "11751": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16679,
        16713
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11752": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16679,
        16713
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11753": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16679,
        16713
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11754": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16707,
        16708
      ],
      "op": "DUP13",
      "path": "10"
    },
    "11755": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16689,
        16709
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11756": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16689,
        16709
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2DF1"
    },
    "11759": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16689,
        16709
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11760": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16689,
        16709
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11761": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16689,
        16709
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11762": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16701,
        16705
      ],
      "op": "DUP15",
      "path": "10"
    },
    "11763": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16701,
        16705
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11764": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16699,
        16705
      ],
      "op": "DUP15",
      "path": "10"
    },
    "11765": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16699,
        16705
      ],
      "op": "SUB",
      "path": "10"
    },
    "11766": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16696,
        16697
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11767": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16689,
        16709
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "11768": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16686,
        16687
      ],
      "op": "DUP9",
      "path": "10"
    },
    "11769": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16679,
        16713
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11770": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16672,
        16736
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "11771": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16665,
        16669
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11773": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16665,
        16669
      ],
      "op": "DUP13",
      "path": "10"
    },
    "11774": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16665,
        16669
      ],
      "op": "ADD",
      "path": "10"
    },
    "11775": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16665,
        16736
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11776": {
      "op": "POP"
    },
    "11777": {
      "op": "POP"
    },
    "11778": {
      "op": "POP"
    },
    "11779": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16746,
        16750
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 145,
      "value": "0x40"
    },
    "11781": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16746,
        16750
      ],
      "op": "DUP9",
      "path": "10"
    },
    "11782": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16746,
        16750
      ],
      "op": "ADD",
      "path": "10"
    },
    "11783": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16746,
        16754
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "11784": {
      "op": "POP"
    },
    "11785": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16665,
        16666
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "11786": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16665,
        16666
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "11787": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        15977,
        16761
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "11788": {
      "op": "POP"
    },
    "11789": {
      "op": "POP"
    },
    "11790": {
      "op": "POP"
    },
    "11791": {
      "op": "POP"
    },
    "11792": {
      "op": "POP"
    },
    "11793": {
      "op": "POP"
    },
    "11794": {
      "op": "POP"
    },
    "11795": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "jump": "o",
      "offset": [
        15977,
        16761
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11796": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15117,
        15543
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11797": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15251,
        15255
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "11799": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15251,
        15255
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11800": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15251,
        15255
      ],
      "op": "ADD",
      "path": "10"
    },
    "11801": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15251,
        15255
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11802": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15223,
        15227
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11804": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15223,
        15227
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11805": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15251,
        15255
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11806": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15265,
        15345
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2E2B"
    },
    "11809": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15265,
        15345
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11810": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15297,
        15302
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 146,
      "value": "0x0"
    },
    "11812": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15290,
        15302
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11813": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15290,
        15302
      ],
      "op": "POP",
      "path": "10"
    },
    "11814": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15290,
        15302
      ],
      "op": "POP",
      "path": "10"
    },
    "11815": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15290,
        15302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x153E"
    },
    "11818": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15290,
        15302
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11819": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15265,
        15345
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11820": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "11826": {
      "op": "NOT"
    },
    "11827": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15355,
        15364
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "11829": {
      "offset": [
        987,
        1053
      ],
      "op": "DUP2",
      "path": "10"
    },
    "11830": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15421,
        15423
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11831": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15417,
        15419
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11832": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15410,
        15427
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11833": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15476,
        15480
      ],
      "op": "DUP6",
      "path": "10",
      "statement": 147
    },
    "11834": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15476,
        15480
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11835": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15388,
        15427
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11836": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15388,
        15427
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "11837": {
      "op": "POP"
    },
    "11838": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15470,
        15471
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11839": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15470,
        15471
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11840": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15472
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2E45"
    },
    "11843": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15472
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11844": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15472
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11845": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15472
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11846": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15451,
        15455
      ],
      "op": "DUP8",
      "path": "10"
    },
    "11847": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15451,
        15455
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11848": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15457,
        15468
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11849": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15457,
        15468
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "11850": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15472
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11851": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15480
      ],
      "op": "EQ",
      "path": "10"
    },
    "11852": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11853": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15535
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "11854": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2E72"
    },
    "11857": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11858": {
      "op": "POP"
    },
    "11859": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15531,
        15535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11861": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15531,
        15535
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11862": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15531,
        15535
      ],
      "op": "ADD",
      "path": "10"
    },
    "11863": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15531,
        15535
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11864": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15525,
        15526
      ],
      "op": "DUP3",
      "path": "10"
    },
    "11865": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15525,
        15526
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11866": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15484,
        15527
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2E5F"
    },
    "11869": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15484,
        15527
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11870": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15484,
        15527
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11871": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15484,
        15527
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11872": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15521,
        15522
      ],
      "op": "DUP4",
      "path": "10"
    },
    "11873": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15497,
        15523
      ],
      "op": "DUP1",
      "path": "10"
    },
    "11874": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15497,
        15523
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2E67"
    },
    "11877": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15497,
        15523
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "11878": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15497,
        15523
      ],
      "op": "INVALID",
      "path": "10"
    },
    "11879": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15497,
        15523
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11880": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15517,
        15519
      ],
      "op": "DUP6",
      "path": "10"
    },
    "11881": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15504,
        15515
      ],
      "op": "DUP5",
      "path": "10"
    },
    "11882": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15497,
        15523
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11883": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15491,
        15495
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "11885": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15491,
        15495
      ],
      "op": "DUP10",
      "path": "10"
    },
    "11886": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15491,
        15495
      ],
      "op": "ADD",
      "path": "10"
    },
    "11887": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15491,
        15495
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "11888": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15484,
        15527
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "11889": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15484,
        15535
      ],
      "op": "EQ",
      "path": "10"
    },
    "11890": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15444,
        15535
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "11891": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15437,
        15535
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "11892": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15117,
        15543
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "11893": {
      "op": "POP"
    },
    "11894": {
      "op": "POP"
    },
    "11895": {
      "op": "POP"
    },
    "11896": {
      "op": "POP"
    },
    "11897": {
      "op": "POP"
    },
    "11898": {
      "op": "POP"
    },
    "11899": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "jump": "o",
      "offset": [
        15117,
        15543
      ],
      "op": "JUMP",
      "path": "10"
    },
    "11900": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7560,
        7737
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "11901": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7697,
        7699
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "11903": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7685,
        7700
      ],
      "op": "ADD",
      "path": "13"
    },
    "11904": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7685,
        7700
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "11905": {
      "fn": "UmbralDeserializer.getPointer",
      "jump": "o",
      "offset": [
        7660,
        7731
      ],
      "op": "JUMP",
      "path": "13"
    },
    "11906": {
      "fn": "UmbralDeserializer.getBytes32",
      "offset": [
        8664,
        8815
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "11907": {
      "fn": "UmbralDeserializer.getBytes32",
      "offset": [
        8784,
        8799
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "11908": {
      "fn": "UmbralDeserializer.getBytes32",
      "offset": [
        8784,
        8799
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "11909": {
      "fn": "UmbralDeserializer.getBytes32",
      "jump": "o",
      "offset": [
        8760,
        8809
      ],
      "op": "JUMP",
      "path": "13"
    },
    "11910": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1331,
        1479
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "11911": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "DUP1",
      "path": "11",
      "statement": 148
    },
    "11912": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "11913": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "11915": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "11916": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "11917": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "ADD",
      "path": "11"
    },
    "11918": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "KECCAK256",
      "path": "11"
    },
    "11919": {
      "fn": "SignatureVerifier.toAddress",
      "offset": [
        1448,
        1469
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "11920": {
      "fn": "SignatureVerifier.toAddress",
      "jump": "o",
      "offset": [
        1331,
        1479
      ],
      "op": "JUMP",
      "path": "11"
    },
    "11921": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        7824,
        8282
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "11922": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8097,
        8112
      ],
      "op": "DUP2",
      "path": "13"
    },
    "11923": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8097,
        8112
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "11924": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8156,
        8157
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "11926": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8142,
        8158
      ],
      "op": "DUP4",
      "path": "13"
    },
    "11927": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8142,
        8158
      ],
      "op": "ADD",
      "path": "13"
    },
    "11928": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8136,
        8159
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "11929": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        7913,
        7934
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "11931": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8089,
        8113
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "11932": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8089,
        8113
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "11933": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8089,
        8113
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "11934": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8089,
        8113
      ],
      "op": "BYTE",
      "path": "13"
    },
    "11935": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8178,
        8196
      ],
      "op": "DUP3",
      "path": "13",
      "statement": 149
    },
    "11936": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8178,
        8196
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "11937": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8206,
        8219
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 150,
      "value": "0x20"
    },
    "11939": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8206,
        8219
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "11940": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8206,
        8219
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "11941": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8206,
        8219
      ],
      "op": "ADD",
      "path": "13"
    },
    "11942": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8206,
        8228
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "11943": {
      "offset": [
        1537,
        1539
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "11945": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8254,
        8275
      ],
      "op": "ADD",
      "path": "13",
      "statement": 151
    },
    "11946": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8254,
        8275
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "11947": {
      "fn": "UmbralDeserializer.copyPoint",
      "jump": "o",
      "offset": [
        7824,
        8282
      ],
      "op": "JUMP",
      "path": "13"
    },
    "11948": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2605,
        3557
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "11949": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2709,
        2738
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2EB4"
    },
    "11952": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2709,
        2738
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x34E8"
    },
    "11955": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2709,
        2738
      ],
      "op": "JUMP",
      "path": "13"
    },
    "11956": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2709,
        2738
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "11957": {
      "offset": [
        1695,
        1740
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xE4"
    },
    "11959": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2762,
        2805
      ],
      "op": "DUP3",
      "path": "13",
      "statement": 152
    },
    "11960": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2762,
        2805
      ],
      "op": "LT",
      "path": "13"
    },
    "11961": {
      "branch": 234,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2762,
        2805
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "11962": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2754,
        2806
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2EC2"
    },
    "11965": {
      "branch": 234,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2754,
        2806
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "11966": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11968": {
      "op": "DUP1"
    },
    "11969": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2754,
        2806
      ],
      "op": "REVERT",
      "path": "13"
    },
    "11970": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2754,
        2806
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "11971": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2828,
        2862
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 153,
      "value": "0x2ED0"
    },
    "11974": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2838,
        2846
      ],
      "op": "DUP4",
      "path": "13"
    },
    "11975": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2848,
        2853
      ],
      "op": "DUP3",
      "path": "13"
    },
    "11976": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2848,
        2861
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "11978": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2848,
        2861
      ],
      "op": "ADD",
      "path": "13"
    },
    "11979": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2848,
        2861
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "11980": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2828,
        2837
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "11983": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2828,
        2862
      ],
      "op": "JUMP",
      "path": "13"
    },
    "11984": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2828,
        2862
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "11985": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2817,
        2862
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "11986": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2817,
        2862
      ],
      "op": "POP",
      "path": "13"
    },
    "11987": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2883,
        2917
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 154,
      "value": "0x2EE0"
    },
    "11990": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2893,
        2901
      ],
      "op": "DUP4",
      "path": "13"
    },
    "11991": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2903,
        2908
      ],
      "op": "DUP3",
      "path": "13"
    },
    "11992": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2903,
        2916
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "11994": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2903,
        2916
      ],
      "op": "ADD",
      "path": "13"
    },
    "11995": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2903,
        2916
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "11996": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2883,
        2892
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "11999": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2883,
        2917
      ],
      "op": "JUMP",
      "path": "13"
    },
    "12000": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2883,
        2917
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "12001": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2872,
        2917
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "12002": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2872,
        2917
      ],
      "op": "POP",
      "path": "13"
    },
    "12003": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2938,
        2985
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 155,
      "value": "0x2EF0"
    },
    "12006": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2948,
        2956
      ],
      "op": "DUP4",
      "path": "13"
    },
    "12007": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2958,
        2963
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12008": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2958,
        2984
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "12010": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2958,
        2984
      ],
      "op": "ADD",
      "path": "13"
    },
    "12011": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2958,
        2984
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "12012": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2938,
        2947
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "12015": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2938,
        2985
      ],
      "op": "JUMP",
      "path": "13"
    },
    "12016": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2938,
        2985
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "12017": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2927,
        2985
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "12018": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2927,
        2985
      ],
      "op": "POP",
      "path": "13"
    },
    "12019": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3006,
        3046
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 156,
      "value": "0x2F00"
    },
    "12022": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3016,
        3024
      ],
      "op": "DUP4",
      "path": "13"
    },
    "12023": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3026,
        3031
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12024": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3026,
        3045
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "12026": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3026,
        3045
      ],
      "op": "ADD",
      "path": "13"
    },
    "12027": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3026,
        3045
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "12028": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3006,
        3015
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E91"
    },
    "12031": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3006,
        3046
      ],
      "op": "JUMP",
      "path": "13"
    },
    "12032": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3006,
        3046
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "12033": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2995,
        3046
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "12034": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2995,
        3046
      ],
      "op": "POP",
      "path": "13"
    },
    "12035": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3078,
        3098
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 157,
      "value": "0x2F0B"
    },
    "12038": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3089,
        3097
      ],
      "op": "DUP4",
      "path": "13"
    },
    "12039": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3078,
        3088
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2E82"
    },
    "12042": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3078,
        3098
      ],
      "op": "JUMP",
      "path": "13"
    },
    "12043": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3078,
        3098
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "12044": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3056,
        3067
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x80"
    },
    "12046": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3056,
        3067
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12047": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3056,
        3067
      ],
      "op": "ADD",
      "path": "13"
    },
    "12048": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3056,
        3099
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "12049": {
      "offset": [
        1579,
        1581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "12051": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 158
    },
    "12052": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "12053": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "DUP2",
      "path": "13"
    },
    "12054": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "DUP2",
      "path": "13"
    },
    "12055": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "12056": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "12058": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "DUP2",
      "path": "13"
    },
    "12059": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "ADD",
      "path": "13"
    },
    "12060": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12061": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "12062": {
      "offset": [
        1499,
        1501
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "12064": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3109,
        3132
      ],
      "op": "SWAP5",
      "path": "13",
      "statement": 159
    },
    "12065": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3109,
        3132
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "12066": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3109,
        3132
      ],
      "op": "SWAP5",
      "path": "13"
    },
    "12067": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3109,
        3132
      ],
      "op": "ADD",
      "path": "13"
    },
    "12068": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3109,
        3132
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "12069": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "12070": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "12072": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12073": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "ADD",
      "path": "13"
    },
    "12074": {
      "op": "DUP2"
    },
    "12075": {
      "op": "DUP1"
    },
    "12076": {
      "op": "CALLDATASIZE"
    },
    "12077": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3166,
        3191
      ],
      "op": "DUP4",
      "path": "13"
    },
    "12078": {
      "op": "CALLDATACOPY"
    },
    "12079": {
      "op": "POP"
    },
    "12080": {
      "op": "POP"
    },
    "12081": {
      "op": "POP"
    },
    "12082": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3143,
        3163
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xA0"
    },
    "12084": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3143,
        3163
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12085": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3143,
        3163
      ],
      "op": "ADD",
      "path": "13"
    },
    "12086": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3143,
        3191
      ],
      "op": "DUP2",
      "path": "13"
    },
    "12087": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3143,
        3191
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "12088": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3143,
        3191
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "12089": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3269,
        3326
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 160,
      "value": "0x2F45"
    },
    "12092": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3269,
        3326
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "12093": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3279,
        3287
      ],
      "op": "DUP5",
      "path": "13"
    },
    "12094": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3279,
        3287
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "12095": {
      "offset": [
        1579,
        1581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "12097": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3269,
        3278
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x334C"
    },
    "12100": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3269,
        3326
      ],
      "op": "JUMP",
      "path": "13"
    },
    "12101": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3269,
        3326
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "12102": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3258,
        3326
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "12103": {
      "op": "POP"
    },
    "12104": {
      "offset": [
        1695,
        1740
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xE4"
    },
    "12106": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3340,
        3382
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12107": {
      "branch": 235,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3340,
        3382
      ],
      "op": "GT",
      "path": "13"
    },
    "12108": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3336,
        3551
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "12109": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3336,
        3551
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x153E"
    },
    "12112": {
      "branch": 235,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3336,
        3551
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "12113": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "12115": {
      "op": "NOT"
    },
    "12116": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3425,
        3467
      ],
      "op": "DUP3",
      "path": "13",
      "statement": 161
    },
    "12117": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3425,
        3467
      ],
      "op": "ADD",
      "path": "13"
    },
    "12118": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH8",
      "path": "13",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "12127": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP2",
      "path": "13"
    },
    "12128": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "GT",
      "path": "13"
    },
    "12129": {
      "op": "DUP1"
    },
    "12130": {
      "op": "ISZERO"
    },
    "12131": {
      "op": "PUSH2",
      "value": "0x2F6B"
    },
    "12134": {
      "op": "JUMPI"
    },
    "12135": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "12137": {
      "op": "DUP1"
    },
    "12138": {
      "op": "REVERT"
    },
    "12139": {
      "op": "JUMPDEST"
    },
    "12140": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "POP",
      "path": "13"
    },
    "12141": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "12143": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "12144": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "12145": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP1",
      "path": "13"
    },
    "12146": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12147": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "12148": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP1",
      "path": "13"
    },
    "12149": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1F"
    },
    "12151": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "ADD",
      "path": "13"
    },
    "12152": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1F"
    },
    "12154": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "NOT",
      "path": "13"
    },
    "12155": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "AND",
      "path": "13"
    },
    "12156": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "12158": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "ADD",
      "path": "13"
    },
    "12159": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12160": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "ADD",
      "path": "13"
    },
    "12161": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "12163": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "12164": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP1",
      "path": "13"
    },
    "12165": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "12166": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2F96"
    },
    "12169": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "12170": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "12172": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12173": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "ADD",
      "path": "13"
    },
    "12174": {
      "op": "DUP2"
    },
    "12175": {
      "op": "DUP1"
    },
    "12176": {
      "op": "CALLDATASIZE"
    },
    "12177": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "DUP4",
      "path": "13"
    },
    "12178": {
      "op": "CALLDATACOPY"
    },
    "12179": {
      "op": "ADD"
    },
    "12180": {
      "op": "SWAP1"
    },
    "12181": {
      "op": "POP"
    },
    "12182": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3415,
        3468
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "12183": {
      "op": "POP"
    },
    "12184": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3398,
        3412
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xC0"
    },
    "12186": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3398,
        3412
      ],
      "op": "DUP3",
      "path": "13"
    },
    "12187": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3398,
        3412
      ],
      "op": "ADD",
      "path": "13"
    },
    "12188": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3398,
        3468
      ],
      "op": "DUP2",
      "path": "13"
    },
    "12189": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3398,
        3468
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "12190": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3398,
        3468
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "12191": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3518,
        3539
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 162
    },
    "12192": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3518,
        3539
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "12193": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3482,
        3540
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2FAB"
    },
    "12196": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3482,
        3540
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "12197": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3492,
        3500
      ],
      "op": "DUP6",
      "path": "13"
    },
    "12198": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3492,
        3500
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "12199": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3482,
        3491
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x334C"
    },
    "12202": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3482,
        3540
      ],
      "op": "JUMP",
      "path": "13"
    },
    "12203": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3482,
        3540
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "12204": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3482,
        3540
      ],
      "op": "POP",
      "path": "13"
    },
    "12205": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2605,
        3557
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "12206": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2605,
        3557
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "12207": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2605,
        3557
      ],
      "op": "POP",
      "path": "13"
    },
    "12208": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2605,
        3557
      ],
      "op": "POP",
      "path": "13"
    },
    "12209": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "o",
      "offset": [
        2605,
        3557
      ],
      "op": "JUMP",
      "path": "13"
    },
    "12210": {
      "fn": "SafeMath.mul",
      "offset": [
        232,
        653
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "12211": {
      "fn": "SafeMath.mul",
      "offset": [
        290,
        297
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "12213": {
      "branch": 216,
      "fn": "SafeMath.mul",
      "offset": [
        530,
        536
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12214": {
      "fn": "SafeMath.mul",
      "offset": [
        526,
        571
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2FC1"
    },
    "12217": {
      "branch": 216,
      "fn": "SafeMath.mul",
      "offset": [
        526,
        571
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "12218": {
      "op": "POP"
    },
    "12219": {
      "fn": "SafeMath.mul",
      "offset": [
        559,
        560
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 163,
      "value": "0x0"
    },
    "12221": {
      "fn": "SafeMath.mul",
      "offset": [
        552,
        560
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x153E"
    },
    "12224": {
      "fn": "SafeMath.mul",
      "offset": [
        552,
        560
      ],
      "op": "JUMP",
      "path": "20"
    },
    "12225": {
      "fn": "SafeMath.mul",
      "offset": [
        526,
        571
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "12226": {
      "fn": "SafeMath.mul",
      "offset": [
        593,
        598
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12227": {
      "fn": "SafeMath.mul",
      "offset": [
        593,
        598
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12228": {
      "fn": "SafeMath.mul",
      "offset": [
        593,
        598
      ],
      "op": "MUL",
      "path": "20"
    },
    "12229": {
      "fn": "SafeMath.mul",
      "offset": [
        597,
        598
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12230": {
      "fn": "SafeMath.mul",
      "offset": [
        593,
        594
      ],
      "op": "DUP5",
      "path": "20"
    },
    "12231": {
      "fn": "SafeMath.mul",
      "offset": [
        593,
        598
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12232": {
      "fn": "SafeMath.mul",
      "offset": [
        593,
        594
      ],
      "op": "DUP2",
      "path": "20"
    },
    "12233": {
      "fn": "SafeMath.mul",
      "offset": [
        616,
        621
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 164,
      "value": "0x2FCE"
    },
    "12236": {
      "fn": "SafeMath.mul",
      "offset": [
        616,
        621
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "12237": {
      "dev": "Division by zero",
      "fn": "SafeMath.mul",
      "offset": [
        616,
        621
      ],
      "op": "INVALID",
      "path": "20"
    },
    "12238": {
      "fn": "SafeMath.mul",
      "offset": [
        616,
        621
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "12239": {
      "fn": "SafeMath.mul",
      "offset": [
        616,
        621
      ],
      "op": "DIV",
      "path": "20"
    },
    "12240": {
      "branch": 217,
      "fn": "SafeMath.mul",
      "offset": [
        616,
        626
      ],
      "op": "EQ",
      "path": "20"
    },
    "12241": {
      "fn": "SafeMath.mul",
      "offset": [
        608,
        627
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F6A"
    },
    "12244": {
      "branch": 217,
      "fn": "SafeMath.mul",
      "offset": [
        608,
        627
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "12245": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "12247": {
      "op": "DUP1"
    },
    "12248": {
      "op": "REVERT"
    },
    "12249": {
      "fn": "SafeMath.add",
      "offset": [
        1440,
        1585
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "12250": {
      "fn": "SafeMath.add",
      "offset": [
        1498,
        1505
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "12252": {
      "fn": "SafeMath.add",
      "offset": [
        1529,
        1534
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12253": {
      "fn": "SafeMath.add",
      "offset": [
        1529,
        1534
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12254": {
      "fn": "SafeMath.add",
      "offset": [
        1529,
        1534
      ],
      "op": "ADD",
      "path": "20"
    },
    "12255": {
      "fn": "SafeMath.add",
      "offset": [
        1552,
        1558
      ],
      "op": "DUP4",
      "path": "20",
      "statement": 165
    },
    "12256": {
      "fn": "SafeMath.add",
      "offset": [
        1552,
        1558
      ],
      "op": "DUP2",
      "path": "20"
    },
    "12257": {
      "fn": "SafeMath.add",
      "offset": [
        1552,
        1558
      ],
      "op": "LT",
      "path": "20"
    },
    "12258": {
      "branch": 218,
      "fn": "SafeMath.add",
      "offset": [
        1552,
        1558
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "12259": {
      "fn": "SafeMath.add",
      "offset": [
        1544,
        1559
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F6A"
    },
    "12262": {
      "branch": 218,
      "fn": "SafeMath.add",
      "offset": [
        1544,
        1559
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "12263": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "12265": {
      "op": "DUP1"
    },
    "12266": {
      "op": "REVERT"
    },
    "12267": {
      "fn": "SafeMath.div",
      "offset": [
        783,
        1079
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "12268": {
      "fn": "SafeMath.div",
      "offset": [
        841,
        848
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "12270": {
      "fn": "SafeMath.div",
      "offset": [
        938,
        939
      ],
      "op": "DUP1",
      "path": "20",
      "statement": 166
    },
    "12271": {
      "fn": "SafeMath.div",
      "offset": [
        934,
        935
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12272": {
      "branch": 219,
      "fn": "SafeMath.div",
      "offset": [
        934,
        939
      ],
      "op": "GT",
      "path": "20"
    },
    "12273": {
      "fn": "SafeMath.div",
      "offset": [
        926,
        940
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2FF9"
    },
    "12276": {
      "branch": 219,
      "fn": "SafeMath.div",
      "offset": [
        926,
        940
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "12277": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "12279": {
      "op": "DUP1"
    },
    "12280": {
      "fn": "SafeMath.div",
      "offset": [
        926,
        940
      ],
      "op": "REVERT",
      "path": "20"
    },
    "12281": {
      "fn": "SafeMath.div",
      "offset": [
        926,
        940
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "12282": {
      "fn": "SafeMath.div",
      "offset": [
        950,
        959
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "12284": {
      "fn": "SafeMath.div",
      "offset": [
        966,
        967
      ],
      "op": "DUP3",
      "path": "20"
    },
    "12285": {
      "fn": "SafeMath.div",
      "offset": [
        962,
        963
      ],
      "op": "DUP5",
      "path": "20"
    },
    "12286": {
      "fn": "SafeMath.div",
      "offset": [
        962,
        967
      ],
      "op": "DUP2",
      "path": "20"
    },
    "12287": {
      "fn": "SafeMath.div",
      "offset": [
        962,
        967
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x3004"
    },
    "12290": {
      "fn": "SafeMath.div",
      "offset": [
        962,
        967
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "12291": {
      "dev": "Division by zero",
      "fn": "SafeMath.div",
      "offset": [
        962,
        967
      ],
      "op": "INVALID",
      "path": "20"
    },
    "12292": {
      "fn": "SafeMath.div",
      "offset": [
        962,
        967
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "12293": {
      "fn": "SafeMath.div",
      "offset": [
        962,
        967
      ],
      "op": "DIV",
      "path": "20"
    },
    "12294": {
      "fn": "SafeMath.div",
      "offset": [
        962,
        967
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "12295": {
      "fn": "SafeMath.div",
      "offset": [
        783,
        1079
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "12296": {
      "op": "POP"
    },
    "12297": {
      "op": "POP"
    },
    "12298": {
      "op": "POP"
    },
    "12299": {
      "op": "POP"
    },
    "12300": {
      "fn": "SafeMath.div",
      "jump": "o",
      "offset": [
        783,
        1079
      ],
      "op": "JUMP",
      "path": "20"
    },
    "12301": {
      "fn": "Math.min",
      "offset": [
        341,
        445
      ],
      "op": "JUMPDEST",
      "path": "19"
    },
    "12302": {
      "fn": "Math.min",
      "offset": [
        399,
        406
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x0"
    },
    "12304": {
      "fn": "Math.min",
      "offset": [
        429,
        430
      ],
      "op": "DUP2",
      "path": "19",
      "statement": 167
    },
    "12305": {
      "fn": "Math.min",
      "offset": [
        425,
        426
      ],
      "op": "DUP4",
      "path": "19"
    },
    "12306": {
      "branch": 187,
      "fn": "Math.min",
      "offset": [
        425,
        430
      ],
      "op": "LT",
      "path": "19"
    },
    "12307": {
      "fn": "Math.min",
      "offset": [
        425,
        438
      ],
      "op": "PUSH2",
      "path": "19",
      "value": "0x301C"
    },
    "12310": {
      "branch": 187,
      "fn": "Math.min",
      "offset": [
        425,
        438
      ],
      "op": "JUMPI",
      "path": "19"
    },
    "12311": {
      "fn": "Math.min",
      "offset": [
        437,
        438
      ],
      "op": "DUP2",
      "path": "19"
    },
    "12312": {
      "fn": "Math.min",
      "offset": [
        425,
        438
      ],
      "op": "PUSH2",
      "path": "19",
      "value": "0x1F6A"
    },
    "12315": {
      "fn": "Math.min",
      "offset": [
        425,
        438
      ],
      "op": "JUMP",
      "path": "19"
    },
    "12316": {
      "fn": "Math.min",
      "offset": [
        425,
        438
      ],
      "op": "JUMPDEST",
      "path": "19"
    },
    "12317": {
      "op": "POP"
    },
    "12318": {
      "fn": "Math.min",
      "offset": [
        433,
        434
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "12319": {
      "fn": "Math.min",
      "offset": [
        433,
        434
      ],
      "op": "SWAP2",
      "path": "19"
    },
    "12320": {
      "fn": "Math.min",
      "offset": [
        418,
        438
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "12321": {
      "op": "POP"
    },
    "12322": {
      "fn": "Math.min",
      "jump": "o",
      "offset": [
        341,
        445
      ],
      "op": "JUMP",
      "path": "19"
    },
    "12323": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2527,
        3426
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "12324": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2808,
        2812
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "12326": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2802,
        2813
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "12327": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2826,
        2858
      ],
      "op": "DUP5",
      "path": "15"
    },
    "12328": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2826,
        2858
      ],
      "op": "DUP2",
      "path": "15"
    },
    "12329": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2826,
        2858
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "12330": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2874,
        2899
      ],
      "op": "DUP4",
      "path": "15"
    },
    "12331": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2874,
        2899
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "12332": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2871,
        2873
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x3036"
    },
    "12335": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2871,
        2873
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "12336": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2951,
        2961
      ],
      "op": "DUP3",
      "path": "15"
    },
    "12337": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2944,
        2948
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "12339": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2929,
        2942
      ],
      "op": "DUP3",
      "path": "15"
    },
    "12340": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2925,
        2949
      ],
      "op": "ADD",
      "path": "15"
    },
    "12341": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2918,
        2962
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "12342": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2871,
        2873
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "12343": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3015,
        3016
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "12345": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2995,
        3013
      ],
      "op": "DUP5",
      "path": "15"
    },
    "12346": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2992,
        3017
      ],
      "op": "GT",
      "path": "15"
    },
    "12347": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2989,
        2991
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "12348": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2989,
        2991
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x3046"
    },
    "12351": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2989,
        2991
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "12352": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3069,
        3079
      ],
      "op": "DUP2",
      "path": "15"
    },
    "12353": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3062,
        3066
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x24"
    },
    "12355": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3047,
        3060
      ],
      "op": "DUP3",
      "path": "15"
    },
    "12356": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3043,
        3067
      ],
      "op": "ADD",
      "path": "15"
    },
    "12357": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3036,
        3080
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "12358": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2989,
        2991
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "12359": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3203,
        3204
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "12361": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3200,
        3201
      ],
      "op": "DUP1",
      "path": "15"
    },
    "12362": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3178,
        3196
      ],
      "op": "DUP6",
      "path": "15"
    },
    "12363": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3172,
        3176
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "12365": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3168,
        3197
      ],
      "op": "MUL",
      "path": "15"
    },
    "12366": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3162,
        3166
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "12368": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3158,
        3198
      ],
      "op": "ADD",
      "path": "15"
    },
    "12369": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3143,
        3156
      ],
      "op": "DUP4",
      "path": "15"
    },
    "12370": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3134,
        3141
      ],
      "op": "DUP10",
      "path": "15"
    },
    "12371": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3127,
        3132
      ],
      "op": "GAS",
      "path": "15"
    },
    "12372": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3114,
        3205
      ],
      "op": "DELEGATECALL",
      "path": "15"
    },
    "12373": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3222,
        3293
      ],
      "op": "DUP1",
      "path": "15"
    },
    "12374": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3222,
        3293
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "12375": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3222,
        3293
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x3064"
    },
    "12378": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3222,
        3293
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "12379": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3375,
        3391
      ],
      "op": "RETURNDATASIZE",
      "path": "15"
    },
    "12380": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3370,
        3373
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "12382": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3355,
        3368
      ],
      "op": "DUP4",
      "path": "15"
    },
    "12383": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3340,
        3392
      ],
      "op": "RETURNDATACOPY",
      "path": "15"
    },
    "12384": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3107,
        3410
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x3069"
    },
    "12387": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3107,
        3410
      ],
      "op": "JUMP",
      "path": "15"
    },
    "12388": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3222,
        3293
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "12389": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3273,
        3274
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "12391": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3258,
        3271
      ],
      "op": "DUP3",
      "path": "15"
    },
    "12392": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3251,
        3275
      ],
      "op": "REVERT",
      "path": "15"
    },
    "12393": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3107,
        3410
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "12394": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3107,
        3410
      ],
      "op": "POP",
      "path": "15"
    },
    "12395": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2771,
        3420
      ],
      "op": "SWAP6",
      "path": "15"
    },
    "12396": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2771,
        3420
      ],
      "op": "SWAP5",
      "path": "15"
    },
    "12397": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2771,
        3420
      ],
      "op": "POP",
      "path": "15"
    },
    "12398": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2771,
        3420
      ],
      "op": "POP",
      "path": "15"
    },
    "12399": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2771,
        3420
      ],
      "op": "POP",
      "path": "15"
    },
    "12400": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2771,
        3420
      ],
      "op": "POP",
      "path": "15"
    },
    "12401": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2771,
        3420
      ],
      "op": "POP",
      "path": "15"
    },
    "12402": {
      "fn": "Upgradeable.delegateGetData",
      "jump": "o",
      "offset": [
        2771,
        3420
      ],
      "op": "JUMP",
      "path": "15"
    },
    "12403": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11283,
        12268
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12404": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11355,
        11362
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12406": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11375,
        11388
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12407": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11398,
        11411
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12409": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11581,
        11599
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "12411": {
      "op": "PUSH15",
      "value": "0x3430B9B42FBA37AFB1BAB93B32B137"
    },
    "12427": {
      "op": "PUSH1",
      "value": "0x89"
    },
    "12429": {
      "op": "SHL"
    },
    "12430": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11655,
        11659
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12432": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11647,
        11660
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12433": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11647,
        11660
      ],
      "op": "SHL",
      "path": "10"
    },
    "12434": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11662,
        11667
      ],
      "op": "DUP7",
      "path": "10"
    },
    "12435": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12437": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12438": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12440": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "ADD",
      "path": "10"
    },
    "12441": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12442": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP5",
      "path": "10"
    },
    "12443": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP2",
      "path": "10"
    },
    "12444": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "12445": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12447": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "ADD",
      "path": "10"
    },
    "12448": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12449": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP2",
      "path": "10"
    },
    "12450": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "12451": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12453": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "ADD",
      "path": "10"
    },
    "12454": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12455": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12456": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12457": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12458": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12460": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "ADD",
      "path": "10"
    },
    "12461": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12462": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12463": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12464": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12465": {
      "op": "JUMPDEST"
    },
    "12466": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12468": {
      "op": "DUP4"
    },
    "12469": {
      "op": "LT"
    },
    "12470": {
      "op": "PUSH2",
      "value": "0x30D0"
    },
    "12473": {
      "op": "JUMPI"
    },
    "12474": {
      "op": "DUP1"
    },
    "12475": {
      "op": "MLOAD"
    },
    "12476": {
      "op": "DUP3"
    },
    "12477": {
      "op": "MSTORE"
    },
    "12478": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "12480": {
      "op": "NOT"
    },
    "12481": {
      "op": "SWAP1"
    },
    "12482": {
      "op": "SWAP3"
    },
    "12483": {
      "op": "ADD"
    },
    "12484": {
      "op": "SWAP2"
    },
    "12485": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12487": {
      "op": "SWAP2"
    },
    "12488": {
      "op": "DUP3"
    },
    "12489": {
      "op": "ADD"
    },
    "12490": {
      "op": "SWAP2"
    },
    "12491": {
      "op": "ADD"
    },
    "12492": {
      "op": "PUSH2",
      "value": "0x30B1"
    },
    "12495": {
      "op": "JUMP"
    },
    "12496": {
      "op": "JUMPDEST"
    },
    "12497": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "12499": {
      "op": "DUP4"
    },
    "12500": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12502": {
      "op": "SUB"
    },
    "12503": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "12506": {
      "op": "EXP"
    },
    "12507": {
      "op": "SUB"
    },
    "12508": {
      "op": "DUP1"
    },
    "12509": {
      "op": "NOT"
    },
    "12510": {
      "op": "DUP3"
    },
    "12511": {
      "op": "MLOAD"
    },
    "12512": {
      "op": "AND"
    },
    "12513": {
      "op": "DUP2"
    },
    "12514": {
      "op": "DUP5"
    },
    "12515": {
      "op": "MLOAD"
    },
    "12516": {
      "op": "AND"
    },
    "12517": {
      "op": "DUP1"
    },
    "12518": {
      "op": "DUP3"
    },
    "12519": {
      "op": "OR"
    },
    "12520": {
      "op": "DUP6"
    },
    "12521": {
      "op": "MSTORE"
    },
    "12522": {
      "op": "POP"
    },
    "12523": {
      "op": "POP"
    },
    "12524": {
      "op": "POP"
    },
    "12525": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12526": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12527": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12528": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12529": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12530": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "ADD",
      "path": "10"
    },
    "12531": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "12532": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12533": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12534": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12535": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12536": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12538": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12539": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12541": {
      "op": "DUP2"
    },
    "12542": {
      "op": "DUP4"
    },
    "12543": {
      "op": "SUB"
    },
    "12544": {
      "op": "SUB"
    },
    "12545": {
      "op": "DUP2"
    },
    "12546": {
      "op": "MSTORE"
    },
    "12547": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12548": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12550": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11602,
        11668
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "12551": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11581,
        11668
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12552": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11581,
        11668
      ],
      "op": "POP",
      "path": "10"
    },
    "12553": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11730,
        11734
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 168,
      "value": "0x0"
    },
    "12555": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11737,
        11742
      ],
      "op": "DUP2",
      "path": "10"
    },
    "12556": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12558": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12559": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12561": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "ADD",
      "path": "10"
    },
    "12562": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12563": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12564": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "12566": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "AND",
      "path": "10"
    },
    "12567": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "12569": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "AND",
      "path": "10"
    },
    "12570": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xF8"
    },
    "12572": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "SHL",
      "path": "10"
    },
    "12573": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP2",
      "path": "10"
    },
    "12574": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "12575": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "12577": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "ADD",
      "path": "10"
    },
    "12578": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12579": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12580": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12581": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12582": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12584": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "ADD",
      "path": "10"
    },
    "12585": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12586": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12587": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12588": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12589": {
      "op": "JUMPDEST"
    },
    "12590": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12592": {
      "op": "DUP4"
    },
    "12593": {
      "op": "LT"
    },
    "12594": {
      "op": "PUSH2",
      "value": "0x314C"
    },
    "12597": {
      "op": "JUMPI"
    },
    "12598": {
      "op": "DUP1"
    },
    "12599": {
      "op": "MLOAD"
    },
    "12600": {
      "op": "DUP3"
    },
    "12601": {
      "op": "MSTORE"
    },
    "12602": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "12604": {
      "op": "NOT"
    },
    "12605": {
      "op": "SWAP1"
    },
    "12606": {
      "op": "SWAP3"
    },
    "12607": {
      "op": "ADD"
    },
    "12608": {
      "op": "SWAP2"
    },
    "12609": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12611": {
      "op": "SWAP2"
    },
    "12612": {
      "op": "DUP3"
    },
    "12613": {
      "op": "ADD"
    },
    "12614": {
      "op": "SWAP2"
    },
    "12615": {
      "op": "ADD"
    },
    "12616": {
      "op": "PUSH2",
      "value": "0x312D"
    },
    "12619": {
      "op": "JUMP"
    },
    "12620": {
      "op": "JUMPDEST"
    },
    "12621": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "12623": {
      "op": "DUP4"
    },
    "12624": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12626": {
      "op": "SUB"
    },
    "12627": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "12630": {
      "op": "EXP"
    },
    "12631": {
      "op": "SUB"
    },
    "12632": {
      "op": "DUP1"
    },
    "12633": {
      "op": "NOT"
    },
    "12634": {
      "op": "DUP3"
    },
    "12635": {
      "op": "MLOAD"
    },
    "12636": {
      "op": "AND"
    },
    "12637": {
      "op": "DUP2"
    },
    "12638": {
      "op": "DUP5"
    },
    "12639": {
      "op": "MLOAD"
    },
    "12640": {
      "op": "AND"
    },
    "12641": {
      "op": "DUP1"
    },
    "12642": {
      "op": "DUP3"
    },
    "12643": {
      "op": "OR"
    },
    "12644": {
      "op": "DUP6"
    },
    "12645": {
      "op": "MSTORE"
    },
    "12646": {
      "op": "POP"
    },
    "12647": {
      "op": "POP"
    },
    "12648": {
      "op": "POP"
    },
    "12649": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "POP",
      "path": "10"
    },
    "12650": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "POP",
      "path": "10"
    },
    "12651": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "POP",
      "path": "10"
    },
    "12652": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12653": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "POP",
      "path": "10"
    },
    "12654": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "ADD",
      "path": "10"
    },
    "12655": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "12656": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "POP",
      "path": "10"
    },
    "12657": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "POP",
      "path": "10"
    },
    "12658": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "POP",
      "path": "10"
    },
    "12659": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12661": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12662": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12664": {
      "op": "DUP2"
    },
    "12665": {
      "op": "DUP4"
    },
    "12666": {
      "op": "SUB"
    },
    "12667": {
      "op": "SUB"
    },
    "12668": {
      "op": "DUP2"
    },
    "12669": {
      "op": "MSTORE"
    },
    "12670": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12671": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12673": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11707,
        11743
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "12674": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11697,
        11744
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12675": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11697,
        11744
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12676": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11697,
        11744
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12677": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11697,
        11744
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12679": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11697,
        11744
      ],
      "op": "ADD",
      "path": "10"
    },
    "12680": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11697,
        11744
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "12681": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11805,
        11809
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "12683": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11812,
        11817
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12684": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12686": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12687": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12689": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "ADD",
      "path": "10"
    },
    "12690": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12691": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12692": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "12694": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "AND",
      "path": "10"
    },
    "12695": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "12697": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "AND",
      "path": "10"
    },
    "12698": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xF8"
    },
    "12700": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SHL",
      "path": "10"
    },
    "12701": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP2",
      "path": "10"
    },
    "12702": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "12703": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "12705": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "ADD",
      "path": "10"
    },
    "12706": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12707": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12708": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12709": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12710": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12712": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "ADD",
      "path": "10"
    },
    "12713": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12714": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12715": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12716": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12717": {
      "op": "JUMPDEST"
    },
    "12718": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12720": {
      "op": "DUP4"
    },
    "12721": {
      "op": "LT"
    },
    "12722": {
      "op": "PUSH2",
      "value": "0x31CC"
    },
    "12725": {
      "op": "JUMPI"
    },
    "12726": {
      "op": "DUP1"
    },
    "12727": {
      "op": "MLOAD"
    },
    "12728": {
      "op": "DUP3"
    },
    "12729": {
      "op": "MSTORE"
    },
    "12730": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "12732": {
      "op": "NOT"
    },
    "12733": {
      "op": "SWAP1"
    },
    "12734": {
      "op": "SWAP3"
    },
    "12735": {
      "op": "ADD"
    },
    "12736": {
      "op": "SWAP2"
    },
    "12737": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12739": {
      "op": "SWAP2"
    },
    "12740": {
      "op": "DUP3"
    },
    "12741": {
      "op": "ADD"
    },
    "12742": {
      "op": "SWAP2"
    },
    "12743": {
      "op": "ADD"
    },
    "12744": {
      "op": "PUSH2",
      "value": "0x31AD"
    },
    "12747": {
      "op": "JUMP"
    },
    "12748": {
      "op": "JUMPDEST"
    },
    "12749": {
      "op": "MLOAD"
    },
    "12750": {
      "op": "DUP2"
    },
    "12751": {
      "op": "MLOAD"
    },
    "12752": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "12754": {
      "op": "SWAP4"
    },
    "12755": {
      "op": "DUP5"
    },
    "12756": {
      "op": "SUB"
    },
    "12757": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "12760": {
      "op": "EXP"
    },
    "12761": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "12763": {
      "op": "NOT"
    },
    "12764": {
      "op": "ADD"
    },
    "12765": {
      "op": "DUP1"
    },
    "12766": {
      "op": "NOT"
    },
    "12767": {
      "op": "SWAP1"
    },
    "12768": {
      "op": "SWAP3"
    },
    "12769": {
      "op": "AND"
    },
    "12770": {
      "op": "SWAP2"
    },
    "12771": {
      "op": "AND"
    },
    "12772": {
      "op": "OR"
    },
    "12773": {
      "op": "SWAP1"
    },
    "12774": {
      "op": "MSTORE"
    },
    "12775": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12777": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12778": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12779": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "12780": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12781": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "12782": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "ADD",
      "path": "10"
    },
    "12783": {
      "op": "DUP3"
    },
    "12784": {
      "op": "DUP2"
    },
    "12785": {
      "op": "SUB"
    },
    "12786": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "12788": {
      "op": "NOT"
    },
    "12789": {
      "op": "ADD"
    },
    "12790": {
      "op": "DUP4"
    },
    "12791": {
      "op": "MSTORE"
    },
    "12792": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12793": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "12794": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11782,
        11818
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "12795": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12796": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12797": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "12798": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "ADD",
      "path": "10"
    },
    "12799": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "12800": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12801": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "12802": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "12803": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11679,
        11820
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "12804": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11679,
        11820
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "12805": {
      "op": "POP"
    },
    "12806": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "12807": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11772,
        11819
      ],
      "op": "SWAP6",
      "path": "10"
    },
    "12808": {
      "op": "POP"
    },
    "12809": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11992,
        12027
      ],
      "op": "PUSH17",
      "path": "10",
      "value": "0x14551231950B75FC4402DA1732FC9BEC0"
    },
    "12827": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11992,
        12027
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "12828": {
      "op": "POP"
    },
    "12829": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBF"
    },
    "12847": {
      "op": "NOT"
    },
    "12848": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12057,
        12123
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "12849": {
      "op": "POP"
    },
    "12850": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "12852": {
      "op": "SWAP2"
    },
    "12853": {
      "op": "POP"
    },
    "12854": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12057,
        12123
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12855": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12057,
        12123
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12856": {
      "op": "POP"
    },
    "12857": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12178,
        12183
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12858": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12170,
        12175
      ],
      "op": "DUP8",
      "path": "10"
    },
    "12859": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12155,
        12195
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "12860": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12134,
        12195
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12861": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12134,
        12195
      ],
      "op": "POP",
      "path": "10"
    },
    "12862": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12251,
        12260
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 169
    },
    "12863": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12216,
        12261
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12864": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12216,
        12261
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3245"
    },
    "12867": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12216,
        12261
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12868": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12216,
        12261
      ],
      "op": "INVALID",
      "path": "10"
    },
    "12869": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12216,
        12261
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12870": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12243,
        12248
      ],
      "op": "DUP6",
      "path": "10"
    },
    "12871": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12223,
        12233
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12872": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12216,
        12261
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "12873": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12212,
        12213
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "12875": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12212,
        12261
      ],
      "op": "ADD",
      "path": "10"
    },
    "12876": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12212,
        12261
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "12877": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11283,
        12268
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "12878": {
      "op": "POP"
    },
    "12879": {
      "op": "POP"
    },
    "12880": {
      "op": "POP"
    },
    "12881": {
      "op": "POP"
    },
    "12882": {
      "op": "POP"
    },
    "12883": {
      "op": "POP"
    },
    "12884": {
      "op": "POP"
    },
    "12885": {
      "op": "POP"
    },
    "12886": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "jump": "o",
      "offset": [
        11283,
        12268
      ],
      "op": "JUMP",
      "path": "10"
    },
    "12887": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        16930,
        17557
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12888": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        16995,
        17011
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x325F"
    },
    "12891": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        16995,
        17011
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x34CA"
    },
    "12894": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "jump": "i",
      "offset": [
        16995,
        17011
      ],
      "op": "JUMP",
      "path": "10"
    },
    "12895": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        16995,
        17011
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12896": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17035,
        17039
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "12898": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17035,
        17039
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12899": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17035,
        17039
      ],
      "op": "ADD",
      "path": "10"
    },
    "12900": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17035,
        17039
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12901": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17035,
        17039
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12902": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17049,
        17081
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x326F"
    },
    "12905": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17049,
        17081
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12906": {
      "op": "POP"
    },
    "12907": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17073,
        17081
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 170,
      "value": "0x1FCC"
    },
    "12910": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17073,
        17081
      ],
      "op": "JUMP",
      "path": "10"
    },
    "12911": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17049,
        17081
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12912": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17136,
        17140
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12913": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17136,
        17140
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12914": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "12920": {
      "op": "NOT"
    },
    "12921": {
      "offset": [
        987,
        1053
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12922": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17091,
        17100
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12924": {
      "offset": [
        987,
        1053
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12925": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17174,
        17178
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "12927": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17174,
        17178
      ],
      "op": "DUP8",
      "path": "10"
    },
    "12928": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17174,
        17178
      ],
      "op": "ADD",
      "path": "10"
    },
    "12929": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17174,
        17178
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "12930": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17171,
        17172
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x2"
    },
    "12932": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17164,
        17182
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "12933": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17150,
        17182
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12934": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17150,
        17182
      ],
      "op": "POP",
      "path": "10"
    },
    "12935": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17192,
        17204
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12937": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17224,
        17225
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12938": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17207,
        17226
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12939": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17207,
        17226
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3290"
    },
    "12942": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17207,
        17226
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12943": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17207,
        17226
      ],
      "op": "INVALID",
      "path": "10"
    },
    "12944": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17207,
        17226
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12945": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17219,
        17222
      ],
      "op": "DUP3",
      "path": "10"
    },
    "12946": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17214,
        17217
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12947": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17207,
        17226
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "12948": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17192,
        17226
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12949": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17192,
        17226
      ],
      "op": "POP",
      "path": "10"
    },
    "12950": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17236,
        17245
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12952": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17264,
        17265
      ],
      "op": "DUP5",
      "path": "10"
    },
    "12953": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17248,
        17266
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12954": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17248,
        17266
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x329F"
    },
    "12957": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17248,
        17266
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12958": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17248,
        17266
      ],
      "op": "INVALID",
      "path": "10"
    },
    "12959": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17248,
        17266
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12960": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17261,
        17262
      ],
      "op": "DUP5",
      "path": "10"
    },
    "12961": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17255,
        17259
      ],
      "op": "DUP4",
      "path": "10"
    },
    "12962": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17248,
        17266
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "12963": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17236,
        17266
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12964": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17236,
        17266
      ],
      "op": "POP",
      "path": "10"
    },
    "12965": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17276,
        17285
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12967": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17315,
        17316
      ],
      "op": "DUP6",
      "path": "10"
    },
    "12968": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17288,
        17317
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12969": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17288,
        17317
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x32AE"
    },
    "12972": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17288,
        17317
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12973": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17288,
        17317
      ],
      "op": "INVALID",
      "path": "10"
    },
    "12974": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17288,
        17317
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12975": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17311,
        17312
      ],
      "op": "DUP7",
      "path": "10"
    },
    "12976": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17298,
        17313
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12977": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17298,
        17313
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x32B6"
    },
    "12980": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17298,
        17313
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12981": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17298,
        17313
      ],
      "op": "INVALID",
      "path": "10"
    },
    "12982": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17298,
        17313
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "12983": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17308,
        17309
      ],
      "op": "DUP7",
      "path": "10"
    },
    "12984": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17305,
        17306
      ],
      "op": "DUP8",
      "path": "10"
    },
    "12985": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17298,
        17313
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "12986": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17295,
        17296
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "12988": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17288,
        17317
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "12989": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17276,
        17317
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "12990": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17276,
        17317
      ],
      "op": "POP",
      "path": "10"
    },
    "12991": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17327,
        17336
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "12993": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17385,
        17386
      ],
      "op": "DUP7",
      "path": "10"
    },
    "12994": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17339,
        17387
      ],
      "op": "DUP1",
      "path": "10"
    },
    "12995": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17339,
        17387
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x32C8"
    },
    "12998": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17339,
        17387
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12999": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17339,
        17387
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13000": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17339,
        17387
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13001": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17382,
        17383
      ],
      "op": "DUP8",
      "path": "10"
    },
    "13002": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17363,
        17384
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13003": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17363,
        17384
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x32D0"
    },
    "13006": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17363,
        17384
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13007": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17363,
        17384
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13008": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17363,
        17384
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13009": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17379,
        17380
      ],
      "op": "DUP5",
      "path": "10"
    },
    "13010": {
      "op": "PUSH5",
      "value": "0x1000003D2"
    },
    "13016": {
      "op": "NOT"
    },
    "13017": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17363,
        17384
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "13018": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17359,
        17360
      ],
      "op": "DUP9",
      "path": "10"
    },
    "13019": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17346,
        17361
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13020": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17346,
        17361
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x32E1"
    },
    "13023": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17346,
        17361
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13024": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17346,
        17361
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13025": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17346,
        17361
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13026": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17356,
        17357
      ],
      "op": "DUP5",
      "path": "10"
    },
    "13027": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17353,
        17354
      ],
      "op": "DUP6",
      "path": "10"
    },
    "13028": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17346,
        17361
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "13029": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17339,
        17387
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "13030": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17397,
        17405
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 171
    },
    "13031": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17397,
        17405
      ],
      "op": "DUP11",
      "path": "10"
    },
    "13032": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17397,
        17405
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "13033": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17327,
        17387
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "13034": {
      "op": "POP"
    },
    "13035": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17514,
        17515
      ],
      "op": "DUP7",
      "path": "10",
      "statement": 172
    },
    "13036": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17514,
        17515
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13037": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17422,
        17516
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x32F2"
    },
    "13040": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17422,
        17516
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13041": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17422,
        17516
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13042": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17422,
        17516
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13043": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17510,
        17511
      ],
      "op": "DUP8",
      "path": "10"
    },
    "13044": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17464,
        17512
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13045": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17464,
        17512
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x32FA"
    },
    "13048": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17464,
        17512
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13049": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17464,
        17512
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13050": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17464,
        17512
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13051": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17506,
        17507
      ],
      "op": "DUP9",
      "path": "10"
    },
    "13052": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17487,
        17508
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13053": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17487,
        17508
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3302"
    },
    "13056": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17487,
        17508
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13057": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17487,
        17508
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13058": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17487,
        17508
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13059": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17500,
        17504
      ],
      "op": "DUP7",
      "path": "10"
    },
    "13060": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17494,
        17498
      ],
      "op": "DUP8",
      "path": "10"
    },
    "13061": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17487,
        17508
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "13062": {
      "op": "PUSH4",
      "value": "0x800001E9"
    },
    "13067": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "13069": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "13071": {
      "op": "SHL"
    },
    "13072": {
      "op": "SUB"
    },
    "13073": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17464,
        17512
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "13074": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17460,
        17461
      ],
      "op": "DUP9",
      "path": "10"
    },
    "13075": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17429,
        17462
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13076": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17429,
        17462
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3319"
    },
    "13079": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17429,
        17462
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13080": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17429,
        17462
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13081": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17429,
        17462
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13082": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17456,
        17457
      ],
      "op": "DUP10",
      "path": "10"
    },
    "13083": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17439,
        17458
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13084": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17439,
        17458
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3321"
    },
    "13087": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17439,
        17458
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13088": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17439,
        17458
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13089": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17439,
        17458
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13090": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17453,
        17454
      ],
      "op": "DUP5",
      "path": "10"
    },
    "13091": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17449,
        17450
      ],
      "op": "DUP12",
      "path": "10"
    },
    "13092": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17449,
        17454
      ],
      "op": "SUB",
      "path": "10"
    },
    "13093": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17446,
        17447
      ],
      "op": "DUP8",
      "path": "10"
    },
    "13094": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17439,
        17458
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "13095": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17436,
        17437
      ],
      "op": "DUP6",
      "path": "10"
    },
    "13096": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17429,
        17462
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "13097": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17422,
        17516
      ],
      "op": "ADDMOD",
      "path": "10"
    },
    "13098": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17415,
        17419
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "13100": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17415,
        17419
      ],
      "op": "DUP11",
      "path": "10"
    },
    "13101": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17415,
        17419
      ],
      "op": "ADD",
      "path": "10"
    },
    "13102": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17415,
        17516
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "13103": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17548,
        17549
      ],
      "op": "DUP7",
      "path": "10",
      "statement": 173
    },
    "13104": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17548,
        17549
      ],
      "op": "DUP1",
      "path": "10"
    },
    "13105": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17533,
        17550
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3336"
    },
    "13108": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17533,
        17550
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "13109": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17533,
        17550
      ],
      "op": "INVALID",
      "path": "10"
    },
    "13110": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17533,
        17550
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "13111": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17545,
        17546
      ],
      "op": "DUP9",
      "path": "10"
    },
    "13112": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17540,
        17543
      ],
      "op": "DUP7",
      "path": "10"
    },
    "13113": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17533,
        17550
      ],
      "op": "MULMOD",
      "path": "10"
    },
    "13114": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17526,
        17530
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "13116": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17526,
        17530
      ],
      "op": "DUP11",
      "path": "10"
    },
    "13117": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17526,
        17530
      ],
      "op": "ADD",
      "path": "10"
    },
    "13118": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17526,
        17550
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "13119": {
      "op": "POP"
    },
    "13120": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17526,
        17527
      ],
      "op": "SWAP7",
      "path": "10"
    },
    "13121": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17526,
        17527
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "13122": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        16930,
        17557
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "13123": {
      "op": "POP"
    },
    "13124": {
      "op": "POP"
    },
    "13125": {
      "op": "POP"
    },
    "13126": {
      "op": "POP"
    },
    "13127": {
      "op": "POP"
    },
    "13128": {
      "op": "POP"
    },
    "13129": {
      "op": "POP"
    },
    "13130": {
      "op": "POP"
    },
    "13131": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "jump": "o",
      "offset": [
        16930,
        17557
      ],
      "op": "JUMP",
      "path": "10"
    },
    "13132": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9187,
        10146
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "13133": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9320,
        9341
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "13135": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9610,
        9612
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "13137": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9605,
        9607
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1F"
    },
    "13139": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9591,
        9603
      ],
      "op": "DUP4",
      "path": "13"
    },
    "13140": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9587,
        9608
      ],
      "op": "ADD",
      "path": "13"
    },
    "13141": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9583,
        9613
      ],
      "op": "DIV",
      "path": "13"
    },
    "13142": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9640,
        9653
      ],
      "op": "DUP5",
      "path": "13"
    },
    "13143": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9698,
        9700
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "13145": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9689,
        9696
      ],
      "op": "DUP6",
      "path": "13"
    },
    "13146": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9685,
        9701
      ],
      "op": "ADD",
      "path": "13"
    },
    "13147": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9745,
        9746
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "13149": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9714,
        10015
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "13150": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9828,
        9833
      ],
      "op": "DUP4",
      "path": "13"
    },
    "13151": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9825,
        9826
      ],
      "op": "DUP2",
      "path": "13"
    },
    "13152": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9822,
        9834
      ],
      "op": "LT",
      "path": "13"
    },
    "13153": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9714,
        10015
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "13154": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9714,
        10015
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x3379"
    },
    "13157": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9714,
        10015
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "13158": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9921,
        9923
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "13160": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9914,
        9924
      ],
      "op": "DUP2",
      "path": "13"
    },
    "13161": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9914,
        9924
      ],
      "op": "MUL",
      "path": "13"
    },
    "13162": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9980,
        9999
      ],
      "op": "DUP4",
      "path": "13"
    },
    "13163": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9980,
        9999
      ],
      "op": "DUP2",
      "path": "13"
    },
    "13164": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9980,
        9999
      ],
      "op": "ADD",
      "path": "13"
    },
    "13165": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9974,
        10000
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "13166": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9948,
        9972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "13167": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9948,
        9972
      ],
      "op": "DUP4",
      "path": "13"
    },
    "13168": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9948,
        9972
      ],
      "op": "ADD",
      "path": "13"
    },
    "13169": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9941,
        10001
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "13170": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9865,
        9866
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "13172": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9858,
        9867
      ],
      "op": "ADD",
      "path": "13"
    },
    "13173": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9714,
        10015
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x335D"
    },
    "13176": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9714,
        10015
      ],
      "op": "JUMP",
      "path": "13"
    },
    "13177": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9714,
        10015
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "13178": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9734,
        9748
      ],
      "op": "POP",
      "path": "13"
    },
    "13179": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9734,
        9748
      ],
      "op": "POP",
      "path": "13"
    },
    "13180": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9734,
        9748
      ],
      "op": "POP",
      "path": "13"
    },
    "13181": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9734,
        9748
      ],
      "op": "POP",
      "path": "13"
    },
    "13182": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10074,
        10075
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "13184": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10062,
        10069
      ],
      "op": "DUP4",
      "path": "13"
    },
    "13185": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10056,
        10070
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "13186": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10052,
        10054
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "13188": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10048,
        10071
      ],
      "op": "ADD",
      "path": "13"
    },
    "13189": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10039,
        10046
      ],
      "op": "DUP5",
      "path": "13"
    },
    "13190": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10035,
        10072
      ],
      "op": "ADD",
      "path": "13"
    },
    "13191": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10028,
        10076
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "13192": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10127,
        10139
      ],
      "op": "DUP2",
      "path": "13",
      "statement": 174
    },
    "13193": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10111,
        10124
      ],
      "op": "DUP5",
      "path": "13"
    },
    "13194": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10111,
        10139
      ],
      "op": "ADD",
      "path": "13"
    },
    "13195": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10095,
        10139
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "13196": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10095,
        10139
      ],
      "op": "POP",
      "path": "13"
    },
    "13197": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9187,
        10146
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "13198": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9187,
        10146
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "13199": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9187,
        10146
      ],
      "op": "POP",
      "path": "13"
    },
    "13200": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9187,
        10146
      ],
      "op": "POP",
      "path": "13"
    },
    "13201": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9187,
        10146
      ],
      "op": "POP",
      "path": "13"
    },
    "13202": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "o",
      "offset": [
        9187,
        10146
      ],
      "op": "JUMP",
      "path": "13"
    },
    "13203": {
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13204": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13206": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "13207": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13208": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E0"
    },
    "13211": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13212": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13214": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13215": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13216": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13218": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13219": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13220": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13222": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13223": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13225": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13226": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13227": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13229": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13230": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13232": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13233": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13234": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13236": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13237": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13239": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13240": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13241": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13243": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13244": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13246": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13247": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13248": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13250": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13251": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13253": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13254": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13255": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13257": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13258": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13260": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13261": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13262": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13264": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13265": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13267": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13268": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13269": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13271": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13272": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13274": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13275": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13276": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13278": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13279": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13281": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13282": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13283": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13285": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13286": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13288": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13289": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13290": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13292": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13293": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13295": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13296": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13297": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13299": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13300": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13302": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13303": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13304": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13306": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13307": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13309": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13310": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13311": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13313": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13314": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13316": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13317": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13318": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13320": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13321": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13323": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13324": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13325": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13327": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13328": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13330": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13331": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13332": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13334": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13335": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13337": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13338": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13339": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13341": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13342": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13344": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13345": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13346": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13348": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13349": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13351": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13352": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13353": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13355": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13356": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13358": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13359": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "NOT",
      "path": "1"
    },
    "13360": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "AND",
      "path": "1"
    },
    "13361": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13362": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13363": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13365": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13366": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "13370": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "13372": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "13374": {
      "op": "SHL"
    },
    "13375": {
      "op": "SUB"
    },
    "13376": {
      "offset": [
        389,
        9172
      ],
      "op": "AND",
      "path": "1"
    },
    "13377": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13378": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13379": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13381": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13382": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13384": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "13386": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "13388": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "13390": {
      "op": "SHL"
    },
    "13391": {
      "op": "SUB"
    },
    "13392": {
      "offset": [
        389,
        9172
      ],
      "op": "NOT",
      "path": "1"
    },
    "13393": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "AND",
      "path": "1"
    },
    "13394": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13395": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13396": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "POP",
      "path": "1"
    },
    "13397": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13398": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "o",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13399": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13400": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13402": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "13403": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13404": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "13406": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13407": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13409": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13410": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13411": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x346A"
    },
    "13414": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13417": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13418": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13419": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13420": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13421": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13423": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13424": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3477"
    },
    "13427": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13430": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13431": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13432": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13433": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13434": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13436": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13438": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP3",
      "path": "1"
    },
    "13439": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13440": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13441": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13443": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13444": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x348B"
    },
    "13447": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13450": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13451": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13452": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13453": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13454": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13456": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13457": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3498"
    },
    "13460": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x34E8"
    },
    "13463": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13464": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13465": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13466": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13467": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13468": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "o",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13469": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13470": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13472": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "13473": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13474": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "13476": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13477": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13479": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13480": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13481": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x34B0"
    },
    "13484": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13487": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13488": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13489": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13490": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13491": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13493": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13494": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x34BD"
    },
    "13497": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13500": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13501": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13502": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13503": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13504": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13506": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13507": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13509": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13510": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13511": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "POP",
      "path": "1"
    },
    "13512": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13513": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "o",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13514": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13515": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13517": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "13518": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13519": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "13521": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13522": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13524": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13525": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13526": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "13528": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13529": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "13531": {
      "op": "DUP3"
    },
    "13532": {
      "op": "MUL"
    },
    "13533": {
      "op": "DUP1"
    },
    "13534": {
      "op": "CALLDATASIZE"
    },
    "13535": {
      "op": "DUP4"
    },
    "13536": {
      "op": "CALLDATACOPY"
    },
    "13537": {
      "op": "POP"
    },
    "13538": {
      "offset": [
        389,
        9172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "13539": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "13540": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "13541": {
      "op": "POP"
    },
    "13542": {
      "op": "POP"
    },
    "13543": {
      "jump": "o",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13544": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13545": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13547": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "13548": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13549": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "13551": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13552": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13554": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13555": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13556": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x34FB"
    },
    "13559": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13562": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13563": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13564": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13565": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13566": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13568": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13569": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3508"
    },
    "13572": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13575": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13576": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13577": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13578": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13579": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13581": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13582": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3515"
    },
    "13585": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13588": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13589": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13590": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13591": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13592": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13594": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13595": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3522"
    },
    "13598": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x353D"
    },
    "13601": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "i",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13602": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13603": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13604": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13605": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13607": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13608": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "13610": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13611": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13612": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13614": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13615": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "13617": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13618": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13619": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13621": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13622": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "13624": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "13625": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13626": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "POP",
      "path": "1"
    },
    "13627": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13628": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "o",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "13629": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "13630": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "13632": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13633": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "13634": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13635": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP3",
      "path": "1"
    },
    "13636": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13637": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13638": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "13639": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13640": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "13642": {
      "offset": [
        389,
        9172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "13643": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP3",
      "path": "1"
    },
    "13644": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13645": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "13647": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "DUP3",
      "path": "1"
    },
    "13648": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "ADD",
      "path": "1"
    },
    "13649": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "13650": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        389,
        9172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "13651": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "o",
      "offset": [
        389,
        9172
      ],
      "op": "JUMP",
      "path": "1"
    }
  },
  "sha1": "4574bcf2bfc352123703c56b7886a8f5715c848b",
  "source": "pragma solidity ^0.6.5;\n\nimport \"nucypher/lib/ReEncryptionValidator.sol\";\nimport \"nucypher/lib/SignatureVerifier.sol\";\nimport \"nucypher/StakingEscrow.sol\";\nimport \"nucypher/proxy/Upgradeable.sol\";\nimport \"zeppelin/math/SafeMath.sol\";\nimport \"zeppelin/math/Math.sol\";\n\n\n/**\n* @title Adjudicator\n* @notice Supervises stakers' behavior and punishes when something's wrong.\n* @dev |v2.1.2|\n*/\ncontract Adjudicator is Upgradeable {\n\n    using SafeMath for uint256;\n    using UmbralDeserializer for bytes;\n\n    event CFragEvaluated(\n        bytes32 indexed evaluationHash,\n        address indexed investigator,\n        bool correctness\n    );\n    event IncorrectCFragVerdict(\n        bytes32 indexed evaluationHash,\n        address indexed worker,\n        address indexed staker\n    );\n\n    // used only for upgrading\n    bytes32 constant RESERVED_CAPSULE_AND_CFRAG_BYTES = bytes32(0);\n    address constant RESERVED_ADDRESS = address(0);\n\n    StakingEscrow public immutable escrow;\n    SignatureVerifier.HashAlgorithm public immutable hashAlgorithm;\n    uint256 public immutable basePenalty;\n    uint256 public immutable penaltyHistoryCoefficient;\n    uint256 public immutable percentagePenaltyCoefficient;\n    uint256 public immutable rewardCoefficient;\n\n    mapping (address => uint256) public penaltyHistory;\n    mapping (bytes32 => bool) public evaluatedCFrags;\n\n    /**\n    * @param _escrow Escrow contract\n    * @param _hashAlgorithm Hashing algorithm\n    * @param _basePenalty Base for the penalty calculation\n    * @param _penaltyHistoryCoefficient Coefficient for calculating the penalty depending on the history\n    * @param _percentagePenaltyCoefficient Coefficient for calculating the percentage penalty\n    * @param _rewardCoefficient Coefficient for calculating the reward\n    */\n    constructor(\n        StakingEscrow _escrow,\n        SignatureVerifier.HashAlgorithm _hashAlgorithm,\n        uint256 _basePenalty,\n        uint256 _penaltyHistoryCoefficient,\n        uint256 _percentagePenaltyCoefficient,\n        uint256 _rewardCoefficient\n    )\n        public\n    {\n        // Sanity checks.\n        require(_escrow.secondsPerPeriod() > 0 &&  // This contract has an escrow, and it's not the null address.\n            // The reward and penalty coefficients are set.\n            _percentagePenaltyCoefficient != 0 &&\n            _rewardCoefficient != 0);\n        escrow = _escrow;\n        hashAlgorithm = _hashAlgorithm;\n        basePenalty = _basePenalty;\n        percentagePenaltyCoefficient = _percentagePenaltyCoefficient;\n        penaltyHistoryCoefficient = _penaltyHistoryCoefficient;\n        rewardCoefficient = _rewardCoefficient;\n    }\n\n    /**\n    * @notice Submit proof that a worker created wrong CFrag\n    * @param _capsuleBytes Serialized capsule\n    * @param _cFragBytes Serialized CFrag\n    * @param _cFragSignature Signature of CFrag by worker\n    * @param _taskSignature Signature of task specification by Bob\n    * @param _requesterPublicKey Bob's signing public key, also known as \"stamp\"\n    * @param _workerPublicKey Worker's signing public key, also known as \"stamp\"\n    * @param _workerIdentityEvidence Signature of worker's public key by worker's eth-key\n    * @param _preComputedData Additional pre-computed data for CFrag correctness verification\n    */\n    function evaluateCFrag(\n        bytes memory _capsuleBytes,\n        bytes memory _cFragBytes,\n        bytes memory _cFragSignature,\n        bytes memory _taskSignature,\n        bytes memory _requesterPublicKey,\n        bytes memory _workerPublicKey,\n        bytes memory _workerIdentityEvidence,\n        bytes memory _preComputedData\n    )\n        public\n    {\n        // 1. Check that CFrag is not evaluated yet\n        bytes32 evaluationHash = SignatureVerifier.hash(\n            abi.encodePacked(_capsuleBytes, _cFragBytes), hashAlgorithm);\n        require(!evaluatedCFrags[evaluationHash], \"This CFrag has already been evaluated.\");\n        evaluatedCFrags[evaluationHash] = true;\n\n        // 2. Verify correctness of re-encryption\n        bool cFragIsCorrect = ReEncryptionValidator.validateCFrag(_capsuleBytes, _cFragBytes, _preComputedData);\n        emit CFragEvaluated(evaluationHash, msg.sender, cFragIsCorrect);\n\n        // 3. Verify associated public keys and signatures\n        require(ReEncryptionValidator.checkSerializedCoordinates(_workerPublicKey),\n                \"Staker's public key is invalid\");\n        require(ReEncryptionValidator.checkSerializedCoordinates(_requesterPublicKey),\n                \"Requester's public key is invalid\");\n\n        UmbralDeserializer.PreComputedData memory precomp = _preComputedData.toPreComputedData();\n\n        // Verify worker's signature of CFrag\n        require(SignatureVerifier.verify(\n                _cFragBytes,\n                abi.encodePacked(_cFragSignature, precomp.lostBytes[1]),\n                _workerPublicKey,\n                hashAlgorithm),\n                \"CFrag signature is invalid\"\n        );\n\n        // Verify worker's signature of taskSignature and that it corresponds to cfrag.proof.metadata\n        UmbralDeserializer.CapsuleFrag memory cFrag = _cFragBytes.toCapsuleFrag();\n        require(SignatureVerifier.verify(\n                _taskSignature,\n                abi.encodePacked(cFrag.proof.metadata, precomp.lostBytes[2]),\n                _workerPublicKey,\n                hashAlgorithm),\n                \"Task signature is invalid\"\n        );\n\n        // Verify that _taskSignature is bob's signature of the task specification.\n        // A task specification is: capsule + ursula pubkey + alice address + blockhash\n        bytes32 stampXCoord;\n        assembly {\n            stampXCoord := mload(add(_workerPublicKey, 32))\n        }\n        bytes memory stamp = abi.encodePacked(precomp.lostBytes[4], stampXCoord);\n\n        require(SignatureVerifier.verify(\n                abi.encodePacked(_capsuleBytes,\n                                 stamp,\n                                 _workerIdentityEvidence,\n                                 precomp.alicesKeyAsAddress,\n                                 bytes32(0)),\n                abi.encodePacked(_taskSignature, precomp.lostBytes[3]),\n                _requesterPublicKey,\n                hashAlgorithm),\n                \"Specification signature is invalid\"\n        );\n\n        // 4. Extract worker address from stamp signature.\n        address worker = SignatureVerifier.recover(\n            SignatureVerifier.hashEIP191(stamp, byte(0x45)), // Currently, we use version E (0x45) of EIP191 signatures\n            _workerIdentityEvidence);\n        address staker = escrow.stakerFromWorker(worker);\n        require(staker != address(0), \"Worker must be related to a staker\");\n\n        // 5. Check that staker can be slashed\n        uint256 stakerValue = escrow.getAllTokens(staker);\n        require(stakerValue > 0, \"Staker has no tokens\");\n\n        // 6. If CFrag was incorrect, slash staker\n        if (!cFragIsCorrect) {\n            (uint256 penalty, uint256 reward) = calculatePenaltyAndReward(staker, stakerValue);\n            escrow.slashStaker(staker, penalty, msg.sender, reward);\n            emit IncorrectCFragVerdict(evaluationHash, worker, staker);\n        }\n    }\n\n    /**\n    * @notice Calculate penalty to the staker and reward to the investigator\n    * @param _staker Staker's address\n    * @param _stakerValue Amount of tokens that belong to the staker\n    */\n    function calculatePenaltyAndReward(address _staker, uint256 _stakerValue)\n        internal returns (uint256 penalty, uint256 reward)\n    {\n        penalty = basePenalty.add(penaltyHistoryCoefficient.mul(penaltyHistory[_staker]));\n        penalty = Math.min(penalty, _stakerValue.div(percentagePenaltyCoefficient));\n        reward = penalty.div(rewardCoefficient);\n        // TODO add maximum condition or other overflow protection or other penalty condition (#305?)\n        penaltyHistory[_staker] = penaltyHistory[_staker].add(1);\n    }\n\n    /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`\n    function verifyState(address _testTarget) public override virtual {\n        super.verifyState(_testTarget);\n        bytes32 evaluationCFragHash = SignatureVerifier.hash(\n            abi.encodePacked(RESERVED_CAPSULE_AND_CFRAG_BYTES), SignatureVerifier.HashAlgorithm.SHA256);\n        require(delegateGet(_testTarget, this.evaluatedCFrags.selector, evaluationCFragHash) ==\n            (evaluatedCFrags[evaluationCFragHash] ? 1 : 0));\n        require(delegateGet(_testTarget, this.penaltyHistory.selector, bytes32(bytes20(RESERVED_ADDRESS))) ==\n            penaltyHistory[RESERVED_ADDRESS]);\n    }\n\n    /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `finishUpgrade`\n    function finishUpgrade(address _target) public override virtual {\n        super.finishUpgrade(_target);\n        // preparation for the verifyState method\n        bytes32 evaluationCFragHash = SignatureVerifier.hash(\n            abi.encodePacked(RESERVED_CAPSULE_AND_CFRAG_BYTES), SignatureVerifier.HashAlgorithm.SHA256);\n        evaluatedCFrags[evaluationCFragHash] = true;\n        penaltyHistory[RESERVED_ADDRESS] = 123;\n    }\n}\n",
  "sourceMap": "389:8783:1:-:0;;;1792:860;5:9:-1;2:2;;;27:1;24;17:12;2:2;1792:860:1;;;;;;;;;;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;1792:860:1;;;;;;;;;;;;;;;;;;;;;;;;516:6:21;:19;;-1:-1:-1;;;;;;516:19:21;525:10;516:19;;;;550:40;;1792:860:1;;;;;;;;;;;;-1:-1:-1;;;;;583:6:21;;550:40;;516:6;;550:40;2146:1:1;2117:7;-1:-1:-1;;;;;2117:24:1;;:26;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2117:26:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2117:26:1;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2117:26:1;:30;;;:204;;;;-1:-1:-1;2287:34:1;;;2117:204;:243;;;;-1:-1:-1;2337:23:1;;;2117:243;2109:252;;12:1:-1;9;2:12;2109:252:1;-1:-1:-1;;;;;;2371:16:1;;;;;;;2413:14;2397:30;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2437:26:1;;;;;2473:60;;2543:54;;2607:38;;-1:-1:-1;;389:8783:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "../../nucypher/blockchain/eth/sol/source/contracts/Adjudicator.sol",
  "type": "contract"
}